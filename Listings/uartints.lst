


ARM Macro Assembler    Page 1 


    1 00000000         ; Modified by Josue Pinzon Vivas May 24, 2017
    2 00000000         ; UARTInts.s
    3 00000000         ; Runs on TM4C1294
    4 00000000         ; Use UART0 to implement bidirectional data transfer to 
                       and from a
    5 00000000         ; computer running HyperTerminal.  This time, interrupts
                        and FIFOs
    6 00000000         ; are used.
    7 00000000         ; This file is named "UARTInts" because it is the UART w
                       ith interrupts.
    8 00000000         ; Daniel Valvano
    9 00000000         ; May 29, 2014
   10 00000000         ; Modified by EE345L students Charlie Gough && Matt Hawk
                       
   11 00000000         ; Modified by EE345M students Agustinus Darmawan && Ming
                       jie Qiu
   12 00000000         
   13 00000000         ;  This example accompanies the book
   14 00000000         ;  "Embedded Systems: Real Time Interfacing to Arm Corte
                       x M Microcontrollers",
   15 00000000         ;  ISBN: 978-1463590154, Jonathan Valvano, copyright (c)
                        2014
   16 00000000         ;  Program 5.11 Section 5.6, Program 3.10
   17 00000000         ;
   18 00000000         ;Copyright 2014 by Jonathan W. Valvano, valvano@mail.ute
                       xas.edu
   19 00000000         ;   You may use, edit, run or distribute this file
   20 00000000         ;   as long as the above copyright notice remains
   21 00000000         ;THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHET
                       HER EXPRESS, IMPLIED
   22 00000000         ;OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WA
                       RRANTIES OF
   23 00000000         ;MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE AP
                       PLY TO THIS SOFTWARE.
   24 00000000         ;VALVANO SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR 
                       SPECIAL, INCIDENTAL,
   25 00000000         ;OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
   26 00000000         ;For more information about my classes, my research, and
                        my books, see
   27 00000000         ;http://users.ece.utexas.edu/~valvano/
   28 00000000         
   29 00000000         ; U0Rx (VCP receive) connected to PA0
   30 00000000         ; U0Tx (VCP transmit) connected to PA1
   31 00000000         ; Note: Connected LaunchPad JP4 and JP5 inserted paralle
                       l with long side of board.
   32 00000000         
   33 00000000 00000020 
                       NVIC_EN0_INT5
                               EQU              0x00000020  ; Interrupt 5 enabl
                                                            e
   34 00000000 E000E100 
                       NVIC_EN0_R
                               EQU              0xE000E100  ; IRQ 0 to 31 Set E
                                                            nable Register
   35 00000000 E000E404 
                       NVIC_PRI1_R
                               EQU              0xE000E404  ; IRQ 4 to 7 Priori
                                                            ty Register
   36 00000000 40058420 



ARM Macro Assembler    Page 2 


                       GPIO_PORTA_AFSEL_R
                               EQU              0x40058420
   37 00000000 40058510 
                       GPIO_PORTA_PUR_R
                               EQU              0x40058510
   38 00000000 4005851C 
                       GPIO_PORTA_DEN_R
                               EQU              0x4005851C
   39 00000000 40058528 
                       GPIO_PORTA_AMSEL_R
                               EQU              0x40058528
   40 00000000 4005852C 
                       GPIO_PORTA_PCTL_R
                               EQU              0x4005852C
   41 00000000 4000C000 
                       UART0_DR_R
                               EQU              0x4000C000
   42 00000000 4000C018 
                       UART0_FR_R
                               EQU              0x4000C018
   43 00000000 00000040 
                       UART_FR_RXFF
                               EQU              0x00000040  ; UART Receive FIFO
                                                             Full
   44 00000000 00000020 
                       UART_FR_TXFF
                               EQU              0x00000020  ; UART Transmit FIF
                                                            O Full
   45 00000000 00000010 
                       UART_FR_RXFE
                               EQU              0x00000010  ; UART Receive FIFO
                                                             Empty
   46 00000000 4000C024 
                       UART0_IBRD_R
                               EQU              0x4000C024
   47 00000000 4000C028 
                       UART0_FBRD_R
                               EQU              0x4000C028
   48 00000000         
   49 00000000 4000C02C 
                       UART0_LCRH_R
                               EQU              0x4000C02C
   50 00000000 00000080 
                       UART_LCRH_SPS
                               EQU              0x00000080  ; UART Stick Parity
                                                            
   51 00000000 00000060 
                       UART_LCRH_WLEN_8
                               EQU              0x00000060  ; 8 bit word length
                                                            
   52 00000000 00000010 
                       UART_LCRH_FEN
                               EQU              0x00000010  ; UART Enable FIFOs
                                                            
   53 00000000 00000004 
                       UART_LCRH_EPS
                               EQU              0x00000004  ; UART Even parity 
                                                            Select
   54 00000000 00000002 



ARM Macro Assembler    Page 3 


                       UART_LCRH_PEN
                               EQU              0x00000002  ; UART Parity Enabl
                                                            e
   55 00000000 00000001 
                       UART_LCRH_BRK
                               EQU              0x00000001  ; UART Send Break
   56 00000000         
   57 00000000 4000C030 
                       UART0_CTL_R
                               EQU              0x4000C030
   58 00000000 00000020 
                       UART_CTL_HSE
                               EQU              0x00000020  ; High-Speed Enable
                                                            
   59 00000000 00000001 
                       UART_CTL_UARTEN
                               EQU              0x00000001  ; UART Enable
   60 00000000         
   61 00000000 4000C034 
                       UART0_IFLS_R
                               EQU              0x4000C034
   62 00000000 00000000 
                       UART_IFLS_RX1_8
                               EQU              0x00000000  ; RX FIFO >= 1/8 fu
                                                            ll
   63 00000000 00000000 
                       UART_IFLS_TX1_8
                               EQU              0x00000000  ; TX FIFO <= 1/8 fu
                                                            ll
   64 00000000         
   65 00000000 4000C038 
                       UART0_IM_R
                               EQU              0x4000C038
   66 00000000 00000100 
                       UART_IM_PEIM
                               EQU              0x00000100  ; UART Parity Error
                                                             Interrupt Mask
   67 00000000 00000040 
                       UART_IM_RTIM
                               EQU              0x00000040  ; UART Receive Time
                                                            -Out Interrupt Mask
                                                            
   68 00000000 00000020 
                       UART_IM_TXIM
                               EQU              0x00000020  ; UART Transmit Int
                                                            errupt Mask
   69 00000000 00000010 
                       UART_IM_RXIM
                               EQU              0x00000010  ; UART Receive Inte
                                                            rrupt Mask
   70 00000000         
   71 00000000 4000C03C 
                       UART0_RIS_R
                               EQU              0x4000C03C
   72 00000000 00000100 
                       UART_RIS_PERIS
                               EQU              0x00000100  ; UART Parity Error
                                                             Interrupt Status
   73 00000000 00000040 



ARM Macro Assembler    Page 4 


                       UART_RIS_RTRIS
                               EQU              0x00000040  ; UART Receive Time
                                                            -Out Raw Interrupt 
                                                            Status
   74 00000000 00000020 
                       UART_RIS_TXRIS
                               EQU              0x00000020  ; UART Transmit Raw
                                                             Interrupt Status
   75 00000000 00000010 
                       UART_RIS_RXRIS
                               EQU              0x00000010  ; UART Receive Raw 
                                                            Interrupt Status
   76 00000000         
   77 00000000 4000C044 
                       UART0_ICR_R
                               EQU              0x4000C044
   78 00000000 00000100 
                       UART_ICR_PEIC
                               EQU              0x00000100  ; UART Parity Error
                                                             Interrupt Clear
   79 00000000 00000040 
                       UART_ICR_RTIC
                               EQU              0x00000040  ; Receive Time-Out 
                                                            Interrupt Clear
   80 00000000 00000020 
                       UART_ICR_TXIC
                               EQU              0x00000020  ; Transmit Interrup
                                                            t Clear
   81 00000000 00000010 
                       UART_ICR_RXIC
                               EQU              0x00000010  ; Receive Interrupt
                                                             Clear
   82 00000000         
   83 00000000 4000CFC8 
                       UART0_CC_R
                               EQU              0x4000CFC8
   84 00000000 0000000F 
                       UART_CC_CS_M
                               EQU              0x0000000F  ; UART Baud Clock S
                                                            ource
   85 00000000 00000000 
                       UART_CC_CS_SYSCLK
                               EQU              0x00000000  ; System clock (bas
                                                            ed on clock source 
                                                            and divisor factor)
                                                            
   86 00000000 00000005 
                       UART_CC_CS_PIOSC
                               EQU              0x00000005  ; PIOSC
   87 00000000         
   88 00000000 400FE138 
                       SYSCTL_ALTCLKCFG_R
                               EQU              0x400FE138
   89 00000000 0000000F 
                       SYSCTL_ALTCLKCFG_ALTCLK_M
                               EQU              0x0000000F  ; Alternate Clock S
                                                            ource
   90 00000000 00000000 
                       SYSCTL_ALTCLKCFG_ALTCLK_PIOSC



ARM Macro Assembler    Page 5 


                               EQU              0x00000000  ; PIOSC
   91 00000000         
   92 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   93 00000000 00000001 
                       SYSCTL_RCGCGPIO_R0
                               EQU              0x00000001  ; GPIO Port A Run M
                                                            ode Clock
   94 00000000         ; Gating Control
   95 00000000 400FE618 
                       SYSCTL_RCGCUART_R
                               EQU              0x400FE618
   96 00000000 00000001 
                       SYSCTL_RCGCUART_R0
                               EQU              0x00000001  ; UART Module 0 Run
                                                             Mode Clock
   97 00000000         ; Gating Control
   98 00000000 400FEA08 
                       SYSCTL_PRGPIO_R
                               EQU              0x400FEA08
   99 00000000 00000001 
                       SYSCTL_PRGPIO_R0
                               EQU              0x00000001  ; GPIO Port A Perip
                                                            heral Ready
  100 00000000 400FEA18 
                       SYSCTL_PRUART_R
                               EQU              0x400FEA18
  101 00000000 00000001 
                       SYSCTL_PRUART_R0
                               EQU              0x00000001  ; UART Module 0 Per
                                                            ipheral Ready
  102 00000000         
  103 00000000                 IMPORT           DisableInterrupts ; Disable int
                                                            errupts
  104 00000000                 IMPORT           EnableInterrupts 
                                                            ; Enable interrupts
                                                            
  105 00000000                 IMPORT           StartCritical ; previous I bit,
                                                             disable interrupts
                                                            
  106 00000000                 IMPORT           EndCritical ; restore I bit to 
                                                            previous value
  107 00000000                 IMPORT           WaitForInterrupt 
                                                            ; low power mode
  108 00000000         
  109 00000000         ; properties from FIFO.c
  110 00000000         ; size of the FIFOs (must be power of 2)
  111 00000000 00000010 
                       FIFOSIZE
                               EQU              16          ; (copy this value 
                                                            from both places in
                                                             FIFO.s)
  112 00000000 00000001 
                       FIFOSUCCESS
                               EQU              1           ; return value on s
                                                            uccess
  113 00000000 00000000 
                       FIFOFAIL



ARM Macro Assembler    Page 6 


                               EQU              0           ; return value on f
                                                            ailure
  114 00000000         
  115 00000000         ; functions from FIFO.s
  116 00000000                 IMPORT           TxFifo_Init
  117 00000000                 IMPORT           TxFifo_Put
  118 00000000                 IMPORT           TxFifo_Get
  119 00000000                 IMPORT           TxFifo_Size
  120 00000000                 IMPORT           RxFifo_Init
  121 00000000                 IMPORT           RxFifo_Put
  122 00000000                 IMPORT           RxFifo_Get
  123 00000000                 IMPORT           RxFifo_Size
  124 00000000         
  125 00000000         ;functions from GPTimer.s
  126 00000000                 IMPORT           Timer_ResponseTime
  127 00000000                 IMPORT           Timer_ResponseTime_stop
  128 00000000                 IMPORT           Timer_BreakTime
  129 00000000                 IMPORT           Timer_SetupTime
  130 00000000                 IMPORT           Timer_PollingTime
  131 00000000                 IMPORT           Timer_NoResponseTime
  132 00000000                 IMPORT           Timer_NoResponseTime_stop
  133 00000000         
  134 00000000         ; standard ASCII symbols
  135 00000000 0000000D 
                       CR      EQU              0x0D
  136 00000000 0000000A 
                       LF      EQU              0x0A
  137 00000000 00000008 
                       BS      EQU              0x08
  138 00000000 0000001B 
                       ESC     EQU              0x1B
  139 00000000 00000020 
                       SPA     EQU              0x20
  140 00000000 0000007F 
                       DEL     EQU              0x7F
  141 00000000         
  142 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
  143 00000000                 THUMB
  144 00000000                 EXPORT           UART_Init
  145 00000000                 EXPORT           UART_InChar
  146 00000000                 EXPORT           UART_OutChar
  147 00000000                 EXPORT           UART0_Handler
  148 00000000                 EXPORT           UART_OutString
  149 00000000                 EXPORT           UART_InUDec
  150 00000000                 EXPORT           UART_OutUDec
  151 00000000                 EXPORT           UART_InUHex
  152 00000000                 EXPORT           UART_OutUHex
  153 00000000                 EXPORT           UART_InString
  154 00000000                 EXPORT           UART_HighStickParity
  155 00000000                 EXPORT           UART_LowStickParity
  156 00000000                 EXPORT           UART_SendBreak
  157 00000000                 EXPORT           UART_SendBreak_Disable
  158 00000000         ; require C function calls to preserve the 8-byte alignm
                       ent of 8-byte data objects
  159 00000000                 PRESERVE8
  160 00000000         
  161 00000000         ;------------UART_Init------------
  162 00000000         ; Initialize UART0 for 9,600 baud rate (clock from 16 MH



ARM Macro Assembler    Page 7 


                       z PIOSC),
  163 00000000         ; 8 bit word length, stick parity, one stop bit, FIFOs e
                       nabled, interrupt
  164 00000000         ; after >= 2 characters received or <= 2 characters to t
                       ransmit or timeout
  165 00000000         ; Rx with pull-up
  166 00000000         ; Input: none
  167 00000000         ; Output: none
  168 00000000         ; Modifies: R0, R1
  169 00000000         UART_Init
  170 00000000 B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  171 00000002 F7FF FFFE       BL               DisableInterrupts ; disable all
                                                             interrupts (critic
                                                            al section)
  172 00000006         ; activate clock for UART0
  173 00000006 49F7            LDR              R1, =SYSCTL_RCGCUART_R ; R1 = &
                                                            SYSCTL_RCGCUART_R
  174 00000008 6808            LDR              R0, [R1]    ; R0 = [R1]
  175 0000000A F040 0001       ORR              R0, R0, #SYSCTL_RCGCUART_R0 ; R
                                                            0 = R0|SYSCTL_RCGCU
                                                            ART_R0
  176 0000000E 6008            STR              R0, [R1]    ; [R1] = R0
  177 00000010         ; activate clock for port A
  178 00000010 49F5            LDR              R1, =SYSCTL_RCGCGPIO_R ; R1 = &
                                                            SYSCTL_RCGCGPIO_R
  179 00000012 6808            LDR              R0, [R1]    ; R0 = [R1]
  180 00000014 F040 0001       ORR              R0, R0, #SYSCTL_RCGCGPIO_R0 ; R
                                                            0 = R0|SYSCTL_RCGCG
                                                            PIO_R0
  181 00000018 6008            STR              R0, [R1]    ; [R1] = R0
  182 0000001A         ; initialize empty FIFOs
  183 0000001A F7FF FFFE       BL               RxFifo_Init
  184 0000001E F7FF FFFE       BL               TxFifo_Init
  185 00000022         ; allow time for clock to stabilize
  186 00000022 49F2            LDR              R1, =SYSCTL_PRUART_R ; R1 = &SY
                                                            SCTL_PRUART_R
  187 00000024         UART0initloop
  188 00000024 6808            LDR              R0, [R1]    ; R0 = [R1] (value)
                                                            
  189 00000026 F010 0001       ANDS             R0, R0, #SYSCTL_PRUART_R0 ; R0 
                                                            = R0&SYSCTL_PRUART_
                                                            R0
  190 0000002A D0FB            BEQ              UART0initloop ; if(R0 == 0), ke
                                                            ep polling
  191 0000002C         ; disable UART
  192 0000002C 49F0            LDR              R1, =UART0_CTL_R 
                                                            ; R1 = &UART0_CTL_R
                                                            
  193 0000002E 6808            LDR              R0, [R1]    ; R0 = [R1]
  194 00000030 F020 0001       BIC              R0, R0, #UART_CTL_UARTEN ; R0 =
                                                             R0&~UART_CTL_UARTE
                                                            N (disable UART)
  195 00000034 6008            STR              R0, [R1]    ; [R1] = R0
  196 00000036         ; set the baud rate (equations on p845 of datasheet)
  197 00000036 49EF            LDR              R1, =UART0_IBRD_R ; R1 = &UART0
                                                            _IBRD_R
  198 00000038 F04F 0068       MOV              R0, #104    ; R0 = IBRD = int(1
                                                            6,000,000 / (16 * 9



ARM Macro Assembler    Page 8 


                                                            ,600)) = int(104.16
                                                            6)
  199 0000003C 6008            STR              R0, [R1]    ; [R1] = R0
  200 0000003E 49EE            LDR              R1, =UART0_FBRD_R ; R1 = &UART0
                                                            _FBRD_R
  201 00000040 F04F 000B       MOV              R0, #11     ; R0 = FBRD = round
                                                            (0.166 * 64 + 0.5) 
                                                            = 11
  202 00000044 6008            STR              R0, [R1]    ; [R1] = R0
  203 00000046         ; configure Line Control Register settings
  204 00000046 49ED            LDR              R1, =UART0_LCRH_R ; R1 = &UART0
                                                            _LCRH_R
  205 00000048 6808            LDR              R0, [R1]    ; R0 = [R1]
  206 0000004A F020 00FF       BIC              R0, R0, #0xFF ; R0 = R0&~0xFF (
                                                            clear all fields)
  207 0000004E         ; 8 bit word length, LOW stick parity, one stop bit, FIF
                       Os
  208 0000004E F100 00F6       ADD              R0, R0, #(UART_LCRH_WLEN_8+UART
_LCRH_FEN+UART_LCRH_PEN+UART_LCRH_EPS+UART_LCRH_SPS)
  209 00000052         ; importante:
  210 00000052         ; Puede ser que haya que desactivar FIFO
  211 00000052         ;
  212 00000052         
  213 00000052 6008            STR              R0, [R1]    ; [R1] = R0
  214 00000054         ; configure Interrupt FIFO Level Select Register setting
                       s
  215 00000054 49EA            LDR              R1, =UART0_IFLS_R ; R1 = &UART0
                                                            _IFLS_R
  216 00000056 6808            LDR              R0, [R1]    ; R0 = [R1]
  217 00000058 F020 003F       BIC              R0, R0, #0x3F ; R0 = R0&~0x3F (
                                                            clear TX and RX int
                                                            errupt FIFO level f
                                                            ields)
  218 0000005C         ; configure interrupt for TX FIFO <= 1/8 full
  219 0000005C         ; configure interrupt for RX FIFO >= 1/8 full
  220 0000005C F100 0000       ADD              R0, R0, #(UART_IFLS_TX1_8+UART_
IFLS_RX1_8)
  221 00000060 6008            STR              R0, [R1]    ; [R1] = R0
  222 00000062         ; enable interrupts to be requested upon certain conditi
                       ons
  223 00000062         ; TX FIFO interrupt: when TX FIFO <= 2 elements (<= 1/8 
                       full, configured above)
  224 00000062         ; RX FIFO interrupt; when RX FIFO >= 2 elements (>= 1/8 
                       full, configured above)
  225 00000062         ; RX time-out interrupt: receive FIFO not empty and no m
                       ore data received in next 32-bit timeframe
  226 00000062         ;               (this causes an interrupt after each key
                       stroke, rather than every other keystroke)
  227 00000062 49E8            LDR              R1, =UART0_IM_R 
                                                            ; R1 = &UART0_IM_R
  228 00000064 6808            LDR              R0, [R1]    ; R0 = [R1]
  229 00000066         ; enable TX and RX FIFO interrupts, RX time-out interrup
                       t and Parity interrupt
  230 00000066 F440 70B8       ORR              R0, R0, #(UART_IM_RXIM+UART_IM_
TXIM+UART_IM_RTIM+UART_IM_PEIM)
  231 0000006A 6008            STR              R0, [R1]    ; [R1] = R0
  232 0000006C         ; UART gets its clock from the alternate clock source as
                        defined by SYSCTL_ALTCLKCFG_R
  233 0000006C 49E6            LDR              R1, =UART0_CC_R 



ARM Macro Assembler    Page 9 


                                                            ; R1 = &UART0_CC_R
  234 0000006E 6808            LDR              R0, [R1]    ; R0 = [R1]
  235 00000070 F020 000F       BIC              R0, R0, #UART_CC_CS_M ; R0 = R0
                                                            &~UART_CC_CS_M (cle
                                                            ar clock source fie
                                                            ld)
  236 00000074 F100 0005       ADD              R0, R0, #UART_CC_CS_PIOSC ; R0 
                                                            = R0+UART_CC_CS_PIO
                                                            SC (configure for a
                                                            lternate clock sour
                                                            ce for UART0)
  237 00000078 6008            STR              R0, [R1]    ; [R1] = R0
  238 0000007A         ; the alternate clock source is the PIOSC (default)
  239 0000007A 49E4            LDR              R1, =SYSCTL_ALTCLKCFG_R ; R1 = 
                                                            &SYSCTL_ALTCLKCFG_R
                                                            
  240 0000007C 6808            LDR              R0, [R1]    ; R0 = [R1]
  241 0000007E         ; R0 = R0&~SYSCTL_ALTCLKCFG_ALTCLK_M (clear alternate cl
                       ock source field)
  242 0000007E F020 000F       BIC              R0, R0, #SYSCTL_ALTCLKCFG_ALTCL
K_M
  243 00000082         ; R0 = R0+SYSCTL_ALTCLKCFG_ALTCLK_PIOSC (configure for P
                       IOSC as alternate clock source)
  244 00000082 F100 0000       ADD              R0, R0, #SYSCTL_ALTCLKCFG_ALTCL
K_PIOSC
  245 00000086 6008            STR              R0, [R1]    ; [R1] = R0
  246 00000088         ; enable UART
  247 00000088 49D9            LDR              R1, =UART0_CTL_R 
                                                            ; R1 = &UART0_CTL_R
                                                            
  248 0000008A 6808            LDR              R0, [R1]    ; R0 = [R1]
  249 0000008C F020 0020       BIC              R0, R0, #UART_CTL_HSE ; R0 = R0
                                                            &~UART_CTL_HSE (hig
                                                            h-speed disable; di
                                                            vide clock by 16 ra
                                                            ther than 8 (defaul
                                                            t))
  250 00000090 F040 0001       ORR              R0, R0, #UART_CTL_UARTEN ; R0 =
                                                             R0|UART_CTL_UARTEN
                                                             (enable UART)
  251 00000094 6008            STR              R0, [R1]    ; [R1] = R0
  252 00000096         ; allow time for clock to stabilize
  253 00000096 49DE            LDR              R1, =SYSCTL_PRGPIO_R ; R1 = &SY
                                                            SCTL_PRGPIO_R
  254 00000098         GPIOAinitloop
  255 00000098 6808            LDR              R0, [R1]    ; R0 = [R1] (value)
                                                            
  256 0000009A F010 0001       ANDS             R0, R0, #SYSCTL_PRGPIO_R0 ; R0 
                                                            = R0&SYSCTL_PRGPIO_
                                                            R0
  257 0000009E D0FB            BEQ              GPIOAinitloop ; if(R0 == 0), ke
                                                            ep polling
  258 000000A0         ; enable alternate function
  259 000000A0 49DC            LDR              R1, =GPIO_PORTA_AFSEL_R ; R1 = 
                                                            &GPIO_PORTA_AFSEL_R
                                                            
  260 000000A2 6808            LDR              R0, [R1]    ; R0 = [R1]
  261 000000A4 F040 0003       ORR              R0, R0, #0x03 ; R0 = R0|0x03 (e
                                                            nable alt funct on 



ARM Macro Assembler    Page 10 


                                                            PA1-0)
  262 000000A8 6008            STR              R0, [R1]    ; [R1] = R0
  263 000000AA         ; activa resistencia pull-up in RX (PA0)
  264 000000AA 49DB            LDR              R1, =GPIO_PORTA_PUR_R ; R1 = &G
                                                            PIO_PORTA_PUR_R
  265 000000AC F040 0001       ORR              R0, #0x01   ; set bit 0 (enable
                                                             pull-up res in PA0
                                                            )
  266 000000B0 6008            STR              R0, [R1]
  267 000000B2         ; enable digital port
  268 000000B2 49DA            LDR              R1, =GPIO_PORTA_DEN_R ; R1 = &G
                                                            PIO_PORTA_DEN_R
  269 000000B4 6808            LDR              R0, [R1]    ; R0 = [R1]
  270 000000B6 F040 0003       ORR              R0, R0, #0x03 ; R0 = R0|0x03 (e
                                                            nable digital I/O o
                                                            n PA1-0)
  271 000000BA 6008            STR              R0, [R1]    ; [R1] = R0
  272 000000BC         ; configure as UART
  273 000000BC 49D8            LDR              R1, =GPIO_PORTA_PCTL_R ; R1 = &
                                                            GPIO_PORTA_PCTL_R
  274 000000BE 6808            LDR              R0, [R1]    ; R0 = [R1]
  275 000000C0 F020 00FF       BIC              R0, R0, #0x000000FF ; R0 = R0&~
                                                            0x000000FF (clear p
                                                            ort control field f
                                                            or PA1-0)
  276 000000C4 F100 0011       ADD              R0, R0, #0x00000011 ; R0 = R0+0
                                                            x00000011 (configur
                                                            e PA1-0 as UART)
  277 000000C8 6008            STR              R0, [R1]    ; [R1] = R0
  278 000000CA         ; disable analog functionality
  279 000000CA 49D6            LDR              R1, =GPIO_PORTA_AMSEL_R ; R1 = 
                                                            &GPIO_PORTA_AMSEL_R
                                                            
  280 000000CC F04F 0000       MOV              R0, #0      ; R0 = 0 (disable a
                                                            nalog functionality
                                                             on PA)
  281 000000D0 6008            STR              R0, [R1]    ; [R1] = R0
  282 000000D2         ; set the priority of the UART interrupt
  283 000000D2 49D5            LDR              R1, =NVIC_PRI1_R 
                                                            ; R1 = &NVIC_PRI1_R
                                                            
  284 000000D4 6808            LDR              R0, [R1]    ; R0 = [R1]
  285 000000D6 F420 407F       BIC              R0, R0, #0x0000FF00 ; R0 = R0&~
                                                            0xFFFF00FF (clear N
                                                            VIC priority field 
                                                            for UART0 interrupt
                                                            )
  286 000000DA F500 4080       ADD              R0, R0, #0x00004000 ; R0 = R0+0
                                                            x00004000 (UART0 = 
                                                            priority 2; stored 
                                                            in bits 13-15)
  287 000000DE 6008            STR              R0, [R1]    ; [R1] = R0
  288 000000E0         ; enable interrupt 5 in NVIC
  289 000000E0 49D2            LDR              R1, =NVIC_EN0_R 
                                                            ; R1 = &NVIC_EN0_R
  290 000000E2 F04F 0020       LDR              R0, =NVIC_EN0_INT5 ; R0 = NVIC_
                                                            EN0_INT5 (zeros wri
                                                            tten to enable regi
                                                            ster have no effect



ARM Macro Assembler    Page 11 


                                                            )
  291 000000E6 6008            STR              R0, [R1]    ; [R1] = R0
  292 000000E8 F7FF FFFE       BL               EnableInterrupts ; enable all i
                                                            nterrupts (end of c
                                                            ritical section)
  293 000000EC BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return)
  294 000000EE         
  295 000000EE         ; private helper subroutine
  296 000000EE         ; copy from hardware RX FIFO to software RX FIFO
  297 000000EE         ; stop when hardware RX FIFO is empty or software RX FIF
                       O is full
  298 000000EE         ; Modifies: R0, R1
  299 000000EE         copyHardwareToSoftware
  300 000000EE B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  301 000000F0         h2sloop
  302 000000F0         ; repeat the loop while (hardware receive FIFO not empty
                       ) and (software receive FIFO not full)
  303 000000F0 49CF            LDR              R1, =UART0_FR_R 
                                                            ; R1 = &UART0_FR_R
  304 000000F2 6808            LDR              R0, [R1]    ; R0 = [R1]
  305 000000F4 F000 0010       AND              R0, R0, #UART_FR_RXFE ; R0 = R0
                                                            &UART_FR_RXFE
  306 000000F8 2810            CMP              R0, #UART_FR_RXFE ; is R0 (UART
                                                            0_FR_R&UART_FR_RXFE
                                                            ) == UART_FR_RXFE? 
                                                            (is hardware receiv
                                                            e FIFO empty?)
  307 000000FA D008            BEQ              h2sdone     ; if so, skip to 'h
                                                            2sdone'
  308 000000FC F7FF FFFE       BL               RxFifo_Size
  309 00000100 280F            CMP              R0, #(FIFOSIZE - 1) ; is R0 (Rx
                                                            Fifo_Size()) == (FI
                                                            FOSIZE - 1)? (is so
                                                            ftware receive FIFO
                                                             full?)
  310 00000102 D004            BEQ              h2sdone     ; if so, skip to 'h
                                                            2sdone'
  311 00000104         ; read a character from the hardware FIFO
  312 00000104 49CB            LDR              R1, =UART0_DR_R 
                                                            ; R1 = &UART0_DR_R
  313 00000106 6808            LDR              R0, [R1]    ; R0 = [R1]
  314 00000108         ; store R0 (UART0_DR_R) in software receive FIFO
  315 00000108 F7FF FFFE       BL               RxFifo_Put
  316 0000010C E7F0            B                h2sloop     ; unconditional bra
                                                            nch to 'h2sloop'
  317 0000010E         h2sdone
  318 0000010E BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return)
  319 00000110         
  320 00000110         ; private helper subroutine
  321 00000110         ; copy from software TX FIFO to hardware TX FIFO
  322 00000110         ; stop when software TX FIFO is empty or hardware TX FIF
                       O is full
  323 00000110         ; Modifies: R0, R1
  324 00000110         copySoftwareToHardware



ARM Macro Assembler    Page 12 


  325 00000110 B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  326 00000112         s2hloop
  327 00000112         ; repeat the loop while (hardware transmit FIFO not full
                       ) and (software transmit FIFO not empty)
  328 00000112 49C7            LDR              R1, =UART0_FR_R 
                                                            ; R1 = &UART0_FR_R
  329 00000114 6808            LDR              R0, [R1]    ; R0 = [R1]
  330 00000116 F000 0020       AND              R0, R0, #UART_FR_TXFF ; R0 = R0
                                                            &UART_FR_TXFF
  331 0000011A 2820            CMP              R0, #UART_FR_TXFF ; is R0 (UART
                                                            0_FR_R&UART_FR_TXFF
                                                            ) == UART_FR_TXFF? 
                                                            (is hardware transm
                                                            it FIFO full?)
  332 0000011C D00B            BEQ              s2hdone     ; if so, skip to 's
                                                            2hdone'
  333 0000011E F7FF FFFE       BL               TxFifo_Size
  334 00000122 2800            CMP              R0, #0      ; is R0 (TxFifo_Siz
                                                            e()) == 0? (is soft
                                                            ware transmit FIFO 
                                                            empty?)
  335 00000124 D007            BEQ              s2hdone     ; if so, skip to 's
                                                            2hdone'
  336 00000126         ; read a character from the software FIFO
  337 00000126 B401            PUSH             {R0}        ; allocate local va
                                                            riable
  338 00000128 4668            MOV              R0, SP      ; R0 = SP (R0 point
                                                            s to local variable
                                                            )
  339 0000012A F7FF FFFE       BL               TxFifo_Get  ; get from software
                                                             transmit FIFO into
                                                             pointer R0
  340 0000012E BC01            POP              {R0}        ; pop data into R0
  341 00000130         ; store R0 (data from TxFifo_Get()) in hardware transmit
                        FIFO
  342 00000130 49C0            LDR              R1, =UART0_DR_R 
                                                            ; R1 = &UART0_DR_R
  343 00000132 6008            STR              R0, [R1]    ; [R1] = R0
  344 00000134 E7ED            B                s2hloop     ; unconditional bra
                                                            nch to 'h2sloop'
  345 00000136         s2hdone
  346 00000136 BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return)
  347 00000138         
  348 00000138         ;------------UART_InChar------------
  349 00000138         ; input ASCII character from UART
  350 00000138         ; spin if RxFifo is empty
  351 00000138         ; Input: none
  352 00000138         ; Output: R0  character in from UART
  353 00000138         ; Very Important: The UART0 interrupt handler automatica
                       lly
  354 00000138         ;  empties the hardware receive FIFO into the software F
                       IFO as
  355 00000138         ;  the hardware gets data.  If the UART0 interrupt is
  356 00000138         ;  disabled, the software receive FIFO may become empty,
                        and
  357 00000138         ;  this function will stall forever.



ARM Macro Assembler    Page 13 


  358 00000138         ;  Ensure that the UART0 module is initialized and its
  359 00000138         ;  interrupt is enabled before calling this function.  D
                       o not
  360 00000138         ;  use UART I/O functions within a critical section of y
                       our
  361 00000138         ;  main program.
  362 00000138         UART_InChar
  363 00000138 F04F 0000       MOV              R0, #0      ; initialize local 
                                                            variable
  364 0000013C B501            PUSH             {R0, LR}    ; save current valu
                                                            e of LR and allocat
                                                            e local variable
  365 0000013E         inCharLoop
  366 0000013E 4668            MOV              R0, SP      ; R0 = SP (R0 point
                                                            s to local variable
                                                            )
  367 00000140 F7FF FFFE       BL               RxFifo_Get  ; get from software
                                                             receive FIFO into 
                                                            pointer R0
  368 00000144 2800            CMP              R0, #FIFOFAIL ; is R0 (RxFifo_G
                                                            et()) == FIFOFAIL (
                                                            value returned when
                                                             FIFO empty)?
  369 00000146 D0FA            BEQ              inCharLoop  ; if so, skip to 'i
                                                            nCharLoop' (spin un
                                                            til receive a chara
                                                            cter)
  370 00000148 BD01            POP              {R0, PC}    ; pop data into R0 
                                                            and restore LR into
                                                             PC (return)
  371 0000014A         
  372 0000014A         ;------------UART_OutChar------------
  373 0000014A         ; output ASCII character to UART
  374 0000014A         ; spin if TxFifo is full
  375 0000014A         ; Input: R0  character out to UART
  376 0000014A         ; Output: none
  377 0000014A         ; Modifies: R0, R1
  378 0000014A         ; Very Important: The UART0 interrupt handler automatica
                       lly
  379 0000014A         ;  empties the software transmit FIFO into the hardware 
                       FIFO as
  380 0000014A         ;  the hardware sends data.  If the UART0 interrupt is
  381 0000014A         ;  disabled, the software transmit FIFO may become full,
                        and
  382 0000014A         ;  this function will stall forever.
  383 0000014A         ;  Ensure that the UART0 module is initialized and its
  384 0000014A         ;  interrupt is enabled before calling this function.  D
                       o not
  385 0000014A         ;  use UART I/O functions within a critical section of y
                       our
  386 0000014A         ;  main program.
  387 0000014A         UART_OutChar
  388 0000014A B510            PUSH             {R4, LR}    ; save current valu
                                                            e of R4 and LR
  389 0000014C 4604            MOV              R4, R0      ; R4 = R0 (save the
                                                             output character)
  390 0000014E         outCharLoop
  391 0000014E 4620            MOV              R0, R4      ; R0 = R4 (recall t
                                                            he output character



ARM Macro Assembler    Page 14 


                                                            )
  392 00000150 F7FF FFFE       BL               TxFifo_Put  ; store R0 (output 
                                                            character) in softw
                                                            are transmit FIFO
  393 00000154 2800            CMP              R0, #FIFOFAIL ; is R0 (TxFifo_P
                                                            ut()) == FIFOFAIL (
                                                            value returned when
                                                             FIFO full)?
  394 00000156 D0FA            BEQ              outCharLoop ; if so, skip to 'o
                                                            utCharLoop' (spin u
                                                            ntil space in softw
                                                            are transmit FIFO)
  395 00000158 4CAA            LDR              R4, =UART0_IM_R 
                                                            ; R4 = &UART0_IM_R
  396 0000015A 6820            LDR              R0, [R4]    ; R0 = [R4]
  397 0000015C F020 0020       BIC              R0, R0, #UART_IM_TXIM ; R0 = R0
                                                            &~UART_IM_TXIM (dis
                                                            able TX FIFO interr
                                                            upt)
  398 00000160 6020            STR              R0, [R4]    ; [R4] = R0
  399 00000162 F7FF FFD5       BL               copySoftwareToHardware ; privat
                                                            e helper subroutine
                                                            
  400 00000166 6820            LDR              R0, [R4]    ; R0 = [R4]
  401 00000168 F040 0020       ORR              R0, R0, #UART_IM_TXIM ; R0 = R0
                                                            |UART_IM_TXIM (enab
                                                            le TX FIFO interrup
                                                            t)
  402 0000016C 6020            STR              R0, [R4]    ; [R4] = R0
  403 0000016E BD10            POP              {R4, PC}    ; restore previous 
                                                            value of R4 into R4
                                                             and LR into PC (re
                                                            turn)
  404 00000170         
  405 00000170         ;------------UART0_Handler------------
  406 00000170         ; at least one of three things has happened:
  407 00000170         ; hardware TX FIFO goes from 3 to 2 or less items
  408 00000170         ; hardware RX FIFO goes from 1 to 2 or more items
  409 00000170         ; UART receiver has timed out
  410 00000170         ; received byte with stick parity bit in HIGH
  411 00000170         UART0_Handler
  412 00000170 B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  413 00000172         ; check the flags to determine which interrupt condition
                        occurred
  414 00000172         handlerCheck0
  415 00000172 49B1            LDR              R1, =UART0_RIS_R 
                                                            ; R1 = &UART0_RIS_R
                                                            
  416 00000174 6808            LDR              R0, [R1]    ; R0 = [R1]
  417 00000176 F000 0020       AND              R0, R0, #UART_RIS_TXRIS ; R0 = 
                                                            R0&UART_RIS_TXRIS
  418 0000017A 2820            CMP              R0, #UART_RIS_TXRIS ; is R0 (UA
                                                            RT0_RIS_R&UART_RIS_
                                                            TXRIS) == UART_RIS_
                                                            TXRIS? (does hardwa
                                                            re TX FIFO have <= 
                                                            2 items?)
  419 0000017C D10E            BNE              handlerCheck1 ; if not, skip to



ARM Macro Assembler    Page 15 


                                                             'handlerCheck1' an
                                                            d check the next fl
                                                            ag
  420 0000017E         ; acknowledge TX FIFO interrupt
  421 0000017E 49AF            LDR              R1, =UART0_ICR_R 
                                                            ; R1 = &UART0_ICR_R
                                                            
  422 00000180 F04F 0020       LDR              R0, =UART_ICR_TXIC ; R0 = UART_
                                                            ICR_TXIC (zeros wri
                                                            tten to interrupt c
                                                            lear register have 
                                                            no effect)
  423 00000184 6008            STR              R0, [R1]    ; [R1] = R0
  424 00000186         ; copy from software TX FIFO to hardware TX FIFO
  425 00000186 F7FF FFC3       BL               copySoftwareToHardware ; privat
                                                            e helper subroutine
                                                            
  426 0000018A         ; if the software transmit FIFO is now empty, disable TX
                        FIFO interrupt
  427 0000018A         ; UART_OutChar() will re-enable the TX FIFO interrupt wh
                       en it is needed
  428 0000018A F7FF FFFE       BL               TxFifo_Size
  429 0000018E 2800            CMP              R0, #0      ; is R0 (TxFifo_Siz
                                                            e()) == 0? (is soft
                                                            ware transmit FIFO 
                                                            empty?)
  430 00000190 D104            BNE              handlerCheck1 ; if not, skip to
                                                             'handlerCheck1'
  431 00000192 499C            LDR              R1, =UART0_IM_R 
                                                            ; R1 = &UART0_IM_R
  432 00000194 6808            LDR              R0, [R1]    ; R0 = [R1]
  433 00000196 F020 0020       BIC              R0, R0, #UART_IM_TXIM ; R0 = R0
                                                            &~UART_IM_TXIM (dis
                                                            able TX FIFO interr
                                                            upt)
  434 0000019A 6008            STR              R0, [R1]    ; [R1] = R0
  435 0000019C         handlerCheck1
  436 0000019C 49A6            LDR              R1, =UART0_RIS_R 
                                                            ; R1 = &UART0_RIS_R
                                                            
  437 0000019E 6808            LDR              R0, [R1]    ; R0 = [R1]
  438 000001A0 F000 0010       AND              R0, R0, #UART_RIS_RXRIS ; R0 = 
                                                            R0&UART_RIS_RXRIS
  439 000001A4 2810            CMP              R0, #UART_RIS_RXRIS ; is R0 (UA
                                                            RT0_RIS_R&UART_RIS_
                                                            RXRIS) == UART_RIS_
                                                            RXRIS? (does hardwa
                                                            re RX FIFO have >= 
                                                            2 items?)
  440 000001A6 D105            BNE              handlerCheck2 ; if not, skip to
                                                             'handlerCheck2' an
                                                            d check the next fl
                                                            ag
  441 000001A8         ; acknowledge RX FIFO interrupt
  442 000001A8 49A4            LDR              R1, =UART0_ICR_R 
                                                            ; R1 = &UART0_ICR_R
                                                            
  443 000001AA F04F 0010       LDR              R0, =UART_ICR_RXIC ; R0 = UART_
                                                            ICR_RXIC (zeros wri



ARM Macro Assembler    Page 16 


                                                            tten to interrupt c
                                                            lear register have 
                                                            no effect)
  444 000001AE 6008            STR              R0, [R1]    ; [R1] = R0
  445 000001B0         ; copy from hardware RX FIFO to software RX FIFO
  446 000001B0 F7FF FF9D       BL               copyHardwareToSoftware ; privat
                                                            e helper subroutine
                                                            
  447 000001B4         handlerCheck2
  448 000001B4 49A0            LDR              R1, =UART0_RIS_R 
                                                            ; R1 = &UART0_RIS_R
                                                            
  449 000001B6 6808            LDR              R0, [R1]    ; R0 = [R1]
  450 000001B8 F000 0040       AND              R0, R0, #UART_RIS_RTRIS ; R0 = 
                                                            R0&UART_RIS_RTRIS
  451 000001BC 2840            CMP              R0, #UART_RIS_RTRIS ; is R0 (UA
                                                            RT0_RIS_R&UART_RIS_
                                                            RTRIS) == UART_RIS_
                                                            RTRIS? (did the rec
                                                            eiver timeout?)
  452 000001BE D105            BNE              handlerCheck3 ; if not, skip to
                                                             'handlerDone'
  453 000001C0         ; acknowledge receiver timeout interrupt
  454 000001C0 499E            LDR              R1, =UART0_ICR_R 
                                                            ; R1 = &UART0_ICR_R
                                                            
  455 000001C2 F04F 0040       LDR              R0, =UART_ICR_RTIC ; R0 = UART_
                                                            ICR_RTIC (zeros wri
                                                            tten to interrupt c
                                                            lear register have 
                                                            no effect)
  456 000001C6 6008            STR              R0, [R1]    ; [R1] = R0
  457 000001C8         ; copy from hardware RX FIFO to software RX FIFO
  458 000001C8 F7FF FF91       BL               copyHardwareToSoftware ; privat
                                                            e helper subroutine
                                                            
  459 000001CC         handlerCheck3
  460 000001CC 499A            LDR              R1, =UART0_RIS_R 
                                                            ; R1 = &UART0_RIS_R
                                                            
  461 000001CE 6808            LDR              R0, [R1]    ; R0 = [R1]
  462 000001D0 F400 7080       AND              R0, R0, #UART_RIS_PERIS ; R0 = 
                                                            R0&UART_RIS_PERIS
  463 000001D4 F5B0 7F80       CMP              R0, #UART_RIS_PERIS ; is R0 (UA
                                                            RT0_RIS_R&UART_RIS_
                                                            PERIS) == UART_RIS_
                                                            PERIS? (did the par
                                                            ity error?)
  464 000001D8 D105            BNE              handlerDone ; if not, skip to '
                                                            handlerDone'
  465 000001DA         ; acknowledge parity error interrupt
  466 000001DA 4998            LDR              R1, =UART0_ICR_R 
                                                            ; R1 = &UART0_ICR_R
                                                            
  467 000001DC F44F 7080       LDR              R0, =UART_ICR_PEIC ; R0 = UART_
                                                            ICR_PEIC (zeros wri
                                                            tten to interrupt c
                                                            lear register have 
                                                            no effect)



ARM Macro Assembler    Page 17 


  468 000001E0 6008            STR              R0, [R1]    ; [R1] = R0
  469 000001E2         ;update personal flag R5
  470 000001E2 F04F 0501       MOV              R5, #1      ; R5 = 1 
  471 000001E6         handlerDone
  472 000001E6 BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return from inter
                                                            rupt)
  473 000001E8         
  474 000001E8         ;------------UART_OutString------------
  475 000001E8         ; Output String (NULL termination)
  476 000001E8         ; Input: R0  pointer to a NULL-terminated string to be t
                       ransferred
  477 000001E8         ; Output: none
  478 000001E8         UART_OutString
  479 000001E8 B510            PUSH             {R4, LR}    ; save current valu
                                                            e of R4 and LR
  480 000001EA 4604            MOV              R4, R0      ; R4 = R0 (save the
                                                             string pointer)
  481 000001EC         outStringLoop
  482 000001EC 7820            LDRB             R0, [R4]    ; R0 = [R4] (R0 get
                                                            s unsigned characte
                                                            r pointed to by R4,
                                                             promoted to 32 bit
                                                            s)
  483 000001EE 2800            CMP              R0, #0      ; is R0 (next chara
                                                            cter in string) == 
                                                            0 (NULL)?
  484 000001F0 D004            BEQ              outStringDone ; if so, skip to 
                                                            'outStringDone'
  485 000001F2 F7FF FFFE       BL               UART_OutChar ; send the charact
                                                            er to the UART
  486 000001F6 F104 0401       ADD              R4, R4, #1  ; R4 = R4 + 1 (incr
                                                            ement string pointe
                                                            r)
  487 000001FA E7F7            B                outStringLoop ; unconditional b
                                                            ranch to 'outString
                                                            Loop'
  488 000001FC         outStringDone
  489 000001FC BD10            POP              {R4, PC}    ; restore previous 
                                                            value of R4 into R4
                                                             and LR into PC (re
                                                            turn)
  490 000001FE         
  491 000001FE         ;------------UART_InUDec------------
  492 000001FE         ; InUDec accepts ASCII input in unsigned decimal format
  493 000001FE         ;     and converts to a 32-bit unsigned number
  494 000001FE         ;     valid range is 0 to 4294967295 (2^32-1)
  495 000001FE         ; Input: none
  496 000001FE         ; Output: R0  32-bit unsigned number
  497 000001FE         ; If you enter a number above 4294967295, it will return
                        an incorrect value
  498 000001FE         ; Backspace will remove last digit typed
  499 000001FE         UART_InUDec
  500 000001FE B530            PUSH             {R4, R5, LR} ; save current val
                                                            ue of R4, R5, and L
                                                            R
  501 00000200 F04F 0400       MOV              R4, #0      ; R4 = 0 (number = 
                                                            0)



ARM Macro Assembler    Page 18 


  502 00000204 F04F 0500       MOV              R5, #0      ; R5 = 0 (length = 
                                                            0)
  503 00000208         inUDecLoop
  504 00000208         ; accepts characters until <enter> is typed
  505 00000208 F7FF FFFE       BL               UART_InChar ; get a character f
                                                            rom the UART
  506 0000020C 280D            CMP              R0, #CR     ; is R0 (most recen
                                                            t character) == 0x0
                                                            D (<enter>)?
  507 0000020E D01C            BEQ              inUDecDone  ; if so, skip to 'i
                                                            nUDecDone'
  508 00000210         ; check if the input is a digit, 0-9
  509 00000210         ; if the character is not 0-9, it is ignored and not ech
                       oed
  510 00000210 2830            CMP              R0, #'0'    ; is R0 (most recen
                                                            t character) < '0'?
                                                            
  511 00000212 D30D            BLO              inUDecNAN   ; if so, skip to 'i
                                                            nUDecNAN'
  512 00000214 2839            CMP              R0, #'9'    ; is R0 (most recen
                                                            t character) > '9'?
                                                            
  513 00000216 D80B            BHI              inUDecNAN   ; if so, skip to 'i
                                                            nUDecNAN'
  514 00000218 F04F 010A       MOV              R1, #10     ; R1 = 10
  515 0000021C FB04 F401       MUL              R4, R4, R1  ; R4 = R4*R1 (numbe
                                                            r = number*10)
  516 00000220 4404            ADD              R4, R4, R0  ; R4 = R4 + R0 (num
                                                            ber = number*10 + c
                                                            haracter)
  517 00000222 F1A4 0430       SUB              R4, R4, #'0' ; R4 = R4 - '0' (n
                                                            umber = number*10 +
                                                             character - '0')
  518 00000226 F105 0501       ADD              R5, R5, #1  ; R5 = R5 + 1 (leng
                                                            th = length + 1)
  519 0000022A F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  520 0000022E E7EB            B                inUDecLoop  ; unconditional bra
                                                            nch to 'inUDecLoop'
                                                            
  521 00000230         inUDecNAN
  522 00000230         ; if the input is a backspace, then the return number is
                       
  523 00000230         ; changed and a backspace is outputted to the screen
  524 00000230 2808            CMP              R0, #BS     ; is R0 (most recen
                                                            t character) == 0x0
                                                            8 (<backspace>)?
  525 00000232 D1E9            BNE              inUDecLoop  ; if not, skip to '
                                                            inUDecLoop'
  526 00000234 2D00            CMP              R5, #0      ; is R5 (length) ==
                                                             0?
  527 00000236 D0E7            BEQ              inUDecLoop  ; if so, skip to 'i
                                                            nUDecLoop'
  528 00000238 F04F 010A       MOV              R1, #10     ; R1 = 10
  529 0000023C FBB4 F4F1       UDIV             R4, R4, R1  ; R4 = R4/R1 (numbe
                                                            r = number/10)
  530 00000240 F1A5 0501       SUB              R5, R5, #1  ; R5 = R5 - 1 (leng
                                                            th = length - 1)
  531 00000244 F7FF FFFE       BL               UART_OutChar ; echo the charact



ARM Macro Assembler    Page 19 


                                                            er to the UART
  532 00000248         ;    MOV R0, #SPA                    ; R0 = SPA (<space>
                       )
  533 00000248         ;    BL  UART_OutChar                ; echo additional <
                       space> to the UART
  534 00000248         ;    MOV R0, #BS                     ; R0 = BS (<backspa
                       ce>)
  535 00000248         ;    BL  UART_OutChar                ; echo additional <
                       backspace> to the UART
  536 00000248 E7DE            B                inUDecLoop  ; unconditional bra
                                                            nch to 'inUDecLoop'
                                                            
  537 0000024A         inUDecDone
  538 0000024A 4620            MOV              R0, R4      ; R0 = R4 (return '
                                                            number' in R0)
  539 0000024C BD30            POP              {R4, R5, PC} ; restore previous
                                                             value of R4 into R
                                                            4, R5 into R5, and 
                                                            LR into PC (return)
                                                            
  540 0000024E         
  541 0000024E         ;Modulus macro from Section 5.4
  542 0000024E         ;Mod and Divnd must not be the same register
  543 0000024E                 MACRO
  544 0000024E                 UMOD             $Mod,$Divnd,$Divsr ;MOD,DIVIDEN
                                                            D,DIVISOR
  545 0000024E                 UDIV             $Mod,$Divnd,$Divsr ;Mod = DIVID
                                                            END/DIVISOR
  546 0000024E                 MUL              $Mod,$Mod,$Divsr ;Mod = DIVISOR
                                                            *(DIVIDEND/DIVISOR)
                                                            
  547 0000024E                 SUB              $Mod,$Divnd,$Mod ;Mod = DIVIDEN
                                                            D-DIVISOR*(DIVIDEND
                                                            /DIVISOR)
  548 0000024E                 MEND
  549 0000024E         
  550 0000024E         ;-----------------------UART_OutUDec--------------------
                       ---
  551 0000024E         ; Output a 32-bit number in unsigned decimal format
  552 0000024E         ; Input: R0  32-bit number to be transferred
  553 0000024E         ; Output: none
  554 0000024E         ; Variable format 1-10 digits with no space before or af
                       ter
  555 0000024E         UART_OutUDec
  556 0000024E         ; This function uses recursion to convert decimal number
                       
  557 0000024E         ;   of unspecified length as an ASCII string
  558 0000024E B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  559 00000250 280A            CMP              R0, #10     ; is R0 (number) < 
                                                            10?
  560 00000252 D310            BLO              outUDecDone ; if so, skip to 'o
                                                            utUDecDone'
  561 00000254         ; R0 (number) >= 10
  562 00000254         ; recursive call to UART_OutUDec with R0/10 (number/10)
  563 00000254 B401            PUSH             {R0}        ; save current valu
                                                            e of R0 (number)
  564 00000256 F04F 010A       MOV              R1, #10     ; R1 = 10
  565 0000025A FBB0 F0F1       UDIV             R0, R0, R1  ; R0 = R0/R1 (numbe



ARM Macro Assembler    Page 20 


                                                            r = number/10)
  566 0000025E F7FF FFFE       BL               UART_OutUDec
  567 00000262 BC01            POP              {R0}        ; restore previous 
                                                            value of R0 into R0
                                                            
  568 00000264         ; extract the ones digit of R0 (number) with R0 = R0%10
  569 00000264 F04F 010A       MOV              R1, #10     ; R1 = 10
  570 00000268 4602            MOV              R2, R0      ; R2 = R0 (temporar
                                                            ily holds number)
  571 0000026A                 UMOD             R0, R2, R1  ; R0 = R2%R1 (numbe
                                                            r = number%10)
  545 0000026A FBB2 F0F1       UDIV             R0,R2,R1    ;Mod = DIVIDEND/DIV
                                                            ISOR
  546 0000026E FB00 F001       MUL              R0,R0,R1    ;Mod = DIVISOR*(DIV
                                                            IDEND/DIVISOR)
  547 00000272 EBA2 0000       SUB              R0,R2,R0    ;Mod = DIVIDEND-DIV
                                                            ISOR*(DIVIDEND/DIVI
                                                            SOR)
  572 00000276         outUDecDone
  573 00000276         ; R0 (number) is between 0 and 9
  574 00000276 F100 0030       ADD              R0, R0, #'0' ; R0 = R0 + '0' (n
                                                            umber = number + '0
                                                            ')
  575 0000027A F7FF FFFE       BL               UART_OutChar ; send the charact
                                                            er to the UART
  576 0000027E BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return)
  577 00000280         
  578 00000280         ;---------------------UART_InUHex-----------------------
                       -----------------
  579 00000280         ; Accepts ASCII input in unsigned hexadecimal (base 16) 
                       format
  580 00000280         ; Input: none
  581 00000280         ; Output: R0  32-bit unsigned number
  582 00000280         ; No '$' or '0x' need be entered, just the 1 to 8 hex di
                       gits
  583 00000280         ; It will convert lower case a-f to uppercase A-F
  584 00000280         ;     and converts to a 32-bit unsigned number
  585 00000280         ;     value range is 0 to FFFFFFFF
  586 00000280         ; If you enter a number above FFFFFFFF, it will return a
                       n incorrect value
  587 00000280         ; Backspace will remove last digit typed
  588 00000280         UART_InUHex
  589 00000280 B530            PUSH             {R4, R5, LR} ; save current val
                                                            ue of R4, R5, and L
                                                            R
  590 00000282 F04F 0400       MOV              R4, #0      ; R4 = 0 (number = 
                                                            0)
  591 00000286 F04F 0500       MOV              R5, #0      ; R5 = 0 (length = 
                                                            0)
  592 0000028A         inUHexLoop
  593 0000028A         ; accepts characters until <enter> is typed
  594 0000028A F7FF FFFE       BL               UART_InChar ; get a character f
                                                            rom the UART
  595 0000028E 280D            CMP              R0, #CR     ; is R0 (most recen
                                                            t character) == 0x0
                                                            D (<enter>)?
  596 00000290 D040            BEQ              inUHexDone  ; if so, skip to 'i



ARM Macro Assembler    Page 21 


                                                            nUHexDone'
  597 00000292         ; check if the input is a digit, 0-9
  598 00000292         ; if the character is not 0-9, check for other valid inp
                       ut
  599 00000292 2830            CMP              R0, #'0'    ; is R0 (most recen
                                                            t character) < '0'?
                                                            
  600 00000294 D30D            BLO              inUHexNotDigit ; if so, skip to
                                                             'inUHexNotDigit'
  601 00000296 2839            CMP              R0, #'9'    ; is R0 (most recen
                                                            t character) > '9'?
                                                            
  602 00000298 D80B            BHI              inUHexNotDigit ; if so, skip to
                                                             'inUHexNotDigit'
  603 0000029A F04F 0110       MOV              R1, #0x10   ; R1 = 0x10 = 16
  604 0000029E FB04 F401       MUL              R4, R4, R1  ; R4 = R4*R1 (numbe
                                                            r = number*16)
  605 000002A2 4404            ADD              R4, R4, R0  ; R4 = R4 + R0 (num
                                                            ber = number*16 + c
                                                            haracter)
  606 000002A4 F1A4 0430       SUB              R4, R4, #'0' ; R4 = R4 - '0' (n
                                                            umber = number*16 +
                                                             character - '0')
  607 000002A8 F105 0501       ADD              R5, R5, #1  ; R5 = R5 + 1 (leng
                                                            th = length + 1)
  608 000002AC F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  609 000002B0 E7EB            B                inUHexLoop  ; unconditional bra
                                                            nch to 'inUHexLoop'
                                                            
  610 000002B2         inUHexNotDigit
  611 000002B2         ; check if the input is an uppercase letter, 'A'-'F'
  612 000002B2 2841            CMP              R0, #'A'    ; is R0 (most recen
                                                            t character) < 'A'?
                                                            
  613 000002B4 D30F            BLO              inUHexNotUpper ; if so, skip to
                                                             'inUHexNotUpper'
  614 000002B6 2846            CMP              R0, #'F'    ; is R0 (most recen
                                                            t character) > 'F'?
                                                            
  615 000002B8 D80D            BHI              inUHexNotUpper ; if so, skip to
                                                             'inUHexNotUpper'
  616 000002BA F04F 0110       MOV              R1, #0x10   ; R1 = 0x10 = 16
  617 000002BE FB04 F401       MUL              R4, R4, R1  ; R4 = R4*R1 (numbe
                                                            r = number*16)
  618 000002C2 4404            ADD              R4, R4, R0  ; R4 = R4 + R0 (num
                                                            ber = number*16 + c
                                                            haracter)
  619 000002C4 F1A4 0441       SUB              R4, R4, #'A' ; R4 = R4 - '0' (n
                                                            umber = number*16 +
                                                             character - 'A')
  620 000002C8 F104 040A       ADD              R4, R4, #0xA ; R4 = R4 + 0xA (n
                                                            umber = number*16 +
                                                             character - 'A' + 
                                                            10)
  621 000002CC F105 0501       ADD              R5, R5, #1  ; R5 = R5 + 1 (leng
                                                            th = length + 1)
  622 000002D0 F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART



ARM Macro Assembler    Page 22 


  623 000002D4 E7D9            B                inUHexLoop  ; unconditional bra
                                                            nch to 'inUHexLoop'
                                                            
  624 000002D6         inUHexNotUpper
  625 000002D6         ; check if the input is a lowercase letter, 'a'-'f'
  626 000002D6 2861            CMP              R0, #'a'    ; is R0 (most recen
                                                            t character) < 'a'?
                                                            
  627 000002D8 D30F            BLO              inUHexOther ; if so, skip to 'i
                                                            nUHexOther'
  628 000002DA 2866            CMP              R0, #'f'    ; is R0 (most recen
                                                            t character) > 'f'?
                                                            
  629 000002DC D80D            BHI              inUHexOther ; if so, skip to 'i
                                                            nUHexOther'
  630 000002DE F04F 0110       MOV              R1, #0x10   ; R1 = 0x10 = 16
  631 000002E2 FB04 F401       MUL              R4, R4, R1  ; R4 = R4*R1 (numbe
                                                            r = number*16)
  632 000002E6 4404            ADD              R4, R4, R0  ; R4 = R4 + R0 (num
                                                            ber = number*16 + c
                                                            haracter)
  633 000002E8 F1A4 0461       SUB              R4, R4, #'a' ; R4 = R4 - '0' (n
                                                            umber = number*16 +
                                                             character - 'a')
  634 000002EC F104 040A       ADD              R4, R4, #0xA ; R4 = R4 + 0xA (n
                                                            umber = number*16 +
                                                             character - 'a' + 
                                                            10)
  635 000002F0 F105 0501       ADD              R5, R5, #1  ; R5 = R5 + 1 (leng
                                                            th = length + 1)
  636 000002F4 F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  637 000002F8 E7C7            B                inUHexLoop  ; unconditional bra
                                                            nch to 'inUHexLoop'
                                                            
  638 000002FA         inUHexOther
  639 000002FA         ; if the input is a backspace, then the return number is
                       
  640 000002FA         ; changed and a backspace is outputted to the screen
  641 000002FA 2808            CMP              R0, #BS     ; is R0 (most recen
                                                            t character) == 0x0
                                                            8 (<backspace>)?
  642 000002FC D1C5            BNE              inUHexLoop  ; if not, skip to '
                                                            inUHexLoop'
  643 000002FE 2D00            CMP              R5, #0      ; is R5 (length) ==
                                                             0?
  644 00000300 D0C3            BEQ              inUHexLoop  ; if so, skip to 'i
                                                            nUHexLoop'
  645 00000302 F04F 0110       MOV              R1, #0x10   ; R1 = 0x10 = 16
  646 00000306 FBB4 F4F1       UDIV             R4, R4, R1  ; R4 = R4/R1 (numbe
                                                            r = number/16)
  647 0000030A F1A5 0501       SUB              R5, R5, #1  ; R5 = R5 - 1 (leng
                                                            th = length - 1)
  648 0000030E F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  649 00000312         ;    MOV R0, #SPA                    ; R0 = SPA (<space>
                       )
  650 00000312         ;    BL  UART_OutChar                ; echo additional <
                       space> to the UART



ARM Macro Assembler    Page 23 


  651 00000312         ;    MOV R0, #BS                     ; R0 = BS (<backspa
                       ce>)
  652 00000312         ;    BL  UART_OutChar                ; echo additional <
                       backspace> to the UART
  653 00000312 E7BA            B                inUHexLoop  ; unconditional bra
                                                            nch to 'inUHexLoop'
                                                            
  654 00000314         inUHexDone
  655 00000314 4620            MOV              R0, R4      ; R0 = R4 (return '
                                                            number' in R0)
  656 00000316 BD30            POP              {R4, R5, PC} ; restore previous
                                                             value of R4 into R
                                                            4, R5 into R5, and 
                                                            LR into PC (return)
                                                            
  657 00000318         
  658 00000318         ;--------------------------UART_OutUHex-----------------
                       -----------
  659 00000318         ; Output a 32-bit number in unsigned hexadecimal format
  660 00000318         ; Input: R0  32-bit number to be transferred
  661 00000318         ; Output: none
  662 00000318         ; Variable format 1 to 8 digits with no space before or 
                       after
  663 00000318         UART_OutUHex
  664 00000318         ; This function uses recursion to convert the number of
  665 00000318         ;   unspecified length as an ASCII string
  666 00000318 B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  667 0000031A 2810            CMP              R0, #0x10   ; is R0 (number) < 
                                                            16?
  668 0000031C D315            BLO              outUHexOneDigit ; if so, skip t
                                                            o 'outUHexOneDigit'
                                                            
  669 0000031E         outUHexManyDigits
  670 0000031E         ; R0 (number) >= 16
  671 0000031E         ; recursive call to UART_OutUHex with R0/0x10 (number/0x
                       10)
  672 0000031E B401            PUSH             {R0}        ; save current valu
                                                            e of R0 (number)
  673 00000320 F04F 0110       MOV              R1, #0x10   ; R1 = 0x10 = 16
  674 00000324 FBB0 F0F1       UDIV             R0, R0, R1  ; R0 = R0/R1 (numbe
                                                            r = number/0x10)
  675 00000328 F7FF FFFE       BL               UART_OutUHex
  676 0000032C BC01            POP              {R0}        ; restore previous 
                                                            value of R0 into R0
                                                            
  677 0000032E         ; recursive call to UART_OutUHex with R0%0x10 (number%0x
                       10)
  678 0000032E B401            PUSH             {R0}        ; save current valu
                                                            e of R0 (number)
  679 00000330 F04F 0110       MOV              R1, #0x10   ; R1 = 0x10 = 16
  680 00000334 4602            MOV              R2, R0      ; R2 = R0 (temporar
                                                            ily holds number)
  681 00000336                 UMOD             R0, R2, R1  ; R0 = R2%R1 (numbe
                                                            r = number%0x10)
  545 00000336 FBB2 F0F1       UDIV             R0,R2,R1    ;Mod = DIVIDEND/DIV
                                                            ISOR
  546 0000033A FB00 F001       MUL              R0,R0,R1    ;Mod = DIVISOR*(DIV
                                                            IDEND/DIVISOR)



ARM Macro Assembler    Page 24 


  547 0000033E EBA2 0000       SUB              R0,R2,R0    ;Mod = DIVIDEND-DIV
                                                            ISOR*(DIVIDEND/DIVI
                                                            SOR)
  682 00000342 F7FF FFFE       BL               UART_OutUHex
  683 00000346 BC01            POP              {R0}        ; restore previous 
                                                            value of R0 into R0
                                                            
  684 00000348 E00C            B                outUHexDone ; unconditional bra
                                                            nch to 'outUHexDone
                                                            '
  685 0000034A         outUHexOneDigit
  686 0000034A         ; R0 (number) is between 0 and 15
  687 0000034A 280A            CMP              R0, #0xA    ; is R0 (number) < 
                                                            10?
  688 0000034C D306            BLO              outUHexOneNumber ; if so, skip 
                                                            to 'outUHexOneNumbe
                                                            r'
  689 0000034E         outUHexOneLetter
  690 0000034E         ; R0 (number) is between 10 and 15
  691 0000034E         ; convert R0 to a character between 'A' and 'F'
  692 0000034E F1A0 000A       SUB              R0, R0, #0xA ; R0 = R0 - 10 (nu
                                                            mber = number - 0xA
                                                            )
  693 00000352 F100 0041       ADD              R0, R0, #'A' ; R0 = R0 + 'A' (n
                                                            umber = number - 0x
                                                            A + 'A')
  694 00000356 F7FF FFFE       BL               UART_OutChar ; send the charact
                                                            er to the UART
  695 0000035A E003            B                outUHexDone ; unconditional bra
                                                            nch to 'outUHexDone
                                                            '
  696 0000035C         outUHexOneNumber
  697 0000035C         ; R0 (number) is between 0 and 9
  698 0000035C         ; convert R0 to a character between '0' and '9'
  699 0000035C F100 0030       ADD              R0, R0, #'0' ; R0 = R0 + 'A' (n
                                                            umber = number + '0
                                                            ')
  700 00000360 F7FF FFFE       BL               UART_OutChar ; send the charact
                                                            er to the UART
  701 00000364         outUHexDone
  702 00000364 BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return)
  703 00000366         
  704 00000366         ;------------UART_InString------------
  705 00000366         ; Accepts ASCII characters from the serial port
  706 00000366         ;    and adds them to a string until <enter> is typed
  707 00000366         ;    or until max length of the string is reached.
  708 00000366         ; It echoes each character as it is inputted.
  709 00000366         ; If a backspace is inputted, the string is modified
  710 00000366         ;    and the backspace is echoed
  711 00000366         ; terminates the string with a null character
  712 00000366         ; uses busy-waiting synchronization on RDRF
  713 00000366         ; Input: R0  pointer to empty buffer
  714 00000366         ;        R1  number of non-NULL characters that can
  715 00000366         ;            fit in the buffer (in other words size-1)
  716 00000366         ; Output: R0  pointer to NULL-terminated string
  717 00000366         ; -- Modified by Agustinus Darmawan + Mingjie Qiu --
  718 00000366         UART_InString



ARM Macro Assembler    Page 25 


  719 00000366 B570            PUSH             {R4, R5, R6, LR} ; save current
                                                             value of R4, R5, R
                                                            6, and LR
  720 00000368 4604            MOV              R4, R0      ; R4 = R0 (save the
                                                             buffer pointer par
                                                            ameter)
  721 0000036A F04F 0500       MOV              R5, #0      ; R5 = 0 (length = 
                                                            0)
  722 0000036E 460E            MOV              R6, R1      ; R6 = R1 (save the
                                                             max length paramet
                                                            er)
  723 00000370         inStringLoop
  724 00000370         ; accepts characters until <enter> is typed
  725 00000370 F7FF FFFE       BL               UART_InChar ; get a character f
                                                            rom the UART
  726 00000374 280D            CMP              R0, #CR     ; is R0 (most recen
                                                            t character) == 0x0
                                                            D (<enter>)?
  727 00000376 D014            BEQ              inStringDone ; if so, skip to '
                                                            inStringDone'
  728 00000378         ; if the input is a backspace, then the return string is
                       
  729 00000378         ; changed and a backspace is outputted to the screen
  730 00000378 2808            CMP              R0, #BS     ; is R0 (most recen
                                                            t character) == 0x0
                                                            8 (<backspace>)?
  731 0000037A D108            BNE              inStringCont ; if not, skip to 
                                                            'inStringCont'
  732 0000037C 2D00            CMP              R5, #0      ; is R5 (length) ==
                                                             0?
  733 0000037E D0F7            BEQ              inStringLoop ; if so, skip to '
                                                            inStringLoop'
  734 00000380 F1A4 0401       SUB              R4, R4, #1  ; R4 = R4 - 1 (buff
                                                            erPt = bufferPt - 1
                                                            )
  735 00000384 F1A5 0501       SUB              R5, R5, #1  ; R5 = R5 - 1 (leng
                                                            th = length - 1)
  736 00000388 F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  737 0000038C         ;    MOV R0, #SPA                    ; R0 = SPA (<space>
                       )
  738 0000038C         ;    BL  UART_OutChar                ; echo additional <
                       space> to the UART
  739 0000038C         ;    MOV R0, #BS                     ; R0 = BS (<backspa
                       ce>)
  740 0000038C         ;    BL  UART_OutChar                ; echo additional <
                       backspace> to the UART
  741 0000038C E7F0            B                inStringLoop ; unconditional br
                                                            anch to 'inStringLo
                                                            op'
  742 0000038E         inStringCont
  743 0000038E         ; if the buffer has room for another character, add the
  744 0000038E         ; incoming character to the buffer
  745 0000038E 42B5            CMP              R5, R6      ; is R5 (length) ==
                                                             R6 (max length)?
  746 00000390 D0EE            BEQ              inStringLoop ; if so, skip to '
                                                            inUDecLoop'
  747 00000392 7020            STRB             R0, [R4]    ; [R4] = R0 (store 
                                                            8 least significant



ARM Macro Assembler    Page 26 


                                                             bits of R0 into lo
                                                            cation pointed to b
                                                            y R4)
  748 00000394 F104 0401       ADD              R4, R4, #1  ; R4 = R4 + 1 (buff
                                                            erPt = bufferPt + 1
                                                            )
  749 00000398 F105 0501       ADD              R5, R5, #1  ; R5 = R5 + 1 (leng
                                                            th = length + 1)
  750 0000039C F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  751 000003A0 E7E6            B                inStringLoop ; unconditional br
                                                            anch to 'inStringLo
                                                            op'
  752 000003A2         inStringDone
  753 000003A2         ; NULL terminate the string
  754 000003A2 F04F 0000       MOV              R0, #0      ; R0 = 0 = NULL
  755 000003A6 7020            STRB             R0, [R4]    ; [R4] = R0 (store 
                                                            R0 (NULL) into loca
                                                            tion pointed to by 
                                                            R4)
  756 000003A8 4620            MOV              R0, R4      ; R0 = R4 (return t
                                                            he buffer pointer i
                                                            n R0)
  757 000003AA BD70            POP              {R4, R5, R6, PC} ; restore prev
                                                            ious value of R4 in
                                                            to R4, R5 into R5, 
                                                            R6 into R6, and LR 
                                                            into PC (return)
  758 000003AC         
  759 000003AC         ;------------UART_HighStickParity------------
  760 000003AC         ; Configura el SPS, EPS y PEN del UART0
  761 000003AC         ; para que el bit de paridad envie 1
  762 000003AC         UART_HighStickParity
  763 000003AC B503            PUSH             {R0, R1, LR} ; save current val
                                                            ue of R0, R1 and LR
                                                            
  764 000003AE 4913            LDR              R1, =UART0_LCRH_R ; R1 = &UART0
                                                            _LCRH_R
  765 000003B0 6808            LDR              R0, [R1]    ; R0 = [R1]
  766 000003B2 F020 0004       BIC              R0, R0, #UART_LCRH_EPS 
                                                            ; HIGH Stick Parity
                                                            
  767 000003B6 6008            STR              R0, [R1]    ; [R1] = R0
  768 000003B8 BD03            POP              {R0, R1, PC} ; restore previous
                                                             value of R0 into R
                                                            0, R1 into R1, and 
                                                            LR into PC (return)
                                                            
  769 000003BA         
  770 000003BA         ;------------UART_LowStickParity------------
  771 000003BA         ; Configura el SPS, EPS y PEN del UART0
  772 000003BA         ; para que el bit de paridad envie 0
  773 000003BA         UART_LowStickParity
  774 000003BA B503            PUSH             {R0, R1, LR} ; save current val
                                                            ue of R0, R1 and LR
                                                            
  775 000003BC 490F            LDR              R1, =UART0_LCRH_R ; R1 = &UART0
                                                            _LCRH_R
  776 000003BE 6808            LDR              R0, [R1]    ; R0 = [R1]



ARM Macro Assembler    Page 27 


  777 000003C0 F040 0004       ORR              R0, R0, #UART_LCRH_EPS 
                                                            ; LOW Stick Parity
  778 000003C4 6008            STR              R0, [R1]    ; [R1] = R0
  779 000003C6 BD03            POP              {R0, R1, PC} ; restore previous
                                                             value of R0 into R
                                                            0, R1 into R1, and 
                                                            LR into PC (return)
                                                            
  780 000003C8         
  781 000003C8         ;------------UART_SendBreak------------
  782 000003C8         ; Activa el SendBreak bit de la Uart
  783 000003C8         UART_SendBreak
  784 000003C8 B503            PUSH             {R0, R1, LR} ; save current val
                                                            ue of R0, R1 and LR
                                                            
  785 000003CA 490C            LDR              R1, =UART0_LCRH_R ; R1 = &UART0
                                                            _LCRH_R
  786 000003CC 6808            LDR              R0, [R1]    ; R0 = [R1]
  787 000003CE F040 0001       ORR              R0, R0, #UART_LCRH_BRK 
                                                            ; Send Break Enable
                                                            
  788 000003D2 6008            STR              R0, [R1]    ; [R1] = R0
  789 000003D4 BD03            POP              {R0, R1, PC} ; restore previous
                                                             value of R0 into R
                                                            0, R1 into R1, and 
                                                            LR into PC (return)
                                                            
  790 000003D6         
  791 000003D6         ;--------UART_SendBreak_Disable---------
  792 000003D6         ; Desactiva el SendBreak bit de la Uart
  793 000003D6         UART_SendBreak_Disable
  794 000003D6 B503            PUSH             {R0, R1, LR} ; save current val
                                                            ue of R0, R1 and LR
                                                            
  795 000003D8 4908            LDR              R1, =UART0_LCRH_R ; R1 = &UART0
                                                            _LCRH_R
  796 000003DA 6808            LDR              R0, [R1]    ; R0 = [R1]
  797 000003DC F020 0001       BIC              R0, R0, #UART_LCRH_BRK ; Send B
                                                            reak Disable
  798 000003E0 6008            STR              R0, [R1]    ; [R1] = R0
  799 000003E2 BD03            POP              {R0, R1, PC} ; restore previous
                                                             value of R0 into R
                                                            0, R1 into R1, and 
                                                            LR into PC (return)
                                                            
  800 000003E4         
  801 000003E4                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  802 000003E4                 END                          ; end of file
              400FE618 
              400FE608 
              400FEA18 
              4000C030 
              4000C024 
              4000C028 
              4000C02C 
              4000C034 
              4000C038 



ARM Macro Assembler    Page 28 


              4000CFC8 
              400FE138 
              400FEA08 
              40058420 
              40058510 
              4005851C 
              4005852C 
              40058528 
              E000E404 
              E000E100 
              4000C018 
              4000C000 
              4000C03C 
              4000C044 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\uartints.d -o.\objects\uartints.o -IC:\Users\mode_\Do
cuments\Fmat\MicroControladores\KeilProjects\Cash_flow\RTE\_Target_1 -IC:\Keil_
v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 -IC:\Keil_v5\ARM\CMSIS\I
nclude --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 522" --p
redefine="TM4C1294NCPDT SETA 1" --list=.\listings\uartints.lst UARTInts.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 142 in file UARTInts.s
   Uses
      None
Comment: .text unused
GPIOAinitloop 00000098

Symbol: GPIOAinitloop
   Definitions
      At line 254 in file UARTInts.s
   Uses
      At line 257 in file UARTInts.s
Comment: GPIOAinitloop used once
UART0_Handler 00000170

Symbol: UART0_Handler
   Definitions
      At line 411 in file UARTInts.s
   Uses
      At line 147 in file UARTInts.s
Comment: UART0_Handler used once
UART0initloop 00000024

Symbol: UART0initloop
   Definitions
      At line 187 in file UARTInts.s
   Uses
      At line 190 in file UARTInts.s
Comment: UART0initloop used once
UART_HighStickParity 000003AC

Symbol: UART_HighStickParity
   Definitions
      At line 762 in file UARTInts.s
   Uses
      At line 154 in file UARTInts.s
Comment: UART_HighStickParity used once
UART_InChar 00000138

Symbol: UART_InChar
   Definitions
      At line 362 in file UARTInts.s
   Uses
      At line 145 in file UARTInts.s
      At line 505 in file UARTInts.s
      At line 594 in file UARTInts.s
      At line 725 in file UARTInts.s

UART_InString 00000366

Symbol: UART_InString
   Definitions
      At line 718 in file UARTInts.s
   Uses
      At line 153 in file UARTInts.s
Comment: UART_InString used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

UART_InUDec 000001FE

Symbol: UART_InUDec
   Definitions
      At line 499 in file UARTInts.s
   Uses
      At line 149 in file UARTInts.s
Comment: UART_InUDec used once
UART_InUHex 00000280

Symbol: UART_InUHex
   Definitions
      At line 588 in file UARTInts.s
   Uses
      At line 151 in file UARTInts.s
Comment: UART_InUHex used once
UART_Init 00000000

Symbol: UART_Init
   Definitions
      At line 169 in file UARTInts.s
   Uses
      At line 144 in file UARTInts.s
Comment: UART_Init used once
UART_LowStickParity 000003BA

Symbol: UART_LowStickParity
   Definitions
      At line 773 in file UARTInts.s
   Uses
      At line 155 in file UARTInts.s
Comment: UART_LowStickParity used once
UART_OutChar 0000014A

Symbol: UART_OutChar
   Definitions
      At line 387 in file UARTInts.s
   Uses
      At line 146 in file UARTInts.s
      At line 485 in file UARTInts.s
      At line 519 in file UARTInts.s
      At line 531 in file UARTInts.s
      At line 575 in file UARTInts.s
      At line 608 in file UARTInts.s
      At line 622 in file UARTInts.s
      At line 636 in file UARTInts.s
      At line 648 in file UARTInts.s
      At line 694 in file UARTInts.s
      At line 700 in file UARTInts.s
      At line 736 in file UARTInts.s
      At line 750 in file UARTInts.s

UART_OutString 000001E8

Symbol: UART_OutString
   Definitions
      At line 478 in file UARTInts.s
   Uses
      At line 148 in file UARTInts.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Comment: UART_OutString used once
UART_OutUDec 0000024E

Symbol: UART_OutUDec
   Definitions
      At line 555 in file UARTInts.s
   Uses
      At line 150 in file UARTInts.s
      At line 566 in file UARTInts.s

UART_OutUHex 00000318

Symbol: UART_OutUHex
   Definitions
      At line 663 in file UARTInts.s
   Uses
      At line 152 in file UARTInts.s
      At line 675 in file UARTInts.s
      At line 682 in file UARTInts.s

UART_SendBreak 000003C8

Symbol: UART_SendBreak
   Definitions
      At line 783 in file UARTInts.s
   Uses
      At line 156 in file UARTInts.s
Comment: UART_SendBreak used once
UART_SendBreak_Disable 000003D6

Symbol: UART_SendBreak_Disable
   Definitions
      At line 793 in file UARTInts.s
   Uses
      At line 157 in file UARTInts.s
Comment: UART_SendBreak_Disable used once
copyHardwareToSoftware 000000EE

Symbol: copyHardwareToSoftware
   Definitions
      At line 299 in file UARTInts.s
   Uses
      At line 446 in file UARTInts.s
      At line 458 in file UARTInts.s

copySoftwareToHardware 00000110

Symbol: copySoftwareToHardware
   Definitions
      At line 324 in file UARTInts.s
   Uses
      At line 399 in file UARTInts.s
      At line 425 in file UARTInts.s

h2sdone 0000010E

Symbol: h2sdone
   Definitions
      At line 317 in file UARTInts.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 307 in file UARTInts.s
      At line 310 in file UARTInts.s

h2sloop 000000F0

Symbol: h2sloop
   Definitions
      At line 301 in file UARTInts.s
   Uses
      At line 316 in file UARTInts.s
Comment: h2sloop used once
handlerCheck0 00000172

Symbol: handlerCheck0
   Definitions
      At line 414 in file UARTInts.s
   Uses
      None
Comment: handlerCheck0 unused
handlerCheck1 0000019C

Symbol: handlerCheck1
   Definitions
      At line 435 in file UARTInts.s
   Uses
      At line 419 in file UARTInts.s
      At line 430 in file UARTInts.s

handlerCheck2 000001B4

Symbol: handlerCheck2
   Definitions
      At line 447 in file UARTInts.s
   Uses
      At line 440 in file UARTInts.s
Comment: handlerCheck2 used once
handlerCheck3 000001CC

Symbol: handlerCheck3
   Definitions
      At line 459 in file UARTInts.s
   Uses
      At line 452 in file UARTInts.s
Comment: handlerCheck3 used once
handlerDone 000001E6

Symbol: handlerDone
   Definitions
      At line 471 in file UARTInts.s
   Uses
      At line 464 in file UARTInts.s
Comment: handlerDone used once
inCharLoop 0000013E

Symbol: inCharLoop
   Definitions
      At line 365 in file UARTInts.s
   Uses



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 369 in file UARTInts.s
Comment: inCharLoop used once
inStringCont 0000038E

Symbol: inStringCont
   Definitions
      At line 742 in file UARTInts.s
   Uses
      At line 731 in file UARTInts.s
Comment: inStringCont used once
inStringDone 000003A2

Symbol: inStringDone
   Definitions
      At line 752 in file UARTInts.s
   Uses
      At line 727 in file UARTInts.s
Comment: inStringDone used once
inStringLoop 00000370

Symbol: inStringLoop
   Definitions
      At line 723 in file UARTInts.s
   Uses
      At line 733 in file UARTInts.s
      At line 741 in file UARTInts.s
      At line 746 in file UARTInts.s
      At line 751 in file UARTInts.s

inUDecDone 0000024A

Symbol: inUDecDone
   Definitions
      At line 537 in file UARTInts.s
   Uses
      At line 507 in file UARTInts.s
Comment: inUDecDone used once
inUDecLoop 00000208

Symbol: inUDecLoop
   Definitions
      At line 503 in file UARTInts.s
   Uses
      At line 520 in file UARTInts.s
      At line 525 in file UARTInts.s
      At line 527 in file UARTInts.s
      At line 536 in file UARTInts.s

inUDecNAN 00000230

Symbol: inUDecNAN
   Definitions
      At line 521 in file UARTInts.s
   Uses
      At line 511 in file UARTInts.s
      At line 513 in file UARTInts.s

inUHexDone 00000314




ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

Symbol: inUHexDone
   Definitions
      At line 654 in file UARTInts.s
   Uses
      At line 596 in file UARTInts.s
Comment: inUHexDone used once
inUHexLoop 0000028A

Symbol: inUHexLoop
   Definitions
      At line 592 in file UARTInts.s
   Uses
      At line 609 in file UARTInts.s
      At line 623 in file UARTInts.s
      At line 637 in file UARTInts.s
      At line 642 in file UARTInts.s
      At line 644 in file UARTInts.s
      At line 653 in file UARTInts.s

inUHexNotDigit 000002B2

Symbol: inUHexNotDigit
   Definitions
      At line 610 in file UARTInts.s
   Uses
      At line 600 in file UARTInts.s
      At line 602 in file UARTInts.s

inUHexNotUpper 000002D6

Symbol: inUHexNotUpper
   Definitions
      At line 624 in file UARTInts.s
   Uses
      At line 613 in file UARTInts.s
      At line 615 in file UARTInts.s

inUHexOther 000002FA

Symbol: inUHexOther
   Definitions
      At line 638 in file UARTInts.s
   Uses
      At line 627 in file UARTInts.s
      At line 629 in file UARTInts.s

outCharLoop 0000014E

Symbol: outCharLoop
   Definitions
      At line 390 in file UARTInts.s
   Uses
      At line 394 in file UARTInts.s
Comment: outCharLoop used once
outStringDone 000001FC

Symbol: outStringDone
   Definitions
      At line 488 in file UARTInts.s



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 484 in file UARTInts.s
Comment: outStringDone used once
outStringLoop 000001EC

Symbol: outStringLoop
   Definitions
      At line 481 in file UARTInts.s
   Uses
      At line 487 in file UARTInts.s
Comment: outStringLoop used once
outUDecDone 00000276

Symbol: outUDecDone
   Definitions
      At line 572 in file UARTInts.s
   Uses
      At line 560 in file UARTInts.s
Comment: outUDecDone used once
outUHexDone 00000364

Symbol: outUHexDone
   Definitions
      At line 701 in file UARTInts.s
   Uses
      At line 684 in file UARTInts.s
      At line 695 in file UARTInts.s

outUHexManyDigits 0000031E

Symbol: outUHexManyDigits
   Definitions
      At line 669 in file UARTInts.s
   Uses
      None
Comment: outUHexManyDigits unused
outUHexOneDigit 0000034A

Symbol: outUHexOneDigit
   Definitions
      At line 685 in file UARTInts.s
   Uses
      At line 668 in file UARTInts.s
Comment: outUHexOneDigit used once
outUHexOneLetter 0000034E

Symbol: outUHexOneLetter
   Definitions
      At line 689 in file UARTInts.s
   Uses
      None
Comment: outUHexOneLetter unused
outUHexOneNumber 0000035C

Symbol: outUHexOneNumber
   Definitions
      At line 696 in file UARTInts.s
   Uses
      At line 688 in file UARTInts.s



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

Comment: outUHexOneNumber used once
s2hdone 00000136

Symbol: s2hdone
   Definitions
      At line 345 in file UARTInts.s
   Uses
      At line 332 in file UARTInts.s
      At line 335 in file UARTInts.s

s2hloop 00000112

Symbol: s2hloop
   Definitions
      At line 326 in file UARTInts.s
   Uses
      At line 344 in file UARTInts.s
Comment: s2hloop used once
49 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BS 00000008

Symbol: BS
   Definitions
      At line 137 in file UARTInts.s
   Uses
      At line 524 in file UARTInts.s
      At line 641 in file UARTInts.s
      At line 730 in file UARTInts.s

CR 0000000D

Symbol: CR
   Definitions
      At line 135 in file UARTInts.s
   Uses
      At line 506 in file UARTInts.s
      At line 595 in file UARTInts.s
      At line 726 in file UARTInts.s

DEL 0000007F

Symbol: DEL
   Definitions
      At line 140 in file UARTInts.s
   Uses
      None
Comment: DEL unused
ESC 0000001B

Symbol: ESC
   Definitions
      At line 138 in file UARTInts.s
   Uses
      None
Comment: ESC unused
FIFOFAIL 00000000

Symbol: FIFOFAIL
   Definitions
      At line 113 in file UARTInts.s
   Uses
      At line 368 in file UARTInts.s
      At line 393 in file UARTInts.s

FIFOSIZE 00000010

Symbol: FIFOSIZE
   Definitions
      At line 111 in file UARTInts.s
   Uses
      At line 309 in file UARTInts.s
Comment: FIFOSIZE used once
FIFOSUCCESS 00000001

Symbol: FIFOSUCCESS
   Definitions
      At line 112 in file UARTInts.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      None
Comment: FIFOSUCCESS unused
GPIO_PORTA_AFSEL_R 40058420

Symbol: GPIO_PORTA_AFSEL_R
   Definitions
      At line 36 in file UARTInts.s
   Uses
      At line 259 in file UARTInts.s
Comment: GPIO_PORTA_AFSEL_R used once
GPIO_PORTA_AMSEL_R 40058528

Symbol: GPIO_PORTA_AMSEL_R
   Definitions
      At line 39 in file UARTInts.s
   Uses
      At line 279 in file UARTInts.s
Comment: GPIO_PORTA_AMSEL_R used once
GPIO_PORTA_DEN_R 4005851C

Symbol: GPIO_PORTA_DEN_R
   Definitions
      At line 38 in file UARTInts.s
   Uses
      At line 268 in file UARTInts.s
Comment: GPIO_PORTA_DEN_R used once
GPIO_PORTA_PCTL_R 4005852C

Symbol: GPIO_PORTA_PCTL_R
   Definitions
      At line 40 in file UARTInts.s
   Uses
      At line 273 in file UARTInts.s
Comment: GPIO_PORTA_PCTL_R used once
GPIO_PORTA_PUR_R 40058510

Symbol: GPIO_PORTA_PUR_R
   Definitions
      At line 37 in file UARTInts.s
   Uses
      At line 264 in file UARTInts.s
Comment: GPIO_PORTA_PUR_R used once
LF 0000000A

Symbol: LF
   Definitions
      At line 136 in file UARTInts.s
   Uses
      None
Comment: LF unused
NVIC_EN0_INT5 00000020

Symbol: NVIC_EN0_INT5
   Definitions
      At line 33 in file UARTInts.s
   Uses
      At line 290 in file UARTInts.s
Comment: NVIC_EN0_INT5 used once
NVIC_EN0_R E000E100



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols


Symbol: NVIC_EN0_R
   Definitions
      At line 34 in file UARTInts.s
   Uses
      At line 289 in file UARTInts.s
Comment: NVIC_EN0_R used once
NVIC_PRI1_R E000E404

Symbol: NVIC_PRI1_R
   Definitions
      At line 35 in file UARTInts.s
   Uses
      At line 283 in file UARTInts.s
Comment: NVIC_PRI1_R used once
SPA 00000020

Symbol: SPA
   Definitions
      At line 139 in file UARTInts.s
   Uses
      None
Comment: SPA unused
SYSCTL_ALTCLKCFG_ALTCLK_M 0000000F

Symbol: SYSCTL_ALTCLKCFG_ALTCLK_M
   Definitions
      At line 89 in file UARTInts.s
   Uses
      At line 242 in file UARTInts.s
Comment: SYSCTL_ALTCLKCFG_ALTCLK_M used once
SYSCTL_ALTCLKCFG_ALTCLK_PIOSC 00000000

Symbol: SYSCTL_ALTCLKCFG_ALTCLK_PIOSC
   Definitions
      At line 90 in file UARTInts.s
   Uses
      At line 244 in file UARTInts.s
Comment: SYSCTL_ALTCLKCFG_ALTCLK_PIOSC used once
SYSCTL_ALTCLKCFG_R 400FE138

Symbol: SYSCTL_ALTCLKCFG_R
   Definitions
      At line 88 in file UARTInts.s
   Uses
      At line 239 in file UARTInts.s
Comment: SYSCTL_ALTCLKCFG_R used once
SYSCTL_PRGPIO_R 400FEA08

Symbol: SYSCTL_PRGPIO_R
   Definitions
      At line 98 in file UARTInts.s
   Uses
      At line 253 in file UARTInts.s
Comment: SYSCTL_PRGPIO_R used once
SYSCTL_PRGPIO_R0 00000001

Symbol: SYSCTL_PRGPIO_R0
   Definitions



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

      At line 99 in file UARTInts.s
   Uses
      At line 256 in file UARTInts.s
Comment: SYSCTL_PRGPIO_R0 used once
SYSCTL_PRUART_R 400FEA18

Symbol: SYSCTL_PRUART_R
   Definitions
      At line 100 in file UARTInts.s
   Uses
      At line 186 in file UARTInts.s
Comment: SYSCTL_PRUART_R used once
SYSCTL_PRUART_R0 00000001

Symbol: SYSCTL_PRUART_R0
   Definitions
      At line 101 in file UARTInts.s
   Uses
      At line 189 in file UARTInts.s
Comment: SYSCTL_PRUART_R0 used once
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 92 in file UARTInts.s
   Uses
      At line 178 in file UARTInts.s
Comment: SYSCTL_RCGCGPIO_R used once
SYSCTL_RCGCGPIO_R0 00000001

Symbol: SYSCTL_RCGCGPIO_R0
   Definitions
      At line 93 in file UARTInts.s
   Uses
      At line 180 in file UARTInts.s
Comment: SYSCTL_RCGCGPIO_R0 used once
SYSCTL_RCGCUART_R 400FE618

Symbol: SYSCTL_RCGCUART_R
   Definitions
      At line 95 in file UARTInts.s
   Uses
      At line 173 in file UARTInts.s
Comment: SYSCTL_RCGCUART_R used once
SYSCTL_RCGCUART_R0 00000001

Symbol: SYSCTL_RCGCUART_R0
   Definitions
      At line 96 in file UARTInts.s
   Uses
      At line 175 in file UARTInts.s
Comment: SYSCTL_RCGCUART_R0 used once
UART0_CC_R 4000CFC8

Symbol: UART0_CC_R
   Definitions
      At line 83 in file UARTInts.s
   Uses
      At line 233 in file UARTInts.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

Comment: UART0_CC_R used once
UART0_CTL_R 4000C030

Symbol: UART0_CTL_R
   Definitions
      At line 57 in file UARTInts.s
   Uses
      At line 192 in file UARTInts.s
      At line 247 in file UARTInts.s

UART0_DR_R 4000C000

Symbol: UART0_DR_R
   Definitions
      At line 41 in file UARTInts.s
   Uses
      At line 312 in file UARTInts.s
      At line 342 in file UARTInts.s

UART0_FBRD_R 4000C028

Symbol: UART0_FBRD_R
   Definitions
      At line 47 in file UARTInts.s
   Uses
      At line 200 in file UARTInts.s
Comment: UART0_FBRD_R used once
UART0_FR_R 4000C018

Symbol: UART0_FR_R
   Definitions
      At line 42 in file UARTInts.s
   Uses
      At line 303 in file UARTInts.s
      At line 328 in file UARTInts.s

UART0_IBRD_R 4000C024

Symbol: UART0_IBRD_R
   Definitions
      At line 46 in file UARTInts.s
   Uses
      At line 197 in file UARTInts.s
Comment: UART0_IBRD_R used once
UART0_ICR_R 4000C044

Symbol: UART0_ICR_R
   Definitions
      At line 77 in file UARTInts.s
   Uses
      At line 421 in file UARTInts.s
      At line 442 in file UARTInts.s
      At line 454 in file UARTInts.s
      At line 466 in file UARTInts.s

UART0_IFLS_R 4000C034

Symbol: UART0_IFLS_R
   Definitions



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

      At line 61 in file UARTInts.s
   Uses
      At line 215 in file UARTInts.s
Comment: UART0_IFLS_R used once
UART0_IM_R 4000C038

Symbol: UART0_IM_R
   Definitions
      At line 65 in file UARTInts.s
   Uses
      At line 227 in file UARTInts.s
      At line 395 in file UARTInts.s
      At line 431 in file UARTInts.s

UART0_LCRH_R 4000C02C

Symbol: UART0_LCRH_R
   Definitions
      At line 49 in file UARTInts.s
   Uses
      At line 204 in file UARTInts.s
      At line 764 in file UARTInts.s
      At line 775 in file UARTInts.s
      At line 785 in file UARTInts.s
      At line 795 in file UARTInts.s

UART0_RIS_R 4000C03C

Symbol: UART0_RIS_R
   Definitions
      At line 71 in file UARTInts.s
   Uses
      At line 415 in file UARTInts.s
      At line 436 in file UARTInts.s
      At line 448 in file UARTInts.s
      At line 460 in file UARTInts.s

UART_CC_CS_M 0000000F

Symbol: UART_CC_CS_M
   Definitions
      At line 84 in file UARTInts.s
   Uses
      At line 235 in file UARTInts.s
Comment: UART_CC_CS_M used once
UART_CC_CS_PIOSC 00000005

Symbol: UART_CC_CS_PIOSC
   Definitions
      At line 86 in file UARTInts.s
   Uses
      At line 236 in file UARTInts.s
Comment: UART_CC_CS_PIOSC used once
UART_CC_CS_SYSCLK 00000000

Symbol: UART_CC_CS_SYSCLK
   Definitions
      At line 85 in file UARTInts.s
   Uses



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Absolute symbols

      None
Comment: UART_CC_CS_SYSCLK unused
UART_CTL_HSE 00000020

Symbol: UART_CTL_HSE
   Definitions
      At line 58 in file UARTInts.s
   Uses
      At line 249 in file UARTInts.s
Comment: UART_CTL_HSE used once
UART_CTL_UARTEN 00000001

Symbol: UART_CTL_UARTEN
   Definitions
      At line 59 in file UARTInts.s
   Uses
      At line 194 in file UARTInts.s
      At line 250 in file UARTInts.s

UART_FR_RXFE 00000010

Symbol: UART_FR_RXFE
   Definitions
      At line 45 in file UARTInts.s
   Uses
      At line 305 in file UARTInts.s
      At line 306 in file UARTInts.s

UART_FR_RXFF 00000040

Symbol: UART_FR_RXFF
   Definitions
      At line 43 in file UARTInts.s
   Uses
      None
Comment: UART_FR_RXFF unused
UART_FR_TXFF 00000020

Symbol: UART_FR_TXFF
   Definitions
      At line 44 in file UARTInts.s
   Uses
      At line 330 in file UARTInts.s
      At line 331 in file UARTInts.s

UART_ICR_PEIC 00000100

Symbol: UART_ICR_PEIC
   Definitions
      At line 78 in file UARTInts.s
   Uses
      At line 467 in file UARTInts.s
Comment: UART_ICR_PEIC used once
UART_ICR_RTIC 00000040

Symbol: UART_ICR_RTIC
   Definitions
      At line 79 in file UARTInts.s
   Uses



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Absolute symbols

      At line 455 in file UARTInts.s
Comment: UART_ICR_RTIC used once
UART_ICR_RXIC 00000010

Symbol: UART_ICR_RXIC
   Definitions
      At line 81 in file UARTInts.s
   Uses
      At line 443 in file UARTInts.s
Comment: UART_ICR_RXIC used once
UART_ICR_TXIC 00000020

Symbol: UART_ICR_TXIC
   Definitions
      At line 80 in file UARTInts.s
   Uses
      At line 422 in file UARTInts.s
Comment: UART_ICR_TXIC used once
UART_IFLS_RX1_8 00000000

Symbol: UART_IFLS_RX1_8
   Definitions
      At line 62 in file UARTInts.s
   Uses
      At line 220 in file UARTInts.s
Comment: UART_IFLS_RX1_8 used once
UART_IFLS_TX1_8 00000000

Symbol: UART_IFLS_TX1_8
   Definitions
      At line 63 in file UARTInts.s
   Uses
      At line 220 in file UARTInts.s
Comment: UART_IFLS_TX1_8 used once
UART_IM_PEIM 00000100

Symbol: UART_IM_PEIM
   Definitions
      At line 66 in file UARTInts.s
   Uses
      At line 230 in file UARTInts.s
Comment: UART_IM_PEIM used once
UART_IM_RTIM 00000040

Symbol: UART_IM_RTIM
   Definitions
      At line 67 in file UARTInts.s
   Uses
      At line 230 in file UARTInts.s
Comment: UART_IM_RTIM used once
UART_IM_RXIM 00000010

Symbol: UART_IM_RXIM
   Definitions
      At line 69 in file UARTInts.s
   Uses
      At line 230 in file UARTInts.s
Comment: UART_IM_RXIM used once
UART_IM_TXIM 00000020



ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Absolute symbols


Symbol: UART_IM_TXIM
   Definitions
      At line 68 in file UARTInts.s
   Uses
      At line 230 in file UARTInts.s
      At line 397 in file UARTInts.s
      At line 401 in file UARTInts.s
      At line 433 in file UARTInts.s

UART_LCRH_BRK 00000001

Symbol: UART_LCRH_BRK
   Definitions
      At line 55 in file UARTInts.s
   Uses
      At line 787 in file UARTInts.s
      At line 797 in file UARTInts.s

UART_LCRH_EPS 00000004

Symbol: UART_LCRH_EPS
   Definitions
      At line 53 in file UARTInts.s
   Uses
      At line 208 in file UARTInts.s
      At line 766 in file UARTInts.s
      At line 777 in file UARTInts.s

UART_LCRH_FEN 00000010

Symbol: UART_LCRH_FEN
   Definitions
      At line 52 in file UARTInts.s
   Uses
      At line 208 in file UARTInts.s
Comment: UART_LCRH_FEN used once
UART_LCRH_PEN 00000002

Symbol: UART_LCRH_PEN
   Definitions
      At line 54 in file UARTInts.s
   Uses
      At line 208 in file UARTInts.s
Comment: UART_LCRH_PEN used once
UART_LCRH_SPS 00000080

Symbol: UART_LCRH_SPS
   Definitions
      At line 50 in file UARTInts.s
   Uses
      At line 208 in file UARTInts.s
Comment: UART_LCRH_SPS used once
UART_LCRH_WLEN_8 00000060

Symbol: UART_LCRH_WLEN_8
   Definitions
      At line 51 in file UARTInts.s
   Uses



ARM Macro Assembler    Page 10 Alphabetic symbol ordering
Absolute symbols

      At line 208 in file UARTInts.s
Comment: UART_LCRH_WLEN_8 used once
UART_RIS_PERIS 00000100

Symbol: UART_RIS_PERIS
   Definitions
      At line 72 in file UARTInts.s
   Uses
      At line 462 in file UARTInts.s
      At line 463 in file UARTInts.s

UART_RIS_RTRIS 00000040

Symbol: UART_RIS_RTRIS
   Definitions
      At line 73 in file UARTInts.s
   Uses
      At line 450 in file UARTInts.s
      At line 451 in file UARTInts.s

UART_RIS_RXRIS 00000010

Symbol: UART_RIS_RXRIS
   Definitions
      At line 75 in file UARTInts.s
   Uses
      At line 438 in file UARTInts.s
      At line 439 in file UARTInts.s

UART_RIS_TXRIS 00000020

Symbol: UART_RIS_TXRIS
   Definitions
      At line 74 in file UARTInts.s
   Uses
      At line 417 in file UARTInts.s
      At line 418 in file UARTInts.s

67 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

DisableInterrupts 00000000

Symbol: DisableInterrupts
   Definitions
      At line 103 in file UARTInts.s
   Uses
      At line 171 in file UARTInts.s
Comment: DisableInterrupts used once
EnableInterrupts 00000000

Symbol: EnableInterrupts
   Definitions
      At line 104 in file UARTInts.s
   Uses
      At line 292 in file UARTInts.s
Comment: EnableInterrupts used once
EndCritical 00000000

Symbol: EndCritical
   Definitions
      At line 106 in file UARTInts.s
   Uses
      None
Comment: EndCritical unused
RxFifo_Get 00000000

Symbol: RxFifo_Get
   Definitions
      At line 122 in file UARTInts.s
   Uses
      At line 367 in file UARTInts.s
Comment: RxFifo_Get used once
RxFifo_Init 00000000

Symbol: RxFifo_Init
   Definitions
      At line 120 in file UARTInts.s
   Uses
      At line 183 in file UARTInts.s
Comment: RxFifo_Init used once
RxFifo_Put 00000000

Symbol: RxFifo_Put
   Definitions
      At line 121 in file UARTInts.s
   Uses
      At line 315 in file UARTInts.s
Comment: RxFifo_Put used once
RxFifo_Size 00000000

Symbol: RxFifo_Size
   Definitions
      At line 123 in file UARTInts.s
   Uses
      At line 308 in file UARTInts.s
Comment: RxFifo_Size used once
StartCritical 00000000

Symbol: StartCritical



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Definitions
      At line 105 in file UARTInts.s
   Uses
      None
Comment: StartCritical unused
Timer_BreakTime 00000000

Symbol: Timer_BreakTime
   Definitions
      At line 128 in file UARTInts.s
   Uses
      None
Comment: Timer_BreakTime unused
Timer_NoResponseTime 00000000

Symbol: Timer_NoResponseTime
   Definitions
      At line 131 in file UARTInts.s
   Uses
      None
Comment: Timer_NoResponseTime unused
Timer_NoResponseTime_stop 00000000

Symbol: Timer_NoResponseTime_stop
   Definitions
      At line 132 in file UARTInts.s
   Uses
      None
Comment: Timer_NoResponseTime_stop unused
Timer_PollingTime 00000000

Symbol: Timer_PollingTime
   Definitions
      At line 130 in file UARTInts.s
   Uses
      None
Comment: Timer_PollingTime unused
Timer_ResponseTime 00000000

Symbol: Timer_ResponseTime
   Definitions
      At line 126 in file UARTInts.s
   Uses
      None
Comment: Timer_ResponseTime unused
Timer_ResponseTime_stop 00000000

Symbol: Timer_ResponseTime_stop
   Definitions
      At line 127 in file UARTInts.s
   Uses
      None
Comment: Timer_ResponseTime_stop unused
Timer_SetupTime 00000000

Symbol: Timer_SetupTime
   Definitions
      At line 129 in file UARTInts.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
External symbols

      None
Comment: Timer_SetupTime unused
TxFifo_Get 00000000

Symbol: TxFifo_Get
   Definitions
      At line 118 in file UARTInts.s
   Uses
      At line 339 in file UARTInts.s
Comment: TxFifo_Get used once
TxFifo_Init 00000000

Symbol: TxFifo_Init
   Definitions
      At line 116 in file UARTInts.s
   Uses
      At line 184 in file UARTInts.s
Comment: TxFifo_Init used once
TxFifo_Put 00000000

Symbol: TxFifo_Put
   Definitions
      At line 117 in file UARTInts.s
   Uses
      At line 392 in file UARTInts.s
Comment: TxFifo_Put used once
TxFifo_Size 00000000

Symbol: TxFifo_Size
   Definitions
      At line 119 in file UARTInts.s
   Uses
      At line 333 in file UARTInts.s
      At line 428 in file UARTInts.s

WaitForInterrupt 00000000

Symbol: WaitForInterrupt
   Definitions
      At line 107 in file UARTInts.s
   Uses
      None
Comment: WaitForInterrupt unused
20 symbols
472 symbols in table
