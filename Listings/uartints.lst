


ARM Macro Assembler    Page 1 


    1 00000000         ; Modified by Josue Pinzon Vivas May 24, 2017
    2 00000000         ; UARTInts.s
    3 00000000         ; Runs on TM4C1294
    4 00000000         ; Use UART0 to implement bidirectional data transfer to 
                       and from a
    5 00000000         ; computer running HyperTerminal.  This time, interrupts
                        and FIFOs
    6 00000000         ; are used.
    7 00000000         ; This file is named "UARTInts" because it is the UART w
                       ith interrupts.
    8 00000000         ; Daniel Valvano
    9 00000000         ; May 29, 2014
   10 00000000         ; Modified by EE345L students Charlie Gough && Matt Hawk
                       
   11 00000000         ; Modified by EE345M students Agustinus Darmawan && Ming
                       jie Qiu
   12 00000000         
   13 00000000         ;  This example accompanies the book
   14 00000000         ;  "Embedded Systems: Real Time Interfacing to Arm Corte
                       x M Microcontrollers",
   15 00000000         ;  ISBN: 978-1463590154, Jonathan Valvano, copyright (c)
                        2014
   16 00000000         ;  Program 5.11 Section 5.6, Program 3.10
   17 00000000         ;
   18 00000000         ;Copyright 2014 by Jonathan W. Valvano, valvano@mail.ute
                       xas.edu
   19 00000000         ;   You may use, edit, run or distribute this file
   20 00000000         ;   as long as the above copyright notice remains
   21 00000000         ;THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHET
                       HER EXPRESS, IMPLIED
   22 00000000         ;OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WA
                       RRANTIES OF
   23 00000000         ;MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE AP
                       PLY TO THIS SOFTWARE.
   24 00000000         ;VALVANO SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR 
                       SPECIAL, INCIDENTAL,
   25 00000000         ;OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
   26 00000000         ;For more information about my classes, my research, and
                        my books, see
   27 00000000         ;http://users.ece.utexas.edu/~valvano/
   28 00000000         
   29 00000000         ; U0Rx (VCP receive) connected to PA0
   30 00000000         ; U0Tx (VCP transmit) connected to PA1
   31 00000000         ; Note: Connected LaunchPad JP4 and JP5 inserted paralle
                       l with long side of board.
   32 00000000         
   33 00000000 00000020 
                       NVIC_EN0_INT5
                               EQU              0x00000020  ; Interrupt 5 enabl
                                                            e
   34 00000000 E000E100 
                       NVIC_EN0_R
                               EQU              0xE000E100  ; IRQ 0 to 31 Set E
                                                            nable Register
   35 00000000 E000E404 
                       NVIC_PRI1_R
                               EQU              0xE000E404  ; IRQ 4 to 7 Priori
                                                            ty Register
   36 00000000 40058420 



ARM Macro Assembler    Page 2 


                       GPIO_PORTA_AFSEL_R
                               EQU              0x40058420
   37 00000000 40058510 
                       GPIO_PORTA_PUR_R
                               EQU              0x40058510
   38 00000000 4005851C 
                       GPIO_PORTA_DEN_R
                               EQU              0x4005851C
   39 00000000 40058528 
                       GPIO_PORTA_AMSEL_R
                               EQU              0x40058528
   40 00000000 4005852C 
                       GPIO_PORTA_PCTL_R
                               EQU              0x4005852C
   41 00000000 4000C000 
                       UART0_DR_R
                               EQU              0x4000C000
   42 00000000 4000C018 
                       UART0_FR_R
                               EQU              0x4000C018
   43 00000000 00000040 
                       UART_FR_RXFF
                               EQU              0x00000040  ; UART Receive FIFO
                                                             Full
   44 00000000 00000020 
                       UART_FR_TXFF
                               EQU              0x00000020  ; UART Transmit FIF
                                                            O Full
   45 00000000 00000010 
                       UART_FR_RXFE
                               EQU              0x00000010  ; UART Receive FIFO
                                                             Empty
   46 00000000 4000C024 
                       UART0_IBRD_R
                               EQU              0x4000C024
   47 00000000 4000C028 
                       UART0_FBRD_R
                               EQU              0x4000C028
   48 00000000         
   49 00000000 4000C02C 
                       UART0_LCRH_R
                               EQU              0x4000C02C
   50 00000000 00000080 
                       UART_LCRH_SPS
                               EQU              0x00000080  ; UART Stick Parity
                                                            
   51 00000000 00000060 
                       UART_LCRH_WLEN_8
                               EQU              0x00000060  ; 8 bit word length
                                                            
   52 00000000 00000010 
                       UART_LCRH_FEN
                               EQU              0x00000010  ; UART Enable FIFOs
                                                            
   53 00000000 00000004 
                       UART_LCRH_EPS
                               EQU              0x00000004  ; UART Even parity 
                                                            Select
   54 00000000 00000002 



ARM Macro Assembler    Page 3 


                       UART_LCRH_PEN
                               EQU              0x00000002  ; UART Parity Enabl
                                                            e
   55 00000000 00000001 
                       UART_LCRH_BRK
                               EQU              0x00000001  ; UART Send Break
   56 00000000         
   57 00000000 4000C030 
                       UART0_CTL_R
                               EQU              0x4000C030
   58 00000000 00000020 
                       UART_CTL_HSE
                               EQU              0x00000020  ; High-Speed Enable
                                                            
   59 00000000 00000001 
                       UART_CTL_UARTEN
                               EQU              0x00000001  ; UART Enable
   60 00000000         
   61 00000000 4000C034 
                       UART0_IFLS_R
                               EQU              0x4000C034
   62 00000000 00000000 
                       UART_IFLS_RX1_8
                               EQU              0x00000000  ; RX FIFO >= 1/8 fu
                                                            ll
   63 00000000 00000000 
                       UART_IFLS_TX1_8
                               EQU              0x00000000  ; TX FIFO <= 1/8 fu
                                                            ll
   64 00000000         
   65 00000000 4000C038 
                       UART0_IM_R
                               EQU              0x4000C038
   66 00000000 00000100 
                       UART_IM_PEIM
                               EQU              0x00000100  ; UART Parity Error
                                                             Interrupt Mask
   67 00000000 00000040 
                       UART_IM_RTIM
                               EQU              0x00000040  ; UART Receive Time
                                                            -Out Interrupt Mask
                                                            
   68 00000000 00000020 
                       UART_IM_TXIM
                               EQU              0x00000020  ; UART Transmit Int
                                                            errupt Mask
   69 00000000 00000010 
                       UART_IM_RXIM
                               EQU              0x00000010  ; UART Receive Inte
                                                            rrupt Mask
   70 00000000         
   71 00000000 4000C03C 
                       UART0_RIS_R
                               EQU              0x4000C03C
   72 00000000 00000100 
                       UART_RIS_PERIS
                               EQU              0x00000100  ; UART Parity Error
                                                             Interrupt Status
   73 00000000 00000040 



ARM Macro Assembler    Page 4 


                       UART_RIS_RTRIS
                               EQU              0x00000040  ; UART Receive Time
                                                            -Out Raw Interrupt 
                                                            Status
   74 00000000 00000020 
                       UART_RIS_TXRIS
                               EQU              0x00000020  ; UART Transmit Raw
                                                             Interrupt Status
   75 00000000 00000010 
                       UART_RIS_RXRIS
                               EQU              0x00000010  ; UART Receive Raw 
                                                            Interrupt Status
   76 00000000         
   77 00000000 4000C044 
                       UART0_ICR_R
                               EQU              0x4000C044
   78 00000000 00000100 
                       UART_ICR_PEIC
                               EQU              0x00000100  ; UART Parity Error
                                                             Interrupt Clear
   79 00000000 00000040 
                       UART_ICR_RTIC
                               EQU              0x00000040  ; Receive Time-Out 
                                                            Interrupt Clear
   80 00000000 00000020 
                       UART_ICR_TXIC
                               EQU              0x00000020  ; Transmit Interrup
                                                            t Clear
   81 00000000 00000010 
                       UART_ICR_RXIC
                               EQU              0x00000010  ; Receive Interrupt
                                                             Clear
   82 00000000         
   83 00000000 4000CFC8 
                       UART0_CC_R
                               EQU              0x4000CFC8
   84 00000000 0000000F 
                       UART_CC_CS_M
                               EQU              0x0000000F  ; UART Baud Clock S
                                                            ource
   85 00000000 00000000 
                       UART_CC_CS_SYSCLK
                               EQU              0x00000000  ; System clock (bas
                                                            ed on clock source 
                                                            and divisor factor)
                                                            
   86 00000000 00000005 
                       UART_CC_CS_PIOSC
                               EQU              0x00000005  ; PIOSC
   87 00000000         
   88 00000000 400FE138 
                       SYSCTL_ALTCLKCFG_R
                               EQU              0x400FE138
   89 00000000 0000000F 
                       SYSCTL_ALTCLKCFG_ALTCLK_M
                               EQU              0x0000000F  ; Alternate Clock S
                                                            ource
   90 00000000 00000000 
                       SYSCTL_ALTCLKCFG_ALTCLK_PIOSC



ARM Macro Assembler    Page 5 


                               EQU              0x00000000  ; PIOSC
   91 00000000         
   92 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   93 00000000 00000001 
                       SYSCTL_RCGCGPIO_R0
                               EQU              0x00000001  ; GPIO Port A Run M
                                                            ode Clock
   94 00000000         ; Gating Control
   95 00000000 400FE618 
                       SYSCTL_RCGCUART_R
                               EQU              0x400FE618
   96 00000000 00000001 
                       SYSCTL_RCGCUART_R0
                               EQU              0x00000001  ; UART Module 0 Run
                                                             Mode Clock
   97 00000000         ; Gating Control
   98 00000000 400FEA08 
                       SYSCTL_PRGPIO_R
                               EQU              0x400FEA08
   99 00000000 00000001 
                       SYSCTL_PRGPIO_R0
                               EQU              0x00000001  ; GPIO Port A Perip
                                                            heral Ready
  100 00000000 400FEA18 
                       SYSCTL_PRUART_R
                               EQU              0x400FEA18
  101 00000000 00000001 
                       SYSCTL_PRUART_R0
                               EQU              0x00000001  ; UART Module 0 Per
                                                            ipheral Ready
  102 00000000         
  103 00000000                 IMPORT           DisableInterrupts ; Disable int
                                                            errupts
  104 00000000                 IMPORT           EnableInterrupts 
                                                            ; Enable interrupts
                                                            
  105 00000000                 IMPORT           StartCritical ; previous I bit,
                                                             disable interrupts
                                                            
  106 00000000                 IMPORT           EndCritical ; restore I bit to 
                                                            previous value
  107 00000000                 IMPORT           WaitForInterrupt 
                                                            ; low power mode
  108 00000000         
  109 00000000         ; properties from FIFO.c
  110 00000000         ; size of the FIFOs (must be power of 2)
  111 00000000 00000010 
                       FIFOSIZE
                               EQU              16          ; (copy this value 
                                                            from both places in
                                                             FIFO.s)
  112 00000000 00000001 
                       FIFOSUCCESS
                               EQU              1           ; return value on s
                                                            uccess
  113 00000000 00000000 
                       FIFOFAIL



ARM Macro Assembler    Page 6 


                               EQU              0           ; return value on f
                                                            ailure
  114 00000000         
  115 00000000         ; functions from FIFO.s
  116 00000000                 IMPORT           TxFifo_Init
  117 00000000                 IMPORT           TxFifo_Put
  118 00000000                 IMPORT           TxFifo_Get
  119 00000000                 IMPORT           TxFifo_Size
  120 00000000                 IMPORT           RxFifo_Init
  121 00000000                 IMPORT           RxFifo_Put
  122 00000000                 IMPORT           RxFifo_Get
  123 00000000                 IMPORT           RxFifo_Size
  124 00000000         
  125 00000000         ;functions from GPTimer.s
  126 00000000                 IMPORT           Timer_ResponseTime
  127 00000000                 IMPORT           Timer_ResponseTime_stop
  128 00000000                 IMPORT           Timer_BreakTime
  129 00000000                 IMPORT           Timer_SetupTime
  130 00000000                 IMPORT           Timer_PollingTime
  131 00000000                 IMPORT           Timer_NoResponseTime
  132 00000000                 IMPORT           Timer_NoResponseTime_stop
  133 00000000         
  134 00000000         ;functions from Systick.s
  135 00000000                 IMPORT           delay
  136 00000000                 IMPORT           SysTick_Init_Count
  137 00000000                 IMPORT           SysTick_Check_Count
  138 00000000         
  139 00000000         ; standard ASCII symbols
  140 00000000 0000000D 
                       CR      EQU              0x0D
  141 00000000 0000000A 
                       LF      EQU              0x0A
  142 00000000 00000008 
                       BS      EQU              0x08
  143 00000000 0000001B 
                       ESC     EQU              0x1B
  144 00000000 00000020 
                       SPA     EQU              0x20
  145 00000000 0000007F 
                       DEL     EQU              0x7F
  146 00000000         
  147 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
  148 00000000                 THUMB
  149 00000000                 EXPORT           UART_Init
  150 00000000                 EXPORT           UART_InChar
  151 00000000                 EXPORT           UART_OutChar
  152 00000000                 EXPORT           UART0_Handler
  153 00000000                 EXPORT           UART_OutString
  154 00000000                 EXPORT           UART_InUDec
  155 00000000                 EXPORT           UART_OutUDec
  156 00000000                 EXPORT           UART_InUHex
  157 00000000                 EXPORT           UART_OutUHex
  158 00000000                 EXPORT           UART_InString
  159 00000000                 EXPORT           UART_HighStickParity
  160 00000000                 EXPORT           UART_LowStickParity
  161 00000000                 EXPORT           UART_SendBreak
  162 00000000                 EXPORT           UART_SendBreak_Disable
  163 00000000         ; require C function calls to preserve the 8-byte alignm



ARM Macro Assembler    Page 7 


                       ent of 8-byte data objects
  164 00000000                 PRESERVE8
  165 00000000         
  166 00000000         ;------------UART_Init------------
  167 00000000         ; Initialize UART0 for 9,600 baud rate (clock from 16 MH
                       z PIOSC),
  168 00000000         ; 8 bit word length, stick parity, one stop bit, FIFOs e
                       nabled, interrupt
  169 00000000         ; after >= 2 characters received or <= 2 characters to t
                       ransmit or timeout
  170 00000000         ; Rx with pull-up
  171 00000000         ; Input: none
  172 00000000         ; Output: none
  173 00000000         ; Modifies: R0, R1
  174 00000000         UART_Init
  175 00000000 B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  176 00000002 F7FF FFFE       BL               DisableInterrupts ; disable all
                                                             interrupts (critic
                                                            al section)
  177 00000006         ; activate clock for UART0
  178 00000006 49FE            LDR              R1, =SYSCTL_RCGCUART_R ; R1 = &
                                                            SYSCTL_RCGCUART_R
  179 00000008 6808            LDR              R0, [R1]    ; R0 = [R1]
  180 0000000A F040 0001       ORR              R0, R0, #SYSCTL_RCGCUART_R0 ; R
                                                            0 = R0|SYSCTL_RCGCU
                                                            ART_R0
  181 0000000E 6008            STR              R0, [R1]    ; [R1] = R0
  182 00000010         ; activate clock for port A
  183 00000010 49FC            LDR              R1, =SYSCTL_RCGCGPIO_R ; R1 = &
                                                            SYSCTL_RCGCGPIO_R
  184 00000012 6808            LDR              R0, [R1]    ; R0 = [R1]
  185 00000014 F040 0001       ORR              R0, R0, #SYSCTL_RCGCGPIO_R0 ; R
                                                            0 = R0|SYSCTL_RCGCG
                                                            PIO_R0
  186 00000018 6008            STR              R0, [R1]    ; [R1] = R0
  187 0000001A         ; initialize empty FIFOs
  188 0000001A F7FF FFFE       BL               RxFifo_Init
  189 0000001E F7FF FFFE       BL               TxFifo_Init
  190 00000022         ; allow time for clock to stabilize
  191 00000022 49F9            LDR              R1, =SYSCTL_PRUART_R ; R1 = &SY
                                                            SCTL_PRUART_R
  192 00000024         UART0initloop
  193 00000024 6808            LDR              R0, [R1]    ; R0 = [R1] (value)
                                                            
  194 00000026 F010 0001       ANDS             R0, R0, #SYSCTL_PRUART_R0 ; R0 
                                                            = R0&SYSCTL_PRUART_
                                                            R0
  195 0000002A D0FB            BEQ              UART0initloop ; if(R0 == 0), ke
                                                            ep polling
  196 0000002C         ; disable UART
  197 0000002C 49F7            LDR              R1, =UART0_CTL_R 
                                                            ; R1 = &UART0_CTL_R
                                                            
  198 0000002E 6808            LDR              R0, [R1]    ; R0 = [R1]
  199 00000030 F020 0001       BIC              R0, R0, #UART_CTL_UARTEN ; R0 =
                                                             R0&~UART_CTL_UARTE
                                                            N (disable UART)
  200 00000034 6008            STR              R0, [R1]    ; [R1] = R0



ARM Macro Assembler    Page 8 


  201 00000036         ; set the baud rate (equations on p845 of datasheet)
  202 00000036 49F6            LDR              R1, =UART0_IBRD_R ; R1 = &UART0
                                                            _IBRD_R
  203 00000038 F04F 0068       MOV              R0, #104    ; R0 = IBRD = int(1
                                                            6,000,000 / (16 * 9
                                                            ,600)) = int(104.16
                                                            6)
  204 0000003C 6008            STR              R0, [R1]    ; [R1] = R0
  205 0000003E 49F5            LDR              R1, =UART0_FBRD_R ; R1 = &UART0
                                                            _FBRD_R
  206 00000040 F04F 000B       MOV              R0, #11     ; R0 = FBRD = round
                                                            (0.166 * 64 + 0.5) 
                                                            = 11
  207 00000044 6008            STR              R0, [R1]    ; [R1] = R0
  208 00000046         ; configure Line Control Register settings
  209 00000046 49F4            LDR              R1, =UART0_LCRH_R ; R1 = &UART0
                                                            _LCRH_R
  210 00000048 6808            LDR              R0, [R1]    ; R0 = [R1]
  211 0000004A F020 00FF       BIC              R0, R0, #0xFF ; R0 = R0&~0xFF (
                                                            clear all fields)
  212 0000004E         ; 8 bit word length, LOW stick parity, one stop bit, FIF
                       Os
  213 0000004E F100 00F6       ADD              R0, R0, #(UART_LCRH_WLEN_8+UART
_LCRH_FEN+UART_LCRH_PEN+UART_LCRH_EPS+UART_LCRH_SPS)
  214 00000052         ; importante:
  215 00000052         ; Puede ser que haya que desactivar FIFO
  216 00000052         ;
  217 00000052         
  218 00000052 6008            STR              R0, [R1]    ; [R1] = R0
  219 00000054         ; configure Interrupt FIFO Level Select Register setting
                       s
  220 00000054 49F1            LDR              R1, =UART0_IFLS_R ; R1 = &UART0
                                                            _IFLS_R
  221 00000056 6808            LDR              R0, [R1]    ; R0 = [R1]
  222 00000058 F020 003F       BIC              R0, R0, #0x3F ; R0 = R0&~0x3F (
                                                            clear TX and RX int
                                                            errupt FIFO level f
                                                            ields)
  223 0000005C         ; configure interrupt for TX FIFO <= 1/8 full
  224 0000005C         ; configure interrupt for RX FIFO >= 1/8 full
  225 0000005C F100 0000       ADD              R0, R0, #(UART_IFLS_TX1_8+UART_
IFLS_RX1_8)
  226 00000060 6008            STR              R0, [R1]    ; [R1] = R0
  227 00000062         ; enable interrupts to be requested upon certain conditi
                       ons
  228 00000062         ; TX FIFO interrupt: when TX FIFO <= 2 elements (<= 1/8 
                       full, configured above)
  229 00000062         ; RX FIFO interrupt; when RX FIFO >= 2 elements (>= 1/8 
                       full, configured above)
  230 00000062         ; RX time-out interrupt: receive FIFO not empty and no m
                       ore data received in next 32-bit timeframe
  231 00000062         ;               (this causes an interrupt after each key
                       stroke, rather than every other keystroke)
  232 00000062 49EF            LDR              R1, =UART0_IM_R 
                                                            ; R1 = &UART0_IM_R
  233 00000064 6808            LDR              R0, [R1]    ; R0 = [R1]
  234 00000066         ; enable TX and RX FIFO interrupts, RX time-out interrup
                       t and Parity interrupt
  235 00000066 F440 70B8       ORR              R0, R0, #(UART_IM_RXIM+UART_IM_



ARM Macro Assembler    Page 9 


TXIM+UART_IM_RTIM+UART_IM_PEIM)
  236 0000006A 6008            STR              R0, [R1]    ; [R1] = R0
  237 0000006C         ; UART gets its clock from the alternate clock source as
                        defined by SYSCTL_ALTCLKCFG_R
  238 0000006C 49ED            LDR              R1, =UART0_CC_R 
                                                            ; R1 = &UART0_CC_R
  239 0000006E 6808            LDR              R0, [R1]    ; R0 = [R1]
  240 00000070 F020 000F       BIC              R0, R0, #UART_CC_CS_M ; R0 = R0
                                                            &~UART_CC_CS_M (cle
                                                            ar clock source fie
                                                            ld)
  241 00000074 F100 0005       ADD              R0, R0, #UART_CC_CS_PIOSC ; R0 
                                                            = R0+UART_CC_CS_PIO
                                                            SC (configure for a
                                                            lternate clock sour
                                                            ce for UART0)
  242 00000078 6008            STR              R0, [R1]    ; [R1] = R0
  243 0000007A         ; the alternate clock source is the PIOSC (default)
  244 0000007A 49EB            LDR              R1, =SYSCTL_ALTCLKCFG_R ; R1 = 
                                                            &SYSCTL_ALTCLKCFG_R
                                                            
  245 0000007C 6808            LDR              R0, [R1]    ; R0 = [R1]
  246 0000007E         ; R0 = R0&~SYSCTL_ALTCLKCFG_ALTCLK_M (clear alternate cl
                       ock source field)
  247 0000007E F020 000F       BIC              R0, R0, #SYSCTL_ALTCLKCFG_ALTCL
K_M
  248 00000082         ; R0 = R0+SYSCTL_ALTCLKCFG_ALTCLK_PIOSC (configure for P
                       IOSC as alternate clock source)
  249 00000082 F100 0000       ADD              R0, R0, #SYSCTL_ALTCLKCFG_ALTCL
K_PIOSC
  250 00000086 6008            STR              R0, [R1]    ; [R1] = R0
  251 00000088         ; enable UART
  252 00000088 49E0            LDR              R1, =UART0_CTL_R 
                                                            ; R1 = &UART0_CTL_R
                                                            
  253 0000008A 6808            LDR              R0, [R1]    ; R0 = [R1]
  254 0000008C F020 0020       BIC              R0, R0, #UART_CTL_HSE ; R0 = R0
                                                            &~UART_CTL_HSE (hig
                                                            h-speed disable; di
                                                            vide clock by 16 ra
                                                            ther than 8 (defaul
                                                            t))
  255 00000090 F040 0001       ORR              R0, R0, #UART_CTL_UARTEN ; R0 =
                                                             R0|UART_CTL_UARTEN
                                                             (enable UART)
  256 00000094 6008            STR              R0, [R1]    ; [R1] = R0
  257 00000096         ; allow time for clock to stabilize
  258 00000096 49E5            LDR              R1, =SYSCTL_PRGPIO_R ; R1 = &SY
                                                            SCTL_PRGPIO_R
  259 00000098         GPIOAinitloop
  260 00000098 6808            LDR              R0, [R1]    ; R0 = [R1] (value)
                                                            
  261 0000009A F010 0001       ANDS             R0, R0, #SYSCTL_PRGPIO_R0 ; R0 
                                                            = R0&SYSCTL_PRGPIO_
                                                            R0
  262 0000009E D0FB            BEQ              GPIOAinitloop ; if(R0 == 0), ke
                                                            ep polling
  263 000000A0         ; enable alternate function
  264 000000A0 49E3            LDR              R1, =GPIO_PORTA_AFSEL_R ; R1 = 



ARM Macro Assembler    Page 10 


                                                            &GPIO_PORTA_AFSEL_R
                                                            
  265 000000A2 6808            LDR              R0, [R1]    ; R0 = [R1]
  266 000000A4 F040 0003       ORR              R0, R0, #0x03 ; R0 = R0|0x03 (e
                                                            nable alt funct on 
                                                            PA1-0)
  267 000000A8 6008            STR              R0, [R1]    ; [R1] = R0
  268 000000AA         ; activa resistencia pull-up in RX (PA0)
  269 000000AA 49E2            LDR              R1, =GPIO_PORTA_PUR_R ; R1 = &G
                                                            PIO_PORTA_PUR_R
  270 000000AC F040 0001       ORR              R0, #0x01   ; set bit 0 (enable
                                                             pull-up res in PA0
                                                            )
  271 000000B0 6008            STR              R0, [R1]
  272 000000B2         ; enable digital port
  273 000000B2 49E1            LDR              R1, =GPIO_PORTA_DEN_R ; R1 = &G
                                                            PIO_PORTA_DEN_R
  274 000000B4 6808            LDR              R0, [R1]    ; R0 = [R1]
  275 000000B6 F040 0003       ORR              R0, R0, #0x03 ; R0 = R0|0x03 (e
                                                            nable digital I/O o
                                                            n PA1-0)
  276 000000BA 6008            STR              R0, [R1]    ; [R1] = R0
  277 000000BC         ; configure as UART
  278 000000BC 49DF            LDR              R1, =GPIO_PORTA_PCTL_R ; R1 = &
                                                            GPIO_PORTA_PCTL_R
  279 000000BE 6808            LDR              R0, [R1]    ; R0 = [R1]
  280 000000C0 F020 00FF       BIC              R0, R0, #0x000000FF ; R0 = R0&~
                                                            0x000000FF (clear p
                                                            ort control field f
                                                            or PA1-0)
  281 000000C4 F100 0011       ADD              R0, R0, #0x00000011 ; R0 = R0+0
                                                            x00000011 (configur
                                                            e PA1-0 as UART)
  282 000000C8 6008            STR              R0, [R1]    ; [R1] = R0
  283 000000CA         ; disable analog functionality
  284 000000CA 49DD            LDR              R1, =GPIO_PORTA_AMSEL_R ; R1 = 
                                                            &GPIO_PORTA_AMSEL_R
                                                            
  285 000000CC F04F 0000       MOV              R0, #0      ; R0 = 0 (disable a
                                                            nalog functionality
                                                             on PA)
  286 000000D0 6008            STR              R0, [R1]    ; [R1] = R0
  287 000000D2         ; set the priority of the UART interrupt
  288 000000D2 49DC            LDR              R1, =NVIC_PRI1_R 
                                                            ; R1 = &NVIC_PRI1_R
                                                            
  289 000000D4 6808            LDR              R0, [R1]    ; R0 = [R1]
  290 000000D6 F420 407F       BIC              R0, R0, #0x0000FF00 ; R0 = R0&~
                                                            0xFFFF00FF (clear N
                                                            VIC priority field 
                                                            for UART0 interrupt
                                                            )
  291 000000DA F500 4080       ADD              R0, R0, #0x00004000 ; R0 = R0+0
                                                            x00004000 (UART0 = 
                                                            priority 2; stored 
                                                            in bits 13-15)
  292 000000DE 6008            STR              R0, [R1]    ; [R1] = R0
  293 000000E0         ; enable interrupt 5 in NVIC
  294 000000E0 49D9            LDR              R1, =NVIC_EN0_R 



ARM Macro Assembler    Page 11 


                                                            ; R1 = &NVIC_EN0_R
  295 000000E2 F04F 0020       LDR              R0, =NVIC_EN0_INT5 ; R0 = NVIC_
                                                            EN0_INT5 (zeros wri
                                                            tten to enable regi
                                                            ster have no effect
                                                            )
  296 000000E6 6008            STR              R0, [R1]    ; [R1] = R0
  297 000000E8 F7FF FFFE       BL               EnableInterrupts ; enable all i
                                                            nterrupts (end of c
                                                            ritical section)
  298 000000EC BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return)
  299 000000EE         
  300 000000EE         ; private helper subroutine
  301 000000EE         ; copy from hardware RX FIFO to software RX FIFO
  302 000000EE         ; stop when hardware RX FIFO is empty or software RX FIF
                       O is full
  303 000000EE         ; Modifies: R0, R1
  304 000000EE         copyHardwareToSoftware
  305 000000EE B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  306 000000F0         h2sloop
  307 000000F0         ; repeat the loop while (hardware receive FIFO not empty
                       ) and (software receive FIFO not full)
  308 000000F0 49D6            LDR              R1, =UART0_FR_R 
                                                            ; R1 = &UART0_FR_R
  309 000000F2 6808            LDR              R0, [R1]    ; R0 = [R1]
  310 000000F4 F000 0010       AND              R0, R0, #UART_FR_RXFE ; R0 = R0
                                                            &UART_FR_RXFE
  311 000000F8 2810            CMP              R0, #UART_FR_RXFE ; is R0 (UART
                                                            0_FR_R&UART_FR_RXFE
                                                            ) == UART_FR_RXFE? 
                                                            (is hardware receiv
                                                            e FIFO empty?)
  312 000000FA D008            BEQ              h2sdone     ; if so, skip to 'h
                                                            2sdone'
  313 000000FC F7FF FFFE       BL               RxFifo_Size
  314 00000100 280F            CMP              R0, #(FIFOSIZE - 1) ; is R0 (Rx
                                                            Fifo_Size()) == (FI
                                                            FOSIZE - 1)? (is so
                                                            ftware receive FIFO
                                                             full?)
  315 00000102 D004            BEQ              h2sdone     ; if so, skip to 'h
                                                            2sdone'
  316 00000104         ; read a character from the hardware FIFO
  317 00000104 49D2            LDR              R1, =UART0_DR_R 
                                                            ; R1 = &UART0_DR_R
  318 00000106 6808            LDR              R0, [R1]    ; R0 = [R1]
  319 00000108         ; store R0 (UART0_DR_R) in software receive FIFO
  320 00000108 F7FF FFFE       BL               RxFifo_Put
  321 0000010C E7F0            B                h2sloop     ; unconditional bra
                                                            nch to 'h2sloop'
  322 0000010E         h2sdone
  323 0000010E BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return)
  324 00000110         
  325 00000110         ; private helper subroutine



ARM Macro Assembler    Page 12 


  326 00000110         ; copy from software TX FIFO to hardware TX FIFO
  327 00000110         ; stop when software TX FIFO is empty or hardware TX FIF
                       O is full
  328 00000110         ; Modifies: R0, R1
  329 00000110         copySoftwareToHardware
  330 00000110 B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  331 00000112         s2hloop
  332 00000112         ; repeat the loop while (hardware transmit FIFO not full
                       ) and (software transmit FIFO not empty)
  333 00000112 49CE            LDR              R1, =UART0_FR_R 
                                                            ; R1 = &UART0_FR_R
  334 00000114 6808            LDR              R0, [R1]    ; R0 = [R1]
  335 00000116 F000 0020       AND              R0, R0, #UART_FR_TXFF ; R0 = R0
                                                            &UART_FR_TXFF
  336 0000011A 2820            CMP              R0, #UART_FR_TXFF ; is R0 (UART
                                                            0_FR_R&UART_FR_TXFF
                                                            ) == UART_FR_TXFF? 
                                                            (is hardware transm
                                                            it FIFO full?)
  337 0000011C D00B            BEQ              s2hdone     ; if so, skip to 's
                                                            2hdone'
  338 0000011E F7FF FFFE       BL               TxFifo_Size
  339 00000122 2800            CMP              R0, #0      ; is R0 (TxFifo_Siz
                                                            e()) == 0? (is soft
                                                            ware transmit FIFO 
                                                            empty?)
  340 00000124 D007            BEQ              s2hdone     ; if so, skip to 's
                                                            2hdone'
  341 00000126         ; read a character from the software FIFO
  342 00000126 B401            PUSH             {R0}        ; allocate local va
                                                            riable
  343 00000128 4668            MOV              R0, SP      ; R0 = SP (R0 point
                                                            s to local variable
                                                            )
  344 0000012A F7FF FFFE       BL               TxFifo_Get  ; get from software
                                                             transmit FIFO into
                                                             pointer R0
  345 0000012E BC01            POP              {R0}        ; pop data into R0
  346 00000130         ; store R0 (data from TxFifo_Get()) in hardware transmit
                        FIFO
  347 00000130 49C7            LDR              R1, =UART0_DR_R 
                                                            ; R1 = &UART0_DR_R
  348 00000132 6008            STR              R0, [R1]    ; [R1] = R0
  349 00000134 E7ED            B                s2hloop     ; unconditional bra
                                                            nch to 'h2sloop'
  350 00000136         s2hdone
  351 00000136 BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return)
  352 00000138         
  353 00000138         ;------------UART_InChar------------
  354 00000138         ; input ASCII character from UART
  355 00000138         ; spin if RxFifo is empty
  356 00000138         ; Input: none
  357 00000138         ; Output: R0  character in from UART
  358 00000138         ; Very Important: The UART0 interrupt handler automatica
                       lly
  359 00000138         ;  empties the hardware receive FIFO into the software F



ARM Macro Assembler    Page 13 


                       IFO as
  360 00000138         ;  the hardware gets data.  If the UART0 interrupt is
  361 00000138         ;  disabled, the software receive FIFO may become empty,
                        and
  362 00000138         ;  this function will stall forever.
  363 00000138         ;  Ensure that the UART0 module is initialized and its
  364 00000138         ;  interrupt is enabled before calling this function.  D
                       o not
  365 00000138         ;  use UART I/O functions within a critical section of y
                       our
  366 00000138         ;  main program.
  367 00000138         UART_InChar
  368 00000138 F04F 0000       MOV              R0, #0      ; initialize local 
                                                            variable
  369 0000013C B505            PUSH             {R0,R2,LR}  ; save current valu
                                                            e of LR and allocat
                                                            e local variable
  370 0000013E F04F 0005       MOV              R0,#5       ; R0 = 5
  371 00000142 F7FF FFFE       BL               SysTick_Init_Count ; init count
                                                            
  372 00000146         inCharLoop
  373 00000146 F7FF FFFE       BL               SysTick_Check_Count
  374 0000014A 2801            CMP              R0,#1       ; R0 == 1? (time re
                                                            sponse)?
  375 0000014C D005            BEQ              inChar_time_response_out ; if n
                                                            o, no response, go 
                                                            to inChar_time_resp
                                                            onse_out
  376 0000014E 4668            MOV              R0, SP      ; R0 = SP (R0 point
                                                            s to local variable
                                                            )
  377 00000150 F7FF FFFE       BL               RxFifo_Get  ; get from software
                                                             receive FIFO into 
                                                            pointer R0
  378 00000154 2800            CMP              R0, #FIFOFAIL ; is R0 (RxFifo_G
                                                            et()) == FIFOFAIL (
                                                            value returned when
                                                             FIFO empty)?
  379 00000156 D0F6            BEQ              inCharLoop  ; if so, skip to 'i
                                                            nCharLoop' (spin un
                                                            til receive a chara
                                                            cter)
  380 00000158 BD05            POP              {R0,R2, PC} ; pop data into R0 
                                                            and restore LR into
                                                             PC (return)
  381 0000015A         inChar_time_response_out
  382 0000015A F04F 0000       MOV              R0,#0       ; R0 = 0 (no data)
  383 0000015E F04F 0101       MOV              R1,#1       ; R1 = 1 response t
                                                            ime, out
  384 00000162 BD05            POP              {R0,R2, PC} ; pop data into R0 
                                                            and restore LR into
                                                             PC (return)
  385 00000164         
  386 00000164         ;------------UART_OutChar------------
  387 00000164         ; output ASCII character to UART
  388 00000164         ; spin if TxFifo is full
  389 00000164         ; Input: R0  character out to UART
  390 00000164         ; Output: none
  391 00000164         ; Modifies: R0, R1



ARM Macro Assembler    Page 14 


  392 00000164         ; Very Important: The UART0 interrupt handler automatica
                       lly
  393 00000164         ;  empties the software transmit FIFO into the hardware 
                       FIFO as
  394 00000164         ;  the hardware sends data.  If the UART0 interrupt is
  395 00000164         ;  disabled, the software transmit FIFO may become full,
                        and
  396 00000164         ;  this function will stall forever.
  397 00000164         ;  Ensure that the UART0 module is initialized and its
  398 00000164         ;  interrupt is enabled before calling this function.  D
                       o not
  399 00000164         ;  use UART I/O functions within a critical section of y
                       our
  400 00000164         ;  main program.
  401 00000164         UART_OutChar
  402 00000164 B53C            PUSH             {R2,R3,R4, R5,LR} ; save curren
                                                            t value of R4 and L
                                                            R
  403 00000166 4604            MOV              R4, R0      ; R4 = R0 (save the
                                                             output character)
  404 00000168         outCharLoop
  405 00000168 4620            MOV              R0, R4      ; R0 = R4 (recall t
                                                            he output character
                                                            )
  406 0000016A F7FF FFFE       BL               TxFifo_Put  ; store R0 (output 
                                                            character) in softw
                                                            are transmit FIFO
  407 0000016E 2800            CMP              R0, #FIFOFAIL ; is R0 (TxFifo_P
                                                            ut()) == FIFOFAIL (
                                                            value returned when
                                                             FIFO full)?
  408 00000170 D0FA            BEQ              outCharLoop ; if so, skip to 'o
                                                            utCharLoop' (spin u
                                                            ntil space in softw
                                                            are transmit FIFO)
  409 00000172 4CAB            LDR              R4, =UART0_IM_R 
                                                            ; R4 = &UART0_IM_R
  410 00000174 6820            LDR              R0, [R4]    ; R0 = [R4]
  411 00000176 F020 0020       BIC              R0, R0, #UART_IM_TXIM ; R0 = R0
                                                            &~UART_IM_TXIM (dis
                                                            able TX FIFO interr
                                                            upt)
  412 0000017A 6020            STR              R0, [R4]    ; [R4] = R0
  413 0000017C F7FF FFC8       BL               copySoftwareToHardware ; privat
                                                            e helper subroutine
                                                            
  414 00000180 6820            LDR              R0, [R4]    ; R0 = [R4]
  415 00000182 F040 0020       ORR              R0, R0, #UART_IM_TXIM ; R0 = R0
                                                            |UART_IM_TXIM (enab
                                                            le TX FIFO interrup
                                                            t)
  416 00000186 6020            STR              R0, [R4]    ; [R4] = R0
  417 00000188 BD3C            POP              {R2,R3,R4,  R5, PC} ; restore p
                                                            revious value of R4
                                                             into R4 and LR int
                                                            o PC (return)
  418 0000018A         
  419 0000018A         ;------------UART0_Handler------------
  420 0000018A         ; at least one of three things has happened:



ARM Macro Assembler    Page 15 


  421 0000018A         ; hardware TX FIFO goes from 3 to 2 or less items
  422 0000018A         ; hardware RX FIFO goes from 1 to 2 or more items
  423 0000018A         ; UART receiver has timed out
  424 0000018A         ; received byte with stick parity bit in HIGH
  425 0000018A         UART0_Handler
  426 0000018A B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  427 0000018C         ; check the flags to determine which interrupt condition
                        occurred
  428 0000018C         handlerCheck0
  429 0000018C 49B1            LDR              R1, =UART0_RIS_R 
                                                            ; R1 = &UART0_RIS_R
                                                            
  430 0000018E 6808            LDR              R0, [R1]    ; R0 = [R1]
  431 00000190 F000 0020       AND              R0, R0, #UART_RIS_TXRIS ; R0 = 
                                                            R0&UART_RIS_TXRIS
  432 00000194 2820            CMP              R0, #UART_RIS_TXRIS ; is R0 (UA
                                                            RT0_RIS_R&UART_RIS_
                                                            TXRIS) == UART_RIS_
                                                            TXRIS? (does hardwa
                                                            re TX FIFO have <= 
                                                            2 items?)
  433 00000196 D10E            BNE              handlerCheck1 ; if not, skip to
                                                             'handlerCheck1' an
                                                            d check the next fl
                                                            ag
  434 00000198         ; acknowledge TX FIFO interrupt
  435 00000198 49AF            LDR              R1, =UART0_ICR_R 
                                                            ; R1 = &UART0_ICR_R
                                                            
  436 0000019A F04F 0020       LDR              R0, =UART_ICR_TXIC ; R0 = UART_
                                                            ICR_TXIC (zeros wri
                                                            tten to interrupt c
                                                            lear register have 
                                                            no effect)
  437 0000019E 6008            STR              R0, [R1]    ; [R1] = R0
  438 000001A0         ; copy from software TX FIFO to hardware TX FIFO
  439 000001A0 F7FF FFB6       BL               copySoftwareToHardware ; privat
                                                            e helper subroutine
                                                            
  440 000001A4         ; if the software transmit FIFO is now empty, disable TX
                        FIFO interrupt
  441 000001A4         ; UART_OutChar() will re-enable the TX FIFO interrupt wh
                       en it is needed
  442 000001A4 F7FF FFFE       BL               TxFifo_Size
  443 000001A8 2800            CMP              R0, #0      ; is R0 (TxFifo_Siz
                                                            e()) == 0? (is soft
                                                            ware transmit FIFO 
                                                            empty?)
  444 000001AA D104            BNE              handlerCheck1 ; if not, skip to
                                                             'handlerCheck1'
  445 000001AC 499C            LDR              R1, =UART0_IM_R 
                                                            ; R1 = &UART0_IM_R
  446 000001AE 6808            LDR              R0, [R1]    ; R0 = [R1]
  447 000001B0 F020 0020       BIC              R0, R0, #UART_IM_TXIM ; R0 = R0
                                                            &~UART_IM_TXIM (dis
                                                            able TX FIFO interr
                                                            upt)
  448 000001B4 6008            STR              R0, [R1]    ; [R1] = R0



ARM Macro Assembler    Page 16 


  449 000001B6         handlerCheck1
  450 000001B6 49A7            LDR              R1, =UART0_RIS_R 
                                                            ; R1 = &UART0_RIS_R
                                                            
  451 000001B8 6808            LDR              R0, [R1]    ; R0 = [R1]
  452 000001BA F000 0010       AND              R0, R0, #UART_RIS_RXRIS ; R0 = 
                                                            R0&UART_RIS_RXRIS
  453 000001BE 2810            CMP              R0, #UART_RIS_RXRIS ; is R0 (UA
                                                            RT0_RIS_R&UART_RIS_
                                                            RXRIS) == UART_RIS_
                                                            RXRIS? (does hardwa
                                                            re RX FIFO have >= 
                                                            2 items?)
  454 000001C0 D105            BNE              handlerCheck2 ; if not, skip to
                                                             'handlerCheck2' an
                                                            d check the next fl
                                                            ag
  455 000001C2         ; acknowledge RX FIFO interrupt
  456 000001C2 49A5            LDR              R1, =UART0_ICR_R 
                                                            ; R1 = &UART0_ICR_R
                                                            
  457 000001C4 F04F 0010       LDR              R0, =UART_ICR_RXIC ; R0 = UART_
                                                            ICR_RXIC (zeros wri
                                                            tten to interrupt c
                                                            lear register have 
                                                            no effect)
  458 000001C8 6008            STR              R0, [R1]    ; [R1] = R0
  459 000001CA         ; copy from hardware RX FIFO to software RX FIFO
  460 000001CA F7FF FF90       BL               copyHardwareToSoftware ; privat
                                                            e helper subroutine
                                                            
  461 000001CE         handlerCheck2
  462 000001CE 49A1            LDR              R1, =UART0_RIS_R 
                                                            ; R1 = &UART0_RIS_R
                                                            
  463 000001D0 6808            LDR              R0, [R1]    ; R0 = [R1]
  464 000001D2 F000 0040       AND              R0, R0, #UART_RIS_RTRIS ; R0 = 
                                                            R0&UART_RIS_RTRIS
  465 000001D6 2840            CMP              R0, #UART_RIS_RTRIS ; is R0 (UA
                                                            RT0_RIS_R&UART_RIS_
                                                            RTRIS) == UART_RIS_
                                                            RTRIS? (did the rec
                                                            eiver timeout?)
  466 000001D8 D105            BNE              handlerCheck3 ; if not, skip to
                                                             'handlerDone'
  467 000001DA         ; acknowledge receiver timeout interrupt
  468 000001DA 499F            LDR              R1, =UART0_ICR_R 
                                                            ; R1 = &UART0_ICR_R
                                                            
  469 000001DC F04F 0040       LDR              R0, =UART_ICR_RTIC ; R0 = UART_
                                                            ICR_RTIC (zeros wri
                                                            tten to interrupt c
                                                            lear register have 
                                                            no effect)
  470 000001E0 6008            STR              R0, [R1]    ; [R1] = R0
  471 000001E2         ; copy from hardware RX FIFO to software RX FIFO
  472 000001E2 F7FF FF84       BL               copyHardwareToSoftware ; privat
                                                            e helper subroutine
                                                            



ARM Macro Assembler    Page 17 


  473 000001E6         handlerCheck3
  474 000001E6 499B            LDR              R1, =UART0_RIS_R 
                                                            ; R1 = &UART0_RIS_R
                                                            
  475 000001E8 6808            LDR              R0, [R1]    ; R0 = [R1]
  476 000001EA F400 7080       AND              R0, R0, #UART_RIS_PERIS ; R0 = 
                                                            R0&UART_RIS_PERIS
  477 000001EE F5B0 7F80       CMP              R0, #UART_RIS_PERIS ; is R0 (UA
                                                            RT0_RIS_R&UART_RIS_
                                                            PERIS) == UART_RIS_
                                                            PERIS? (did the par
                                                            ity error?)
  478 000001F2 D105            BNE              handlerDone ; if not, skip to '
                                                            handlerDone'
  479 000001F4         ; acknowledge parity error interrupt
  480 000001F4 4998            LDR              R1, =UART0_ICR_R 
                                                            ; R1 = &UART0_ICR_R
                                                            
  481 000001F6 F44F 7080       LDR              R0, =UART_ICR_PEIC ; R0 = UART_
                                                            ICR_PEIC (zeros wri
                                                            tten to interrupt c
                                                            lear register have 
                                                            no effect)
  482 000001FA 6008            STR              R0, [R1]    ; [R1] = R0
  483 000001FC         ;update personal flag R5
  484 000001FC F04F 0501       MOV              R5, #1      ; R5 = 1 
  485 00000200         handlerDone
  486 00000200 BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return from inter
                                                            rupt)
  487 00000202         
  488 00000202         ;------------UART_OutString------------
  489 00000202         ; Output String (NULL termination)
  490 00000202         ; Input: R0  pointer to a NULL-terminated string to be t
                       ransferred
  491 00000202         ; Output: none
  492 00000202         UART_OutString
  493 00000202 B510            PUSH             {R4, LR}    ; save current valu
                                                            e of R4 and LR
  494 00000204 4604            MOV              R4, R0      ; R4 = R0 (save the
                                                             string pointer)
  495 00000206         outStringLoop
  496 00000206 7820            LDRB             R0, [R4]    ; R0 = [R4] (R0 get
                                                            s unsigned characte
                                                            r pointed to by R4,
                                                             promoted to 32 bit
                                                            s)
  497 00000208 2800            CMP              R0, #0      ; is R0 (next chara
                                                            cter in string) == 
                                                            0 (NULL)?
  498 0000020A D004            BEQ              outStringDone ; if so, skip to 
                                                            'outStringDone'
  499 0000020C F7FF FFFE       BL               UART_OutChar ; send the charact
                                                            er to the UART
  500 00000210 F104 0401       ADD              R4, R4, #1  ; R4 = R4 + 1 (incr
                                                            ement string pointe
                                                            r)
  501 00000214 E7F7            B                outStringLoop ; unconditional b



ARM Macro Assembler    Page 18 


                                                            ranch to 'outString
                                                            Loop'
  502 00000216         outStringDone
  503 00000216 BD10            POP              {R4, PC}    ; restore previous 
                                                            value of R4 into R4
                                                             and LR into PC (re
                                                            turn)
  504 00000218         
  505 00000218         ;------------UART_InUDec------------
  506 00000218         ; InUDec accepts ASCII input in unsigned decimal format
  507 00000218         ;     and converts to a 32-bit unsigned number
  508 00000218         ;     valid range is 0 to 4294967295 (2^32-1)
  509 00000218         ; Input: none
  510 00000218         ; Output: R0  32-bit unsigned number
  511 00000218         ; If you enter a number above 4294967295, it will return
                        an incorrect value
  512 00000218         ; Backspace will remove last digit typed
  513 00000218         UART_InUDec
  514 00000218 B530            PUSH             {R4, R5, LR} ; save current val
                                                            ue of R4, R5, and L
                                                            R
  515 0000021A F04F 0400       MOV              R4, #0      ; R4 = 0 (number = 
                                                            0)
  516 0000021E F04F 0500       MOV              R5, #0      ; R5 = 0 (length = 
                                                            0)
  517 00000222         inUDecLoop
  518 00000222         ; accepts characters until <enter> is typed
  519 00000222 F7FF FFFE       BL               UART_InChar ; get a character f
                                                            rom the UART
  520 00000226 280D            CMP              R0, #CR     ; is R0 (most recen
                                                            t character) == 0x0
                                                            D (<enter>)?
  521 00000228 D01C            BEQ              inUDecDone  ; if so, skip to 'i
                                                            nUDecDone'
  522 0000022A         ; check if the input is a digit, 0-9
  523 0000022A         ; if the character is not 0-9, it is ignored and not ech
                       oed
  524 0000022A 2830            CMP              R0, #'0'    ; is R0 (most recen
                                                            t character) < '0'?
                                                            
  525 0000022C D30D            BLO              inUDecNAN   ; if so, skip to 'i
                                                            nUDecNAN'
  526 0000022E 2839            CMP              R0, #'9'    ; is R0 (most recen
                                                            t character) > '9'?
                                                            
  527 00000230 D80B            BHI              inUDecNAN   ; if so, skip to 'i
                                                            nUDecNAN'
  528 00000232 F04F 010A       MOV              R1, #10     ; R1 = 10
  529 00000236 FB04 F401       MUL              R4, R4, R1  ; R4 = R4*R1 (numbe
                                                            r = number*10)
  530 0000023A 4404            ADD              R4, R4, R0  ; R4 = R4 + R0 (num
                                                            ber = number*10 + c
                                                            haracter)
  531 0000023C F1A4 0430       SUB              R4, R4, #'0' ; R4 = R4 - '0' (n
                                                            umber = number*10 +
                                                             character - '0')
  532 00000240 F105 0501       ADD              R5, R5, #1  ; R5 = R5 + 1 (leng
                                                            th = length + 1)
  533 00000244 F7FF FFFE       BL               UART_OutChar ; echo the charact



ARM Macro Assembler    Page 19 


                                                            er to the UART
  534 00000248 E7EB            B                inUDecLoop  ; unconditional bra
                                                            nch to 'inUDecLoop'
                                                            
  535 0000024A         inUDecNAN
  536 0000024A         ; if the input is a backspace, then the return number is
                       
  537 0000024A         ; changed and a backspace is outputted to the screen
  538 0000024A 2808            CMP              R0, #BS     ; is R0 (most recen
                                                            t character) == 0x0
                                                            8 (<backspace>)?
  539 0000024C D1E9            BNE              inUDecLoop  ; if not, skip to '
                                                            inUDecLoop'
  540 0000024E 2D00            CMP              R5, #0      ; is R5 (length) ==
                                                             0?
  541 00000250 D0E7            BEQ              inUDecLoop  ; if so, skip to 'i
                                                            nUDecLoop'
  542 00000252 F04F 010A       MOV              R1, #10     ; R1 = 10
  543 00000256 FBB4 F4F1       UDIV             R4, R4, R1  ; R4 = R4/R1 (numbe
                                                            r = number/10)
  544 0000025A F1A5 0501       SUB              R5, R5, #1  ; R5 = R5 - 1 (leng
                                                            th = length - 1)
  545 0000025E F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  546 00000262         ;    MOV R0, #SPA                    ; R0 = SPA (<space>
                       )
  547 00000262         ;    BL  UART_OutChar                ; echo additional <
                       space> to the UART
  548 00000262         ;    MOV R0, #BS                     ; R0 = BS (<backspa
                       ce>)
  549 00000262         ;    BL  UART_OutChar                ; echo additional <
                       backspace> to the UART
  550 00000262 E7DE            B                inUDecLoop  ; unconditional bra
                                                            nch to 'inUDecLoop'
                                                            
  551 00000264         inUDecDone
  552 00000264 4620            MOV              R0, R4      ; R0 = R4 (return '
                                                            number' in R0)
  553 00000266 BD30            POP              {R4, R5, PC} ; restore previous
                                                             value of R4 into R
                                                            4, R5 into R5, and 
                                                            LR into PC (return)
                                                            
  554 00000268         
  555 00000268         ;Modulus macro from Section 5.4
  556 00000268         ;Mod and Divnd must not be the same register
  557 00000268                 MACRO
  558 00000268                 UMOD             $Mod,$Divnd,$Divsr ;MOD,DIVIDEN
                                                            D,DIVISOR
  559 00000268                 UDIV             $Mod,$Divnd,$Divsr ;Mod = DIVID
                                                            END/DIVISOR
  560 00000268                 MUL              $Mod,$Mod,$Divsr ;Mod = DIVISOR
                                                            *(DIVIDEND/DIVISOR)
                                                            
  561 00000268                 SUB              $Mod,$Divnd,$Mod ;Mod = DIVIDEN
                                                            D-DIVISOR*(DIVIDEND
                                                            /DIVISOR)
  562 00000268                 MEND
  563 00000268         



ARM Macro Assembler    Page 20 


  564 00000268         ;-----------------------UART_OutUDec--------------------
                       ---
  565 00000268         ; Output a 32-bit number in unsigned decimal format
  566 00000268         ; Input: R0  32-bit number to be transferred
  567 00000268         ; Output: none
  568 00000268         ; Variable format 1-10 digits with no space before or af
                       ter
  569 00000268         UART_OutUDec
  570 00000268         ; This function uses recursion to convert decimal number
                       
  571 00000268         ;   of unspecified length as an ASCII string
  572 00000268 B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  573 0000026A 280A            CMP              R0, #10     ; is R0 (number) < 
                                                            10?
  574 0000026C D310            BLO              outUDecDone ; if so, skip to 'o
                                                            utUDecDone'
  575 0000026E         ; R0 (number) >= 10
  576 0000026E         ; recursive call to UART_OutUDec with R0/10 (number/10)
  577 0000026E B401            PUSH             {R0}        ; save current valu
                                                            e of R0 (number)
  578 00000270 F04F 010A       MOV              R1, #10     ; R1 = 10
  579 00000274 FBB0 F0F1       UDIV             R0, R0, R1  ; R0 = R0/R1 (numbe
                                                            r = number/10)
  580 00000278 F7FF FFFE       BL               UART_OutUDec
  581 0000027C BC01            POP              {R0}        ; restore previous 
                                                            value of R0 into R0
                                                            
  582 0000027E         ; extract the ones digit of R0 (number) with R0 = R0%10
  583 0000027E F04F 010A       MOV              R1, #10     ; R1 = 10
  584 00000282 4602            MOV              R2, R0      ; R2 = R0 (temporar
                                                            ily holds number)
  585 00000284                 UMOD             R0, R2, R1  ; R0 = R2%R1 (numbe
                                                            r = number%10)
  559 00000284 FBB2 F0F1       UDIV             R0,R2,R1    ;Mod = DIVIDEND/DIV
                                                            ISOR
  560 00000288 FB00 F001       MUL              R0,R0,R1    ;Mod = DIVISOR*(DIV
                                                            IDEND/DIVISOR)
  561 0000028C EBA2 0000       SUB              R0,R2,R0    ;Mod = DIVIDEND-DIV
                                                            ISOR*(DIVIDEND/DIVI
                                                            SOR)
  586 00000290         outUDecDone
  587 00000290         ; R0 (number) is between 0 and 9
  588 00000290 F100 0030       ADD              R0, R0, #'0' ; R0 = R0 + '0' (n
                                                            umber = number + '0
                                                            ')
  589 00000294 F7FF FFFE       BL               UART_OutChar ; send the charact
                                                            er to the UART
  590 00000298 BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return)
  591 0000029A         
  592 0000029A         ;---------------------UART_InUHex-----------------------
                       -----------------
  593 0000029A         ; Accepts ASCII input in unsigned hexadecimal (base 16) 
                       format
  594 0000029A         ; Input: none
  595 0000029A         ; Output: R0  32-bit unsigned number
  596 0000029A         ; No '$' or '0x' need be entered, just the 1 to 8 hex di



ARM Macro Assembler    Page 21 


                       gits
  597 0000029A         ; It will convert lower case a-f to uppercase A-F
  598 0000029A         ;     and converts to a 32-bit unsigned number
  599 0000029A         ;     value range is 0 to FFFFFFFF
  600 0000029A         ; If you enter a number above FFFFFFFF, it will return a
                       n incorrect value
  601 0000029A         ; Backspace will remove last digit typed
  602 0000029A         UART_InUHex
  603 0000029A B530            PUSH             {R4, R5, LR} ; save current val
                                                            ue of R4, R5, and L
                                                            R
  604 0000029C F04F 0400       MOV              R4, #0      ; R4 = 0 (number = 
                                                            0)
  605 000002A0 F04F 0500       MOV              R5, #0      ; R5 = 0 (length = 
                                                            0)
  606 000002A4         inUHexLoop
  607 000002A4         ; accepts characters until <enter> is typed
  608 000002A4 F7FF FFFE       BL               UART_InChar ; get a character f
                                                            rom the UART
  609 000002A8 280D            CMP              R0, #CR     ; is R0 (most recen
                                                            t character) == 0x0
                                                            D (<enter>)?
  610 000002AA D040            BEQ              inUHexDone  ; if so, skip to 'i
                                                            nUHexDone'
  611 000002AC         ; check if the input is a digit, 0-9
  612 000002AC         ; if the character is not 0-9, check for other valid inp
                       ut
  613 000002AC 2830            CMP              R0, #'0'    ; is R0 (most recen
                                                            t character) < '0'?
                                                            
  614 000002AE D30D            BLO              inUHexNotDigit ; if so, skip to
                                                             'inUHexNotDigit'
  615 000002B0 2839            CMP              R0, #'9'    ; is R0 (most recen
                                                            t character) > '9'?
                                                            
  616 000002B2 D80B            BHI              inUHexNotDigit ; if so, skip to
                                                             'inUHexNotDigit'
  617 000002B4 F04F 0110       MOV              R1, #0x10   ; R1 = 0x10 = 16
  618 000002B8 FB04 F401       MUL              R4, R4, R1  ; R4 = R4*R1 (numbe
                                                            r = number*16)
  619 000002BC 4404            ADD              R4, R4, R0  ; R4 = R4 + R0 (num
                                                            ber = number*16 + c
                                                            haracter)
  620 000002BE F1A4 0430       SUB              R4, R4, #'0' ; R4 = R4 - '0' (n
                                                            umber = number*16 +
                                                             character - '0')
  621 000002C2 F105 0501       ADD              R5, R5, #1  ; R5 = R5 + 1 (leng
                                                            th = length + 1)
  622 000002C6 F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  623 000002CA E7EB            B                inUHexLoop  ; unconditional bra
                                                            nch to 'inUHexLoop'
                                                            
  624 000002CC         inUHexNotDigit
  625 000002CC         ; check if the input is an uppercase letter, 'A'-'F'
  626 000002CC 2841            CMP              R0, #'A'    ; is R0 (most recen
                                                            t character) < 'A'?
                                                            
  627 000002CE D30F            BLO              inUHexNotUpper ; if so, skip to



ARM Macro Assembler    Page 22 


                                                             'inUHexNotUpper'
  628 000002D0 2846            CMP              R0, #'F'    ; is R0 (most recen
                                                            t character) > 'F'?
                                                            
  629 000002D2 D80D            BHI              inUHexNotUpper ; if so, skip to
                                                             'inUHexNotUpper'
  630 000002D4 F04F 0110       MOV              R1, #0x10   ; R1 = 0x10 = 16
  631 000002D8 FB04 F401       MUL              R4, R4, R1  ; R4 = R4*R1 (numbe
                                                            r = number*16)
  632 000002DC 4404            ADD              R4, R4, R0  ; R4 = R4 + R0 (num
                                                            ber = number*16 + c
                                                            haracter)
  633 000002DE F1A4 0441       SUB              R4, R4, #'A' ; R4 = R4 - '0' (n
                                                            umber = number*16 +
                                                             character - 'A')
  634 000002E2 F104 040A       ADD              R4, R4, #0xA ; R4 = R4 + 0xA (n
                                                            umber = number*16 +
                                                             character - 'A' + 
                                                            10)
  635 000002E6 F105 0501       ADD              R5, R5, #1  ; R5 = R5 + 1 (leng
                                                            th = length + 1)
  636 000002EA F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  637 000002EE E7D9            B                inUHexLoop  ; unconditional bra
                                                            nch to 'inUHexLoop'
                                                            
  638 000002F0         inUHexNotUpper
  639 000002F0         ; check if the input is a lowercase letter, 'a'-'f'
  640 000002F0 2861            CMP              R0, #'a'    ; is R0 (most recen
                                                            t character) < 'a'?
                                                            
  641 000002F2 D30F            BLO              inUHexOther ; if so, skip to 'i
                                                            nUHexOther'
  642 000002F4 2866            CMP              R0, #'f'    ; is R0 (most recen
                                                            t character) > 'f'?
                                                            
  643 000002F6 D80D            BHI              inUHexOther ; if so, skip to 'i
                                                            nUHexOther'
  644 000002F8 F04F 0110       MOV              R1, #0x10   ; R1 = 0x10 = 16
  645 000002FC FB04 F401       MUL              R4, R4, R1  ; R4 = R4*R1 (numbe
                                                            r = number*16)
  646 00000300 4404            ADD              R4, R4, R0  ; R4 = R4 + R0 (num
                                                            ber = number*16 + c
                                                            haracter)
  647 00000302 F1A4 0461       SUB              R4, R4, #'a' ; R4 = R4 - '0' (n
                                                            umber = number*16 +
                                                             character - 'a')
  648 00000306 F104 040A       ADD              R4, R4, #0xA ; R4 = R4 + 0xA (n
                                                            umber = number*16 +
                                                             character - 'a' + 
                                                            10)
  649 0000030A F105 0501       ADD              R5, R5, #1  ; R5 = R5 + 1 (leng
                                                            th = length + 1)
  650 0000030E F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  651 00000312 E7C7            B                inUHexLoop  ; unconditional bra
                                                            nch to 'inUHexLoop'
                                                            
  652 00000314         inUHexOther



ARM Macro Assembler    Page 23 


  653 00000314         ; if the input is a backspace, then the return number is
                       
  654 00000314         ; changed and a backspace is outputted to the screen
  655 00000314 2808            CMP              R0, #BS     ; is R0 (most recen
                                                            t character) == 0x0
                                                            8 (<backspace>)?
  656 00000316 D1C5            BNE              inUHexLoop  ; if not, skip to '
                                                            inUHexLoop'
  657 00000318 2D00            CMP              R5, #0      ; is R5 (length) ==
                                                             0?
  658 0000031A D0C3            BEQ              inUHexLoop  ; if so, skip to 'i
                                                            nUHexLoop'
  659 0000031C F04F 0110       MOV              R1, #0x10   ; R1 = 0x10 = 16
  660 00000320 FBB4 F4F1       UDIV             R4, R4, R1  ; R4 = R4/R1 (numbe
                                                            r = number/16)
  661 00000324 F1A5 0501       SUB              R5, R5, #1  ; R5 = R5 - 1 (leng
                                                            th = length - 1)
  662 00000328 F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  663 0000032C         ;    MOV R0, #SPA                    ; R0 = SPA (<space>
                       )
  664 0000032C         ;    BL  UART_OutChar                ; echo additional <
                       space> to the UART
  665 0000032C         ;    MOV R0, #BS                     ; R0 = BS (<backspa
                       ce>)
  666 0000032C         ;    BL  UART_OutChar                ; echo additional <
                       backspace> to the UART
  667 0000032C E7BA            B                inUHexLoop  ; unconditional bra
                                                            nch to 'inUHexLoop'
                                                            
  668 0000032E         inUHexDone
  669 0000032E 4620            MOV              R0, R4      ; R0 = R4 (return '
                                                            number' in R0)
  670 00000330 BD30            POP              {R4, R5, PC} ; restore previous
                                                             value of R4 into R
                                                            4, R5 into R5, and 
                                                            LR into PC (return)
                                                            
  671 00000332         
  672 00000332         ;--------------------------UART_OutUHex-----------------
                       -----------
  673 00000332         ; Output a 32-bit number in unsigned hexadecimal format
  674 00000332         ; Input: R0  32-bit number to be transferred
  675 00000332         ; Output: none
  676 00000332         ; Variable format 1 to 8 digits with no space before or 
                       after
  677 00000332         UART_OutUHex
  678 00000332         ; This function uses recursion to convert the number of
  679 00000332         ;   unspecified length as an ASCII string
  680 00000332 B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  681 00000334 2810            CMP              R0, #0x10   ; is R0 (number) < 
                                                            16?
  682 00000336 D315            BLO              outUHexOneDigit ; if so, skip t
                                                            o 'outUHexOneDigit'
                                                            
  683 00000338         outUHexManyDigits
  684 00000338         ; R0 (number) >= 16
  685 00000338         ; recursive call to UART_OutUHex with R0/0x10 (number/0x



ARM Macro Assembler    Page 24 


                       10)
  686 00000338 B401            PUSH             {R0}        ; save current valu
                                                            e of R0 (number)
  687 0000033A F04F 0110       MOV              R1, #0x10   ; R1 = 0x10 = 16
  688 0000033E FBB0 F0F1       UDIV             R0, R0, R1  ; R0 = R0/R1 (numbe
                                                            r = number/0x10)
  689 00000342 F7FF FFFE       BL               UART_OutUHex
  690 00000346 BC01            POP              {R0}        ; restore previous 
                                                            value of R0 into R0
                                                            
  691 00000348         ; recursive call to UART_OutUHex with R0%0x10 (number%0x
                       10)
  692 00000348 B401            PUSH             {R0}        ; save current valu
                                                            e of R0 (number)
  693 0000034A F04F 0110       MOV              R1, #0x10   ; R1 = 0x10 = 16
  694 0000034E 4602            MOV              R2, R0      ; R2 = R0 (temporar
                                                            ily holds number)
  695 00000350                 UMOD             R0, R2, R1  ; R0 = R2%R1 (numbe
                                                            r = number%0x10)
  559 00000350 FBB2 F0F1       UDIV             R0,R2,R1    ;Mod = DIVIDEND/DIV
                                                            ISOR
  560 00000354 FB00 F001       MUL              R0,R0,R1    ;Mod = DIVISOR*(DIV
                                                            IDEND/DIVISOR)
  561 00000358 EBA2 0000       SUB              R0,R2,R0    ;Mod = DIVIDEND-DIV
                                                            ISOR*(DIVIDEND/DIVI
                                                            SOR)
  696 0000035C F7FF FFFE       BL               UART_OutUHex
  697 00000360 BC01            POP              {R0}        ; restore previous 
                                                            value of R0 into R0
                                                            
  698 00000362 E00C            B                outUHexDone ; unconditional bra
                                                            nch to 'outUHexDone
                                                            '
  699 00000364         outUHexOneDigit
  700 00000364         ; R0 (number) is between 0 and 15
  701 00000364 280A            CMP              R0, #0xA    ; is R0 (number) < 
                                                            10?
  702 00000366 D306            BLO              outUHexOneNumber ; if so, skip 
                                                            to 'outUHexOneNumbe
                                                            r'
  703 00000368         outUHexOneLetter
  704 00000368         ; R0 (number) is between 10 and 15
  705 00000368         ; convert R0 to a character between 'A' and 'F'
  706 00000368 F1A0 000A       SUB              R0, R0, #0xA ; R0 = R0 - 10 (nu
                                                            mber = number - 0xA
                                                            )
  707 0000036C F100 0041       ADD              R0, R0, #'A' ; R0 = R0 + 'A' (n
                                                            umber = number - 0x
                                                            A + 'A')
  708 00000370 F7FF FFFE       BL               UART_OutChar ; send the charact
                                                            er to the UART
  709 00000374 E003            B                outUHexDone ; unconditional bra
                                                            nch to 'outUHexDone
                                                            '
  710 00000376         outUHexOneNumber
  711 00000376         ; R0 (number) is between 0 and 9
  712 00000376         ; convert R0 to a character between '0' and '9'
  713 00000376 F100 0030       ADD              R0, R0, #'0' ; R0 = R0 + 'A' (n
                                                            umber = number + '0



ARM Macro Assembler    Page 25 


                                                            ')
  714 0000037A F7FF FFFE       BL               UART_OutChar ; send the charact
                                                            er to the UART
  715 0000037E         outUHexDone
  716 0000037E BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return)
  717 00000380         
  718 00000380         ;------------UART_InString------------
  719 00000380         ; Accepts ASCII characters from the serial port
  720 00000380         ;    and adds them to a string until <enter> is typed
  721 00000380         ;    or until max length of the string is reached.
  722 00000380         ; It echoes each character as it is inputted.
  723 00000380         ; If a backspace is inputted, the string is modified
  724 00000380         ;    and the backspace is echoed
  725 00000380         ; terminates the string with a null character
  726 00000380         ; uses busy-waiting synchronization on RDRF
  727 00000380         ; Input: R0  pointer to empty buffer
  728 00000380         ;        R1  number of non-NULL characters that can
  729 00000380         ;            fit in the buffer (in other words size-1)
  730 00000380         ; Output: R0  pointer to NULL-terminated string
  731 00000380         ; -- Modified by Agustinus Darmawan + Mingjie Qiu --
  732 00000380         UART_InString
  733 00000380 B570            PUSH             {R4, R5, R6, LR} ; save current
                                                             value of R4, R5, R
                                                            6, and LR
  734 00000382 4604            MOV              R4, R0      ; R4 = R0 (save the
                                                             buffer pointer par
                                                            ameter)
  735 00000384 F04F 0500       MOV              R5, #0      ; R5 = 0 (length = 
                                                            0)
  736 00000388 460E            MOV              R6, R1      ; R6 = R1 (save the
                                                             max length paramet
                                                            er)
  737 0000038A         inStringLoop
  738 0000038A         ; accepts characters until <enter> is typed
  739 0000038A F7FF FFFE       BL               UART_InChar ; get a character f
                                                            rom the UART
  740 0000038E 280D            CMP              R0, #CR     ; is R0 (most recen
                                                            t character) == 0x0
                                                            D (<enter>)?
  741 00000390 D014            BEQ              inStringDone ; if so, skip to '
                                                            inStringDone'
  742 00000392         ; if the input is a backspace, then the return string is
                       
  743 00000392         ; changed and a backspace is outputted to the screen
  744 00000392 2808            CMP              R0, #BS     ; is R0 (most recen
                                                            t character) == 0x0
                                                            8 (<backspace>)?
  745 00000394 D108            BNE              inStringCont ; if not, skip to 
                                                            'inStringCont'
  746 00000396 2D00            CMP              R5, #0      ; is R5 (length) ==
                                                             0?
  747 00000398 D0F7            BEQ              inStringLoop ; if so, skip to '
                                                            inStringLoop'
  748 0000039A F1A4 0401       SUB              R4, R4, #1  ; R4 = R4 - 1 (buff
                                                            erPt = bufferPt - 1
                                                            )
  749 0000039E F1A5 0501       SUB              R5, R5, #1  ; R5 = R5 - 1 (leng



ARM Macro Assembler    Page 26 


                                                            th = length - 1)
  750 000003A2 F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  751 000003A6         ;    MOV R0, #SPA                    ; R0 = SPA (<space>
                       )
  752 000003A6         ;    BL  UART_OutChar                ; echo additional <
                       space> to the UART
  753 000003A6         ;    MOV R0, #BS                     ; R0 = BS (<backspa
                       ce>)
  754 000003A6         ;    BL  UART_OutChar                ; echo additional <
                       backspace> to the UART
  755 000003A6 E7F0            B                inStringLoop ; unconditional br
                                                            anch to 'inStringLo
                                                            op'
  756 000003A8         inStringCont
  757 000003A8         ; if the buffer has room for another character, add the
  758 000003A8         ; incoming character to the buffer
  759 000003A8 42B5            CMP              R5, R6      ; is R5 (length) ==
                                                             R6 (max length)?
  760 000003AA D0EE            BEQ              inStringLoop ; if so, skip to '
                                                            inUDecLoop'
  761 000003AC 7020            STRB             R0, [R4]    ; [R4] = R0 (store 
                                                            8 least significant
                                                             bits of R0 into lo
                                                            cation pointed to b
                                                            y R4)
  762 000003AE F104 0401       ADD              R4, R4, #1  ; R4 = R4 + 1 (buff
                                                            erPt = bufferPt + 1
                                                            )
  763 000003B2 F105 0501       ADD              R5, R5, #1  ; R5 = R5 + 1 (leng
                                                            th = length + 1)
  764 000003B6 F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  765 000003BA E7E6            B                inStringLoop ; unconditional br
                                                            anch to 'inStringLo
                                                            op'
  766 000003BC         inStringDone
  767 000003BC         ; NULL terminate the string
  768 000003BC F04F 0000       MOV              R0, #0      ; R0 = 0 = NULL
  769 000003C0 7020            STRB             R0, [R4]    ; [R4] = R0 (store 
                                                            R0 (NULL) into loca
                                                            tion pointed to by 
                                                            R4)
  770 000003C2 4620            MOV              R0, R4      ; R0 = R4 (return t
                                                            he buffer pointer i
                                                            n R0)
  771 000003C4 BD70            POP              {R4, R5, R6, PC} ; restore prev
                                                            ious value of R4 in
                                                            to R4, R5 into R5, 
                                                            R6 into R6, and LR 
                                                            into PC (return)
  772 000003C6         
  773 000003C6         ;------------UART_HighStickParity------------
  774 000003C6         ; Configura el SPS, EPS y PEN del UART0
  775 000003C6         ; para que el bit de paridad envie 1
  776 000003C6         UART_HighStickParity
  777 000003C6 B503            PUSH             {R0, R1, LR} ; save current val
                                                            ue of R0, R1 and LR
                                                            



ARM Macro Assembler    Page 27 


  778 000003C8 4913            LDR              R1, =UART0_LCRH_R ; R1 = &UART0
                                                            _LCRH_R
  779 000003CA 6808            LDR              R0, [R1]    ; R0 = [R1]
  780 000003CC F020 0004       BIC              R0, R0, #UART_LCRH_EPS 
                                                            ; HIGH Stick Parity
                                                            
  781 000003D0 6008            STR              R0, [R1]    ; [R1] = R0
  782 000003D2 BD03            POP              {R0, R1, PC} ; restore previous
                                                             value of R0 into R
                                                            0, R1 into R1, and 
                                                            LR into PC (return)
                                                            
  783 000003D4         
  784 000003D4         ;------------UART_LowStickParity------------
  785 000003D4         ; Configura el SPS, EPS y PEN del UART0
  786 000003D4         ; para que el bit de paridad envie 0
  787 000003D4         UART_LowStickParity
  788 000003D4 B503            PUSH             {R0, R1, LR} ; save current val
                                                            ue of R0, R1 and LR
                                                            
  789 000003D6 4910            LDR              R1, =UART0_LCRH_R ; R1 = &UART0
                                                            _LCRH_R
  790 000003D8 6808            LDR              R0, [R1]    ; R0 = [R1]
  791 000003DA F040 0004       ORR              R0, R0, #UART_LCRH_EPS 
                                                            ; LOW Stick Parity
  792 000003DE 6008            STR              R0, [R1]    ; [R1] = R0
  793 000003E0 BD03            POP              {R0, R1, PC} ; restore previous
                                                             value of R0 into R
                                                            0, R1 into R1, and 
                                                            LR into PC (return)
                                                            
  794 000003E2         
  795 000003E2         ;------------UART_SendBreak------------
  796 000003E2         ; Activa el SendBreak bit de la Uart
  797 000003E2         UART_SendBreak
  798 000003E2 B503            PUSH             {R0, R1, LR} ; save current val
                                                            ue of R0, R1 and LR
                                                            
  799 000003E4 490C            LDR              R1, =UART0_LCRH_R ; R1 = &UART0
                                                            _LCRH_R
  800 000003E6 6808            LDR              R0, [R1]    ; R0 = [R1]
  801 000003E8 F040 0001       ORR              R0, R0, #UART_LCRH_BRK 
                                                            ; Send Break Enable
                                                            
  802 000003EC 6008            STR              R0, [R1]    ; [R1] = R0
  803 000003EE BD03            POP              {R0, R1, PC} ; restore previous
                                                             value of R0 into R
                                                            0, R1 into R1, and 
                                                            LR into PC (return)
                                                            
  804 000003F0         
  805 000003F0         ;--------UART_SendBreak_Disable---------
  806 000003F0         ; Desactiva el SendBreak bit de la Uart
  807 000003F0         UART_SendBreak_Disable
  808 000003F0 B503            PUSH             {R0, R1, LR} ; save current val
                                                            ue of R0, R1 and LR
                                                            
  809 000003F2 4909            LDR              R1, =UART0_LCRH_R ; R1 = &UART0
                                                            _LCRH_R



ARM Macro Assembler    Page 28 


  810 000003F4 6808            LDR              R0, [R1]    ; R0 = [R1]
  811 000003F6 F020 0001       BIC              R0, R0, #UART_LCRH_BRK ; Send B
                                                            reak Disable
  812 000003FA 6008            STR              R0, [R1]    ; [R1] = R0
  813 000003FC BD03            POP              {R0, R1, PC} ; restore previous
                                                             value of R0 into R
                                                            0, R1 into R1, and 
                                                            LR into PC (return)
                                                            
  814 000003FE         
  815 000003FE 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  816 00000400                 END                          ; end of file
              400FE618 
              400FE608 
              400FEA18 
              4000C030 
              4000C024 
              4000C028 
              4000C02C 
              4000C034 
              4000C038 
              4000CFC8 
              400FE138 
              400FEA08 
              40058420 
              40058510 
              4005851C 
              4005852C 
              40058528 
              E000E404 
              E000E100 
              4000C018 
              4000C000 
              4000C03C 
              4000C044 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\uartints.d -o.\objects\uartints.o -IC:\Users\mode_\Do
cuments\Fmat\MicroControladores\KeilProjects\Cash_flow\RTE\_Target_1 -IC:\Keil_
v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 -IC:\Keil_v5\ARM\CMSIS\I
nclude --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 522" --p
redefine="TM4C1294NCPDT SETA 1" --list=.\listings\uartints.lst UARTInts.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 147 in file UARTInts.s
   Uses
      None
Comment: .text unused
GPIOAinitloop 00000098

Symbol: GPIOAinitloop
   Definitions
      At line 259 in file UARTInts.s
   Uses
      At line 262 in file UARTInts.s
Comment: GPIOAinitloop used once
UART0_Handler 0000018A

Symbol: UART0_Handler
   Definitions
      At line 425 in file UARTInts.s
   Uses
      At line 152 in file UARTInts.s
Comment: UART0_Handler used once
UART0initloop 00000024

Symbol: UART0initloop
   Definitions
      At line 192 in file UARTInts.s
   Uses
      At line 195 in file UARTInts.s
Comment: UART0initloop used once
UART_HighStickParity 000003C6

Symbol: UART_HighStickParity
   Definitions
      At line 776 in file UARTInts.s
   Uses
      At line 159 in file UARTInts.s
Comment: UART_HighStickParity used once
UART_InChar 00000138

Symbol: UART_InChar
   Definitions
      At line 367 in file UARTInts.s
   Uses
      At line 150 in file UARTInts.s
      At line 519 in file UARTInts.s
      At line 608 in file UARTInts.s
      At line 739 in file UARTInts.s

UART_InString 00000380

Symbol: UART_InString
   Definitions
      At line 732 in file UARTInts.s
   Uses
      At line 158 in file UARTInts.s
Comment: UART_InString used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

UART_InUDec 00000218

Symbol: UART_InUDec
   Definitions
      At line 513 in file UARTInts.s
   Uses
      At line 154 in file UARTInts.s
Comment: UART_InUDec used once
UART_InUHex 0000029A

Symbol: UART_InUHex
   Definitions
      At line 602 in file UARTInts.s
   Uses
      At line 156 in file UARTInts.s
Comment: UART_InUHex used once
UART_Init 00000000

Symbol: UART_Init
   Definitions
      At line 174 in file UARTInts.s
   Uses
      At line 149 in file UARTInts.s
Comment: UART_Init used once
UART_LowStickParity 000003D4

Symbol: UART_LowStickParity
   Definitions
      At line 787 in file UARTInts.s
   Uses
      At line 160 in file UARTInts.s
Comment: UART_LowStickParity used once
UART_OutChar 00000164

Symbol: UART_OutChar
   Definitions
      At line 401 in file UARTInts.s
   Uses
      At line 151 in file UARTInts.s
      At line 499 in file UARTInts.s
      At line 533 in file UARTInts.s
      At line 545 in file UARTInts.s
      At line 589 in file UARTInts.s
      At line 622 in file UARTInts.s
      At line 636 in file UARTInts.s
      At line 650 in file UARTInts.s
      At line 662 in file UARTInts.s
      At line 708 in file UARTInts.s
      At line 714 in file UARTInts.s
      At line 750 in file UARTInts.s
      At line 764 in file UARTInts.s

UART_OutString 00000202

Symbol: UART_OutString
   Definitions
      At line 492 in file UARTInts.s
   Uses
      At line 153 in file UARTInts.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Comment: UART_OutString used once
UART_OutUDec 00000268

Symbol: UART_OutUDec
   Definitions
      At line 569 in file UARTInts.s
   Uses
      At line 155 in file UARTInts.s
      At line 580 in file UARTInts.s

UART_OutUHex 00000332

Symbol: UART_OutUHex
   Definitions
      At line 677 in file UARTInts.s
   Uses
      At line 157 in file UARTInts.s
      At line 689 in file UARTInts.s
      At line 696 in file UARTInts.s

UART_SendBreak 000003E2

Symbol: UART_SendBreak
   Definitions
      At line 797 in file UARTInts.s
   Uses
      At line 161 in file UARTInts.s
Comment: UART_SendBreak used once
UART_SendBreak_Disable 000003F0

Symbol: UART_SendBreak_Disable
   Definitions
      At line 807 in file UARTInts.s
   Uses
      At line 162 in file UARTInts.s
Comment: UART_SendBreak_Disable used once
copyHardwareToSoftware 000000EE

Symbol: copyHardwareToSoftware
   Definitions
      At line 304 in file UARTInts.s
   Uses
      At line 460 in file UARTInts.s
      At line 472 in file UARTInts.s

copySoftwareToHardware 00000110

Symbol: copySoftwareToHardware
   Definitions
      At line 329 in file UARTInts.s
   Uses
      At line 413 in file UARTInts.s
      At line 439 in file UARTInts.s

h2sdone 0000010E

Symbol: h2sdone
   Definitions
      At line 322 in file UARTInts.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 312 in file UARTInts.s
      At line 315 in file UARTInts.s

h2sloop 000000F0

Symbol: h2sloop
   Definitions
      At line 306 in file UARTInts.s
   Uses
      At line 321 in file UARTInts.s
Comment: h2sloop used once
handlerCheck0 0000018C

Symbol: handlerCheck0
   Definitions
      At line 428 in file UARTInts.s
   Uses
      None
Comment: handlerCheck0 unused
handlerCheck1 000001B6

Symbol: handlerCheck1
   Definitions
      At line 449 in file UARTInts.s
   Uses
      At line 433 in file UARTInts.s
      At line 444 in file UARTInts.s

handlerCheck2 000001CE

Symbol: handlerCheck2
   Definitions
      At line 461 in file UARTInts.s
   Uses
      At line 454 in file UARTInts.s
Comment: handlerCheck2 used once
handlerCheck3 000001E6

Symbol: handlerCheck3
   Definitions
      At line 473 in file UARTInts.s
   Uses
      At line 466 in file UARTInts.s
Comment: handlerCheck3 used once
handlerDone 00000200

Symbol: handlerDone
   Definitions
      At line 485 in file UARTInts.s
   Uses
      At line 478 in file UARTInts.s
Comment: handlerDone used once
inCharLoop 00000146

Symbol: inCharLoop
   Definitions
      At line 372 in file UARTInts.s
   Uses



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 379 in file UARTInts.s
Comment: inCharLoop used once
inChar_time_response_out 0000015A

Symbol: inChar_time_response_out
   Definitions
      At line 381 in file UARTInts.s
   Uses
      At line 375 in file UARTInts.s
Comment: inChar_time_response_out used once
inStringCont 000003A8

Symbol: inStringCont
   Definitions
      At line 756 in file UARTInts.s
   Uses
      At line 745 in file UARTInts.s
Comment: inStringCont used once
inStringDone 000003BC

Symbol: inStringDone
   Definitions
      At line 766 in file UARTInts.s
   Uses
      At line 741 in file UARTInts.s
Comment: inStringDone used once
inStringLoop 0000038A

Symbol: inStringLoop
   Definitions
      At line 737 in file UARTInts.s
   Uses
      At line 747 in file UARTInts.s
      At line 755 in file UARTInts.s
      At line 760 in file UARTInts.s
      At line 765 in file UARTInts.s

inUDecDone 00000264

Symbol: inUDecDone
   Definitions
      At line 551 in file UARTInts.s
   Uses
      At line 521 in file UARTInts.s
Comment: inUDecDone used once
inUDecLoop 00000222

Symbol: inUDecLoop
   Definitions
      At line 517 in file UARTInts.s
   Uses
      At line 534 in file UARTInts.s
      At line 539 in file UARTInts.s
      At line 541 in file UARTInts.s
      At line 550 in file UARTInts.s

inUDecNAN 0000024A

Symbol: inUDecNAN



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 535 in file UARTInts.s
   Uses
      At line 525 in file UARTInts.s
      At line 527 in file UARTInts.s

inUHexDone 0000032E

Symbol: inUHexDone
   Definitions
      At line 668 in file UARTInts.s
   Uses
      At line 610 in file UARTInts.s
Comment: inUHexDone used once
inUHexLoop 000002A4

Symbol: inUHexLoop
   Definitions
      At line 606 in file UARTInts.s
   Uses
      At line 623 in file UARTInts.s
      At line 637 in file UARTInts.s
      At line 651 in file UARTInts.s
      At line 656 in file UARTInts.s
      At line 658 in file UARTInts.s
      At line 667 in file UARTInts.s

inUHexNotDigit 000002CC

Symbol: inUHexNotDigit
   Definitions
      At line 624 in file UARTInts.s
   Uses
      At line 614 in file UARTInts.s
      At line 616 in file UARTInts.s

inUHexNotUpper 000002F0

Symbol: inUHexNotUpper
   Definitions
      At line 638 in file UARTInts.s
   Uses
      At line 627 in file UARTInts.s
      At line 629 in file UARTInts.s

inUHexOther 00000314

Symbol: inUHexOther
   Definitions
      At line 652 in file UARTInts.s
   Uses
      At line 641 in file UARTInts.s
      At line 643 in file UARTInts.s

outCharLoop 00000168

Symbol: outCharLoop
   Definitions
      At line 404 in file UARTInts.s



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 408 in file UARTInts.s
Comment: outCharLoop used once
outStringDone 00000216

Symbol: outStringDone
   Definitions
      At line 502 in file UARTInts.s
   Uses
      At line 498 in file UARTInts.s
Comment: outStringDone used once
outStringLoop 00000206

Symbol: outStringLoop
   Definitions
      At line 495 in file UARTInts.s
   Uses
      At line 501 in file UARTInts.s
Comment: outStringLoop used once
outUDecDone 00000290

Symbol: outUDecDone
   Definitions
      At line 586 in file UARTInts.s
   Uses
      At line 574 in file UARTInts.s
Comment: outUDecDone used once
outUHexDone 0000037E

Symbol: outUHexDone
   Definitions
      At line 715 in file UARTInts.s
   Uses
      At line 698 in file UARTInts.s
      At line 709 in file UARTInts.s

outUHexManyDigits 00000338

Symbol: outUHexManyDigits
   Definitions
      At line 683 in file UARTInts.s
   Uses
      None
Comment: outUHexManyDigits unused
outUHexOneDigit 00000364

Symbol: outUHexOneDigit
   Definitions
      At line 699 in file UARTInts.s
   Uses
      At line 682 in file UARTInts.s
Comment: outUHexOneDigit used once
outUHexOneLetter 00000368

Symbol: outUHexOneLetter
   Definitions
      At line 703 in file UARTInts.s
   Uses
      None



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

Comment: outUHexOneLetter unused
outUHexOneNumber 00000376

Symbol: outUHexOneNumber
   Definitions
      At line 710 in file UARTInts.s
   Uses
      At line 702 in file UARTInts.s
Comment: outUHexOneNumber used once
s2hdone 00000136

Symbol: s2hdone
   Definitions
      At line 350 in file UARTInts.s
   Uses
      At line 337 in file UARTInts.s
      At line 340 in file UARTInts.s

s2hloop 00000112

Symbol: s2hloop
   Definitions
      At line 331 in file UARTInts.s
   Uses
      At line 349 in file UARTInts.s
Comment: s2hloop used once
50 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BS 00000008

Symbol: BS
   Definitions
      At line 142 in file UARTInts.s
   Uses
      At line 538 in file UARTInts.s
      At line 655 in file UARTInts.s
      At line 744 in file UARTInts.s

CR 0000000D

Symbol: CR
   Definitions
      At line 140 in file UARTInts.s
   Uses
      At line 520 in file UARTInts.s
      At line 609 in file UARTInts.s
      At line 740 in file UARTInts.s

DEL 0000007F

Symbol: DEL
   Definitions
      At line 145 in file UARTInts.s
   Uses
      None
Comment: DEL unused
ESC 0000001B

Symbol: ESC
   Definitions
      At line 143 in file UARTInts.s
   Uses
      None
Comment: ESC unused
FIFOFAIL 00000000

Symbol: FIFOFAIL
   Definitions
      At line 113 in file UARTInts.s
   Uses
      At line 378 in file UARTInts.s
      At line 407 in file UARTInts.s

FIFOSIZE 00000010

Symbol: FIFOSIZE
   Definitions
      At line 111 in file UARTInts.s
   Uses
      At line 314 in file UARTInts.s
Comment: FIFOSIZE used once
FIFOSUCCESS 00000001

Symbol: FIFOSUCCESS
   Definitions
      At line 112 in file UARTInts.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      None
Comment: FIFOSUCCESS unused
GPIO_PORTA_AFSEL_R 40058420

Symbol: GPIO_PORTA_AFSEL_R
   Definitions
      At line 36 in file UARTInts.s
   Uses
      At line 264 in file UARTInts.s
Comment: GPIO_PORTA_AFSEL_R used once
GPIO_PORTA_AMSEL_R 40058528

Symbol: GPIO_PORTA_AMSEL_R
   Definitions
      At line 39 in file UARTInts.s
   Uses
      At line 284 in file UARTInts.s
Comment: GPIO_PORTA_AMSEL_R used once
GPIO_PORTA_DEN_R 4005851C

Symbol: GPIO_PORTA_DEN_R
   Definitions
      At line 38 in file UARTInts.s
   Uses
      At line 273 in file UARTInts.s
Comment: GPIO_PORTA_DEN_R used once
GPIO_PORTA_PCTL_R 4005852C

Symbol: GPIO_PORTA_PCTL_R
   Definitions
      At line 40 in file UARTInts.s
   Uses
      At line 278 in file UARTInts.s
Comment: GPIO_PORTA_PCTL_R used once
GPIO_PORTA_PUR_R 40058510

Symbol: GPIO_PORTA_PUR_R
   Definitions
      At line 37 in file UARTInts.s
   Uses
      At line 269 in file UARTInts.s
Comment: GPIO_PORTA_PUR_R used once
LF 0000000A

Symbol: LF
   Definitions
      At line 141 in file UARTInts.s
   Uses
      None
Comment: LF unused
NVIC_EN0_INT5 00000020

Symbol: NVIC_EN0_INT5
   Definitions
      At line 33 in file UARTInts.s
   Uses
      At line 295 in file UARTInts.s
Comment: NVIC_EN0_INT5 used once
NVIC_EN0_R E000E100



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols


Symbol: NVIC_EN0_R
   Definitions
      At line 34 in file UARTInts.s
   Uses
      At line 294 in file UARTInts.s
Comment: NVIC_EN0_R used once
NVIC_PRI1_R E000E404

Symbol: NVIC_PRI1_R
   Definitions
      At line 35 in file UARTInts.s
   Uses
      At line 288 in file UARTInts.s
Comment: NVIC_PRI1_R used once
SPA 00000020

Symbol: SPA
   Definitions
      At line 144 in file UARTInts.s
   Uses
      None
Comment: SPA unused
SYSCTL_ALTCLKCFG_ALTCLK_M 0000000F

Symbol: SYSCTL_ALTCLKCFG_ALTCLK_M
   Definitions
      At line 89 in file UARTInts.s
   Uses
      At line 247 in file UARTInts.s
Comment: SYSCTL_ALTCLKCFG_ALTCLK_M used once
SYSCTL_ALTCLKCFG_ALTCLK_PIOSC 00000000

Symbol: SYSCTL_ALTCLKCFG_ALTCLK_PIOSC
   Definitions
      At line 90 in file UARTInts.s
   Uses
      At line 249 in file UARTInts.s
Comment: SYSCTL_ALTCLKCFG_ALTCLK_PIOSC used once
SYSCTL_ALTCLKCFG_R 400FE138

Symbol: SYSCTL_ALTCLKCFG_R
   Definitions
      At line 88 in file UARTInts.s
   Uses
      At line 244 in file UARTInts.s
Comment: SYSCTL_ALTCLKCFG_R used once
SYSCTL_PRGPIO_R 400FEA08

Symbol: SYSCTL_PRGPIO_R
   Definitions
      At line 98 in file UARTInts.s
   Uses
      At line 258 in file UARTInts.s
Comment: SYSCTL_PRGPIO_R used once
SYSCTL_PRGPIO_R0 00000001

Symbol: SYSCTL_PRGPIO_R0
   Definitions



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

      At line 99 in file UARTInts.s
   Uses
      At line 261 in file UARTInts.s
Comment: SYSCTL_PRGPIO_R0 used once
SYSCTL_PRUART_R 400FEA18

Symbol: SYSCTL_PRUART_R
   Definitions
      At line 100 in file UARTInts.s
   Uses
      At line 191 in file UARTInts.s
Comment: SYSCTL_PRUART_R used once
SYSCTL_PRUART_R0 00000001

Symbol: SYSCTL_PRUART_R0
   Definitions
      At line 101 in file UARTInts.s
   Uses
      At line 194 in file UARTInts.s
Comment: SYSCTL_PRUART_R0 used once
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 92 in file UARTInts.s
   Uses
      At line 183 in file UARTInts.s
Comment: SYSCTL_RCGCGPIO_R used once
SYSCTL_RCGCGPIO_R0 00000001

Symbol: SYSCTL_RCGCGPIO_R0
   Definitions
      At line 93 in file UARTInts.s
   Uses
      At line 185 in file UARTInts.s
Comment: SYSCTL_RCGCGPIO_R0 used once
SYSCTL_RCGCUART_R 400FE618

Symbol: SYSCTL_RCGCUART_R
   Definitions
      At line 95 in file UARTInts.s
   Uses
      At line 178 in file UARTInts.s
Comment: SYSCTL_RCGCUART_R used once
SYSCTL_RCGCUART_R0 00000001

Symbol: SYSCTL_RCGCUART_R0
   Definitions
      At line 96 in file UARTInts.s
   Uses
      At line 180 in file UARTInts.s
Comment: SYSCTL_RCGCUART_R0 used once
UART0_CC_R 4000CFC8

Symbol: UART0_CC_R
   Definitions
      At line 83 in file UARTInts.s
   Uses
      At line 238 in file UARTInts.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

Comment: UART0_CC_R used once
UART0_CTL_R 4000C030

Symbol: UART0_CTL_R
   Definitions
      At line 57 in file UARTInts.s
   Uses
      At line 197 in file UARTInts.s
      At line 252 in file UARTInts.s

UART0_DR_R 4000C000

Symbol: UART0_DR_R
   Definitions
      At line 41 in file UARTInts.s
   Uses
      At line 317 in file UARTInts.s
      At line 347 in file UARTInts.s

UART0_FBRD_R 4000C028

Symbol: UART0_FBRD_R
   Definitions
      At line 47 in file UARTInts.s
   Uses
      At line 205 in file UARTInts.s
Comment: UART0_FBRD_R used once
UART0_FR_R 4000C018

Symbol: UART0_FR_R
   Definitions
      At line 42 in file UARTInts.s
   Uses
      At line 308 in file UARTInts.s
      At line 333 in file UARTInts.s

UART0_IBRD_R 4000C024

Symbol: UART0_IBRD_R
   Definitions
      At line 46 in file UARTInts.s
   Uses
      At line 202 in file UARTInts.s
Comment: UART0_IBRD_R used once
UART0_ICR_R 4000C044

Symbol: UART0_ICR_R
   Definitions
      At line 77 in file UARTInts.s
   Uses
      At line 435 in file UARTInts.s
      At line 456 in file UARTInts.s
      At line 468 in file UARTInts.s
      At line 480 in file UARTInts.s

UART0_IFLS_R 4000C034

Symbol: UART0_IFLS_R
   Definitions



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

      At line 61 in file UARTInts.s
   Uses
      At line 220 in file UARTInts.s
Comment: UART0_IFLS_R used once
UART0_IM_R 4000C038

Symbol: UART0_IM_R
   Definitions
      At line 65 in file UARTInts.s
   Uses
      At line 232 in file UARTInts.s
      At line 409 in file UARTInts.s
      At line 445 in file UARTInts.s

UART0_LCRH_R 4000C02C

Symbol: UART0_LCRH_R
   Definitions
      At line 49 in file UARTInts.s
   Uses
      At line 209 in file UARTInts.s
      At line 778 in file UARTInts.s
      At line 789 in file UARTInts.s
      At line 799 in file UARTInts.s
      At line 809 in file UARTInts.s

UART0_RIS_R 4000C03C

Symbol: UART0_RIS_R
   Definitions
      At line 71 in file UARTInts.s
   Uses
      At line 429 in file UARTInts.s
      At line 450 in file UARTInts.s
      At line 462 in file UARTInts.s
      At line 474 in file UARTInts.s

UART_CC_CS_M 0000000F

Symbol: UART_CC_CS_M
   Definitions
      At line 84 in file UARTInts.s
   Uses
      At line 240 in file UARTInts.s
Comment: UART_CC_CS_M used once
UART_CC_CS_PIOSC 00000005

Symbol: UART_CC_CS_PIOSC
   Definitions
      At line 86 in file UARTInts.s
   Uses
      At line 241 in file UARTInts.s
Comment: UART_CC_CS_PIOSC used once
UART_CC_CS_SYSCLK 00000000

Symbol: UART_CC_CS_SYSCLK
   Definitions
      At line 85 in file UARTInts.s
   Uses



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Absolute symbols

      None
Comment: UART_CC_CS_SYSCLK unused
UART_CTL_HSE 00000020

Symbol: UART_CTL_HSE
   Definitions
      At line 58 in file UARTInts.s
   Uses
      At line 254 in file UARTInts.s
Comment: UART_CTL_HSE used once
UART_CTL_UARTEN 00000001

Symbol: UART_CTL_UARTEN
   Definitions
      At line 59 in file UARTInts.s
   Uses
      At line 199 in file UARTInts.s
      At line 255 in file UARTInts.s

UART_FR_RXFE 00000010

Symbol: UART_FR_RXFE
   Definitions
      At line 45 in file UARTInts.s
   Uses
      At line 310 in file UARTInts.s
      At line 311 in file UARTInts.s

UART_FR_RXFF 00000040

Symbol: UART_FR_RXFF
   Definitions
      At line 43 in file UARTInts.s
   Uses
      None
Comment: UART_FR_RXFF unused
UART_FR_TXFF 00000020

Symbol: UART_FR_TXFF
   Definitions
      At line 44 in file UARTInts.s
   Uses
      At line 335 in file UARTInts.s
      At line 336 in file UARTInts.s

UART_ICR_PEIC 00000100

Symbol: UART_ICR_PEIC
   Definitions
      At line 78 in file UARTInts.s
   Uses
      At line 481 in file UARTInts.s
Comment: UART_ICR_PEIC used once
UART_ICR_RTIC 00000040

Symbol: UART_ICR_RTIC
   Definitions
      At line 79 in file UARTInts.s
   Uses



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Absolute symbols

      At line 469 in file UARTInts.s
Comment: UART_ICR_RTIC used once
UART_ICR_RXIC 00000010

Symbol: UART_ICR_RXIC
   Definitions
      At line 81 in file UARTInts.s
   Uses
      At line 457 in file UARTInts.s
Comment: UART_ICR_RXIC used once
UART_ICR_TXIC 00000020

Symbol: UART_ICR_TXIC
   Definitions
      At line 80 in file UARTInts.s
   Uses
      At line 436 in file UARTInts.s
Comment: UART_ICR_TXIC used once
UART_IFLS_RX1_8 00000000

Symbol: UART_IFLS_RX1_8
   Definitions
      At line 62 in file UARTInts.s
   Uses
      At line 225 in file UARTInts.s
Comment: UART_IFLS_RX1_8 used once
UART_IFLS_TX1_8 00000000

Symbol: UART_IFLS_TX1_8
   Definitions
      At line 63 in file UARTInts.s
   Uses
      At line 225 in file UARTInts.s
Comment: UART_IFLS_TX1_8 used once
UART_IM_PEIM 00000100

Symbol: UART_IM_PEIM
   Definitions
      At line 66 in file UARTInts.s
   Uses
      At line 235 in file UARTInts.s
Comment: UART_IM_PEIM used once
UART_IM_RTIM 00000040

Symbol: UART_IM_RTIM
   Definitions
      At line 67 in file UARTInts.s
   Uses
      At line 235 in file UARTInts.s
Comment: UART_IM_RTIM used once
UART_IM_RXIM 00000010

Symbol: UART_IM_RXIM
   Definitions
      At line 69 in file UARTInts.s
   Uses
      At line 235 in file UARTInts.s
Comment: UART_IM_RXIM used once
UART_IM_TXIM 00000020



ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Absolute symbols


Symbol: UART_IM_TXIM
   Definitions
      At line 68 in file UARTInts.s
   Uses
      At line 235 in file UARTInts.s
      At line 411 in file UARTInts.s
      At line 415 in file UARTInts.s
      At line 447 in file UARTInts.s

UART_LCRH_BRK 00000001

Symbol: UART_LCRH_BRK
   Definitions
      At line 55 in file UARTInts.s
   Uses
      At line 801 in file UARTInts.s
      At line 811 in file UARTInts.s

UART_LCRH_EPS 00000004

Symbol: UART_LCRH_EPS
   Definitions
      At line 53 in file UARTInts.s
   Uses
      At line 213 in file UARTInts.s
      At line 780 in file UARTInts.s
      At line 791 in file UARTInts.s

UART_LCRH_FEN 00000010

Symbol: UART_LCRH_FEN
   Definitions
      At line 52 in file UARTInts.s
   Uses
      At line 213 in file UARTInts.s
Comment: UART_LCRH_FEN used once
UART_LCRH_PEN 00000002

Symbol: UART_LCRH_PEN
   Definitions
      At line 54 in file UARTInts.s
   Uses
      At line 213 in file UARTInts.s
Comment: UART_LCRH_PEN used once
UART_LCRH_SPS 00000080

Symbol: UART_LCRH_SPS
   Definitions
      At line 50 in file UARTInts.s
   Uses
      At line 213 in file UARTInts.s
Comment: UART_LCRH_SPS used once
UART_LCRH_WLEN_8 00000060

Symbol: UART_LCRH_WLEN_8
   Definitions
      At line 51 in file UARTInts.s
   Uses



ARM Macro Assembler    Page 10 Alphabetic symbol ordering
Absolute symbols

      At line 213 in file UARTInts.s
Comment: UART_LCRH_WLEN_8 used once
UART_RIS_PERIS 00000100

Symbol: UART_RIS_PERIS
   Definitions
      At line 72 in file UARTInts.s
   Uses
      At line 476 in file UARTInts.s
      At line 477 in file UARTInts.s

UART_RIS_RTRIS 00000040

Symbol: UART_RIS_RTRIS
   Definitions
      At line 73 in file UARTInts.s
   Uses
      At line 464 in file UARTInts.s
      At line 465 in file UARTInts.s

UART_RIS_RXRIS 00000010

Symbol: UART_RIS_RXRIS
   Definitions
      At line 75 in file UARTInts.s
   Uses
      At line 452 in file UARTInts.s
      At line 453 in file UARTInts.s

UART_RIS_TXRIS 00000020

Symbol: UART_RIS_TXRIS
   Definitions
      At line 74 in file UARTInts.s
   Uses
      At line 431 in file UARTInts.s
      At line 432 in file UARTInts.s

67 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

DisableInterrupts 00000000

Symbol: DisableInterrupts
   Definitions
      At line 103 in file UARTInts.s
   Uses
      At line 176 in file UARTInts.s
Comment: DisableInterrupts used once
EnableInterrupts 00000000

Symbol: EnableInterrupts
   Definitions
      At line 104 in file UARTInts.s
   Uses
      At line 297 in file UARTInts.s
Comment: EnableInterrupts used once
EndCritical 00000000

Symbol: EndCritical
   Definitions
      At line 106 in file UARTInts.s
   Uses
      None
Comment: EndCritical unused
RxFifo_Get 00000000

Symbol: RxFifo_Get
   Definitions
      At line 122 in file UARTInts.s
   Uses
      At line 377 in file UARTInts.s
Comment: RxFifo_Get used once
RxFifo_Init 00000000

Symbol: RxFifo_Init
   Definitions
      At line 120 in file UARTInts.s
   Uses
      At line 188 in file UARTInts.s
Comment: RxFifo_Init used once
RxFifo_Put 00000000

Symbol: RxFifo_Put
   Definitions
      At line 121 in file UARTInts.s
   Uses
      At line 320 in file UARTInts.s
Comment: RxFifo_Put used once
RxFifo_Size 00000000

Symbol: RxFifo_Size
   Definitions
      At line 123 in file UARTInts.s
   Uses
      At line 313 in file UARTInts.s
Comment: RxFifo_Size used once
StartCritical 00000000

Symbol: StartCritical



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Definitions
      At line 105 in file UARTInts.s
   Uses
      None
Comment: StartCritical unused
SysTick_Check_Count 00000000

Symbol: SysTick_Check_Count
   Definitions
      At line 137 in file UARTInts.s
   Uses
      At line 373 in file UARTInts.s
Comment: SysTick_Check_Count used once
SysTick_Init_Count 00000000

Symbol: SysTick_Init_Count
   Definitions
      At line 136 in file UARTInts.s
   Uses
      At line 371 in file UARTInts.s
Comment: SysTick_Init_Count used once
Timer_BreakTime 00000000

Symbol: Timer_BreakTime
   Definitions
      At line 128 in file UARTInts.s
   Uses
      None
Comment: Timer_BreakTime unused
Timer_NoResponseTime 00000000

Symbol: Timer_NoResponseTime
   Definitions
      At line 131 in file UARTInts.s
   Uses
      None
Comment: Timer_NoResponseTime unused
Timer_NoResponseTime_stop 00000000

Symbol: Timer_NoResponseTime_stop
   Definitions
      At line 132 in file UARTInts.s
   Uses
      None
Comment: Timer_NoResponseTime_stop unused
Timer_PollingTime 00000000

Symbol: Timer_PollingTime
   Definitions
      At line 130 in file UARTInts.s
   Uses
      None
Comment: Timer_PollingTime unused
Timer_ResponseTime 00000000

Symbol: Timer_ResponseTime
   Definitions
      At line 126 in file UARTInts.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
External symbols

      None
Comment: Timer_ResponseTime unused
Timer_ResponseTime_stop 00000000

Symbol: Timer_ResponseTime_stop
   Definitions
      At line 127 in file UARTInts.s
   Uses
      None
Comment: Timer_ResponseTime_stop unused
Timer_SetupTime 00000000

Symbol: Timer_SetupTime
   Definitions
      At line 129 in file UARTInts.s
   Uses
      None
Comment: Timer_SetupTime unused
TxFifo_Get 00000000

Symbol: TxFifo_Get
   Definitions
      At line 118 in file UARTInts.s
   Uses
      At line 344 in file UARTInts.s
Comment: TxFifo_Get used once
TxFifo_Init 00000000

Symbol: TxFifo_Init
   Definitions
      At line 116 in file UARTInts.s
   Uses
      At line 189 in file UARTInts.s
Comment: TxFifo_Init used once
TxFifo_Put 00000000

Symbol: TxFifo_Put
   Definitions
      At line 117 in file UARTInts.s
   Uses
      At line 406 in file UARTInts.s
Comment: TxFifo_Put used once
TxFifo_Size 00000000

Symbol: TxFifo_Size
   Definitions
      At line 119 in file UARTInts.s
   Uses
      At line 338 in file UARTInts.s
      At line 442 in file UARTInts.s

WaitForInterrupt 00000000

Symbol: WaitForInterrupt
   Definitions
      At line 107 in file UARTInts.s
   Uses
      None
Comment: WaitForInterrupt unused



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
External symbols

delay 00000000

Symbol: delay
   Definitions
      At line 135 in file UARTInts.s
   Uses
      None
Comment: delay unused
23 symbols
476 symbols in table
