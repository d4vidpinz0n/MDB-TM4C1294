


ARM Macro Assembler    Page 1 


    1 00000000         ; Modified by Josue Pinzon Vivas May 24, 2017
    2 00000000         ; UARTInts.s
    3 00000000         ; Runs on TM4C1294
    4 00000000         ; Use UART0 to implement bidirectional data transfer to 
                       and from a
    5 00000000         ; computer running HyperTerminal.  This time, interrupts
                        and FIFOs
    6 00000000         ; are used.
    7 00000000         ; This file is named "UARTInts" because it is the UART w
                       ith interrupts.
    8 00000000         ; Daniel Valvano
    9 00000000         ; May 29, 2014
   10 00000000         ; Modified by EE345L students Charlie Gough && Matt Hawk
                       
   11 00000000         ; Modified by EE345M students Agustinus Darmawan && Ming
                       jie Qiu
   12 00000000         
   13 00000000         ;  This example accompanies the book
   14 00000000         ;  "Embedded Systems: Real Time Interfacing to Arm Corte
                       x M Microcontrollers",
   15 00000000         ;  ISBN: 978-1463590154, Jonathan Valvano, copyright (c)
                        2014
   16 00000000         ;  Program 5.11 Section 5.6, Program 3.10
   17 00000000         ;
   18 00000000         ;Copyright 2014 by Jonathan W. Valvano, valvano@mail.ute
                       xas.edu
   19 00000000         ;   You may use, edit, run or distribute this file
   20 00000000         ;   as long as the above copyright notice remains
   21 00000000         ;THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHET
                       HER EXPRESS, IMPLIED
   22 00000000         ;OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WA
                       RRANTIES OF
   23 00000000         ;MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE AP
                       PLY TO THIS SOFTWARE.
   24 00000000         ;VALVANO SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR 
                       SPECIAL, INCIDENTAL,
   25 00000000         ;OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
   26 00000000         ;For more information about my classes, my research, and
                        my books, see
   27 00000000         ;http://users.ece.utexas.edu/~valvano/
   28 00000000         
   29 00000000         ; U0Rx (VCP receive) connected to PA0
   30 00000000         ; U0Tx (VCP transmit) connected to PA1
   31 00000000         ; Note: Connected LaunchPad JP4 and JP5 inserted paralle
                       l with long side of board.
   32 00000000         
   33 00000000 00000020 
                       NVIC_EN0_INT5
                               EQU              0x00000020  ; Interrupt 5 enabl
                                                            e
   34 00000000 E000E100 
                       NVIC_EN0_R
                               EQU              0xE000E100  ; IRQ 0 to 31 Set E
                                                            nable Register
   35 00000000 E000E404 
                       NVIC_PRI1_R
                               EQU              0xE000E404  ; IRQ 4 to 7 Priori
                                                            ty Register
   36 00000000 40058420 



ARM Macro Assembler    Page 2 


                       GPIO_PORTA_AFSEL_R
                               EQU              0x40058420
   37 00000000 40058510 
                       GPIO_PORTA_PUR_R
                               EQU              0x40058510
   38 00000000 4005851C 
                       GPIO_PORTA_DEN_R
                               EQU              0x4005851C
   39 00000000 40058528 
                       GPIO_PORTA_AMSEL_R
                               EQU              0x40058528
   40 00000000 4005852C 
                       GPIO_PORTA_PCTL_R
                               EQU              0x4005852C
   41 00000000 4000C000 
                       UART0_DR_R
                               EQU              0x4000C000
   42 00000000 4000C018 
                       UART0_FR_R
                               EQU              0x4000C018
   43 00000000 00000040 
                       UART_FR_RXFF
                               EQU              0x00000040  ; UART Receive FIFO
                                                             Full
   44 00000000 00000020 
                       UART_FR_TXFF
                               EQU              0x00000020  ; UART Transmit FIF
                                                            O Full
   45 00000000 00000010 
                       UART_FR_RXFE
                               EQU              0x00000010  ; UART Receive FIFO
                                                             Empty
   46 00000000 4000C024 
                       UART0_IBRD_R
                               EQU              0x4000C024
   47 00000000 4000C028 
                       UART0_FBRD_R
                               EQU              0x4000C028
   48 00000000         
   49 00000000 4000C02C 
                       UART0_LCRH_R
                               EQU              0x4000C02C
   50 00000000 00000080 
                       UART_LCRH_SPS
                               EQU              0x00000080  ; UART Stick Parity
                                                            
   51 00000000 00000060 
                       UART_LCRH_WLEN_8
                               EQU              0x00000060  ; 8 bit word length
                                                            
   52 00000000 00000010 
                       UART_LCRH_FEN
                               EQU              0x00000010  ; UART Enable FIFOs
                                                            
   53 00000000 00000004 
                       UART_LCRH_EPS
                               EQU              0x00000004  ; UART Even parity 
                                                            Select
   54 00000000 00000002 



ARM Macro Assembler    Page 3 


                       UART_LCRH_PEN
                               EQU              0x00000002  ; UART Parity Enabl
                                                            e
   55 00000000         
   56 00000000 4000C030 
                       UART0_CTL_R
                               EQU              0x4000C030
   57 00000000 00000020 
                       UART_CTL_HSE
                               EQU              0x00000020  ; High-Speed Enable
                                                            
   58 00000000 00000001 
                       UART_CTL_UARTEN
                               EQU              0x00000001  ; UART Enable
   59 00000000         
   60 00000000 4000C034 
                       UART0_IFLS_R
                               EQU              0x4000C034
   61 00000000 00000000 
                       UART_IFLS_RX1_8
                               EQU              0x00000000  ; RX FIFO >= 1/8 fu
                                                            ll
   62 00000000 00000000 
                       UART_IFLS_TX1_8
                               EQU              0x00000000  ; TX FIFO <= 1/8 fu
                                                            ll
   63 00000000         
   64 00000000 4000C038 
                       UART0_IM_R
                               EQU              0x4000C038
   65 00000000 00000100 
                       UART_IM_PEIM
                               EQU              0x00000100  ; UART Parity Error
                                                             Interrupt Mask
   66 00000000 00000040 
                       UART_IM_RTIM
                               EQU              0x00000040  ; UART Receive Time
                                                            -Out Interrupt Mask
                                                            
   67 00000000 00000020 
                       UART_IM_TXIM
                               EQU              0x00000020  ; UART Transmit Int
                                                            errupt Mask
   68 00000000 00000010 
                       UART_IM_RXIM
                               EQU              0x00000010  ; UART Receive Inte
                                                            rrupt Mask
   69 00000000         
   70 00000000 4000C03C 
                       UART0_RIS_R
                               EQU              0x4000C03C
   71 00000000 00000100 
                       UART_RIS_PERIS
                               EQU              0x00000100  ; UART Parity Error
                                                             Interrupt Status
   72 00000000 00000040 
                       UART_RIS_RTRIS
                               EQU              0x00000040  ; UART Receive Time
                                                            -Out Raw Interrupt 



ARM Macro Assembler    Page 4 


                                                            Status
   73 00000000 00000020 
                       UART_RIS_TXRIS
                               EQU              0x00000020  ; UART Transmit Raw
                                                             Interrupt Status
   74 00000000 00000010 
                       UART_RIS_RXRIS
                               EQU              0x00000010  ; UART Receive Raw 
                                                            Interrupt Status
   75 00000000         
   76 00000000 4000C044 
                       UART0_ICR_R
                               EQU              0x4000C044
   77 00000000 00000100 
                       UART_ICR_PEIC
                               EQU              0x00000100  ; UART Parity Error
                                                             Interrupt Clear
   78 00000000 00000040 
                       UART_ICR_RTIC
                               EQU              0x00000040  ; Receive Time-Out 
                                                            Interrupt Clear
   79 00000000 00000020 
                       UART_ICR_TXIC
                               EQU              0x00000020  ; Transmit Interrup
                                                            t Clear
   80 00000000 00000010 
                       UART_ICR_RXIC
                               EQU              0x00000010  ; Receive Interrupt
                                                             Clear
   81 00000000         
   82 00000000 4000CFC8 
                       UART0_CC_R
                               EQU              0x4000CFC8
   83 00000000 0000000F 
                       UART_CC_CS_M
                               EQU              0x0000000F  ; UART Baud Clock S
                                                            ource
   84 00000000 00000000 
                       UART_CC_CS_SYSCLK
                               EQU              0x00000000  ; System clock (bas
                                                            ed on clock source 
                                                            and divisor factor)
                                                            
   85 00000000 00000005 
                       UART_CC_CS_PIOSC
                               EQU              0x00000005  ; PIOSC
   86 00000000         
   87 00000000 400FE138 
                       SYSCTL_ALTCLKCFG_R
                               EQU              0x400FE138
   88 00000000 0000000F 
                       SYSCTL_ALTCLKCFG_ALTCLK_M
                               EQU              0x0000000F  ; Alternate Clock S
                                                            ource
   89 00000000 00000000 
                       SYSCTL_ALTCLKCFG_ALTCLK_PIOSC
                               EQU              0x00000000  ; PIOSC
   90 00000000         
   91 00000000 400FE608 



ARM Macro Assembler    Page 5 


                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   92 00000000 00000001 
                       SYSCTL_RCGCGPIO_R0
                               EQU              0x00000001  ; GPIO Port A Run M
                                                            ode Clock
   93 00000000         ; Gating Control
   94 00000000 400FE618 
                       SYSCTL_RCGCUART_R
                               EQU              0x400FE618
   95 00000000 00000001 
                       SYSCTL_RCGCUART_R0
                               EQU              0x00000001  ; UART Module 0 Run
                                                             Mode Clock
   96 00000000         ; Gating Control
   97 00000000 400FEA08 
                       SYSCTL_PRGPIO_R
                               EQU              0x400FEA08
   98 00000000 00000001 
                       SYSCTL_PRGPIO_R0
                               EQU              0x00000001  ; GPIO Port A Perip
                                                            heral Ready
   99 00000000 400FEA18 
                       SYSCTL_PRUART_R
                               EQU              0x400FEA18
  100 00000000 00000001 
                       SYSCTL_PRUART_R0
                               EQU              0x00000001  ; UART Module 0 Per
                                                            ipheral Ready
  101 00000000         
  102 00000000                 IMPORT           DisableInterrupts ; Disable int
                                                            errupts
  103 00000000                 IMPORT           EnableInterrupts 
                                                            ; Enable interrupts
                                                            
  104 00000000                 IMPORT           StartCritical ; previous I bit,
                                                             disable interrupts
                                                            
  105 00000000                 IMPORT           EndCritical ; restore I bit to 
                                                            previous value
  106 00000000                 IMPORT           WaitForInterrupt 
                                                            ; low power mode
  107 00000000         
  108 00000000         ; properties from FIFO.c
  109 00000000         ; size of the FIFOs (must be power of 2)
  110 00000000 00000010 
                       FIFOSIZE
                               EQU              16          ; (copy this value 
                                                            from both places in
                                                             FIFO.s)
  111 00000000 00000001 
                       FIFOSUCCESS
                               EQU              1           ; return value on s
                                                            uccess
  112 00000000 00000000 
                       FIFOFAIL
                               EQU              0           ; return value on f
                                                            ailure
  113 00000000         



ARM Macro Assembler    Page 6 


  114 00000000         ; functions from FIFO.s
  115 00000000                 IMPORT           TxFifo_Init
  116 00000000                 IMPORT           TxFifo_Put
  117 00000000                 IMPORT           TxFifo_Get
  118 00000000                 IMPORT           TxFifo_Size
  119 00000000                 IMPORT           RxFifo_Init
  120 00000000                 IMPORT           RxFifo_Put
  121 00000000                 IMPORT           RxFifo_Get
  122 00000000                 IMPORT           RxFifo_Size
  123 00000000         
  124 00000000         ;functions from GPTimer.s
  125 00000000                 IMPORT           Timer_ResponseTime
  126 00000000                 IMPORT           Timer_ResponseTime_stop
  127 00000000                 IMPORT           Timer_BreakTime
  128 00000000                 IMPORT           Timer_SetupTime
  129 00000000                 IMPORT           Timer_PollingTime
  130 00000000                 IMPORT           Timer_NoResponseTime
  131 00000000                 IMPORT           Timer_NoResponseTime_stop
  132 00000000         
  133 00000000         ; standard ASCII symbols
  134 00000000 0000000D 
                       CR      EQU              0x0D
  135 00000000 0000000A 
                       LF      EQU              0x0A
  136 00000000 00000008 
                       BS      EQU              0x08
  137 00000000 0000001B 
                       ESC     EQU              0x1B
  138 00000000 00000020 
                       SPA     EQU              0x20
  139 00000000 0000007F 
                       DEL     EQU              0x7F
  140 00000000         
  141 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
  142 00000000                 THUMB
  143 00000000                 EXPORT           UART_Init
  144 00000000                 EXPORT           UART_InChar
  145 00000000                 EXPORT           UART_OutChar
  146 00000000                 EXPORT           UART0_Handler
  147 00000000                 EXPORT           UART_OutString
  148 00000000                 EXPORT           UART_InUDec
  149 00000000                 EXPORT           UART_OutUDec
  150 00000000                 EXPORT           UART_InUHex
  151 00000000                 EXPORT           UART_OutUHex
  152 00000000                 EXPORT           UART_InString
  153 00000000                 EXPORT           UART_HighStickParity
  154 00000000                 EXPORT           UART_LowStickParity
  155 00000000         ; require C function calls to preserve the 8-byte alignm
                       ent of 8-byte data objects
  156 00000000                 PRESERVE8
  157 00000000         
  158 00000000         ;------------UART_Init------------
  159 00000000         ; Initialize UART0 for 9,600 baud rate (clock from 16 MH
                       z PIOSC),
  160 00000000         ; 8 bit word length, stick parity, one stop bit, FIFOs e
                       nabled, interrupt
  161 00000000         ; after >= 2 characters received or <= 2 characters to t
                       ransmit or timeout



ARM Macro Assembler    Page 7 


  162 00000000         ; Rx with pull-up
  163 00000000         ; Input: none
  164 00000000         ; Output: none
  165 00000000         ; Modifies: R0, R1
  166 00000000         UART_Init
  167 00000000 B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  168 00000002 F7FF FFFE       BL               DisableInterrupts ; disable all
                                                             interrupts (critic
                                                            al section)
  169 00000006         ; activate clock for UART0
  170 00000006 49F0            LDR              R1, =SYSCTL_RCGCUART_R ; R1 = &
                                                            SYSCTL_RCGCUART_R
  171 00000008 6808            LDR              R0, [R1]    ; R0 = [R1]
  172 0000000A F040 0001       ORR              R0, R0, #SYSCTL_RCGCUART_R0 ; R
                                                            0 = R0|SYSCTL_RCGCU
                                                            ART_R0
  173 0000000E 6008            STR              R0, [R1]    ; [R1] = R0
  174 00000010         ; activate clock for port A
  175 00000010 49EE            LDR              R1, =SYSCTL_RCGCGPIO_R ; R1 = &
                                                            SYSCTL_RCGCGPIO_R
  176 00000012 6808            LDR              R0, [R1]    ; R0 = [R1]
  177 00000014 F040 0001       ORR              R0, R0, #SYSCTL_RCGCGPIO_R0 ; R
                                                            0 = R0|SYSCTL_RCGCG
                                                            PIO_R0
  178 00000018 6008            STR              R0, [R1]    ; [R1] = R0
  179 0000001A         ; initialize empty FIFOs
  180 0000001A F7FF FFFE       BL               RxFifo_Init
  181 0000001E F7FF FFFE       BL               TxFifo_Init
  182 00000022         ; allow time for clock to stabilize
  183 00000022 49EB            LDR              R1, =SYSCTL_PRUART_R ; R1 = &SY
                                                            SCTL_PRUART_R
  184 00000024         UART0initloop
  185 00000024 6808            LDR              R0, [R1]    ; R0 = [R1] (value)
                                                            
  186 00000026 F010 0001       ANDS             R0, R0, #SYSCTL_PRUART_R0 ; R0 
                                                            = R0&SYSCTL_PRUART_
                                                            R0
  187 0000002A D0FB            BEQ              UART0initloop ; if(R0 == 0), ke
                                                            ep polling
  188 0000002C         ; disable UART
  189 0000002C 49E9            LDR              R1, =UART0_CTL_R 
                                                            ; R1 = &UART0_CTL_R
                                                            
  190 0000002E 6808            LDR              R0, [R1]    ; R0 = [R1]
  191 00000030 F020 0001       BIC              R0, R0, #UART_CTL_UARTEN ; R0 =
                                                             R0&~UART_CTL_UARTE
                                                            N (disable UART)
  192 00000034 6008            STR              R0, [R1]    ; [R1] = R0
  193 00000036         ; set the baud rate (equations on p845 of datasheet)
  194 00000036 49E8            LDR              R1, =UART0_IBRD_R ; R1 = &UART0
                                                            _IBRD_R
  195 00000038 F04F 0068       MOV              R0, #104    ; R0 = IBRD = int(1
                                                            6,000,000 / (16 * 9
                                                            ,600)) = int(104.16
                                                            6)
  196 0000003C 6008            STR              R0, [R1]    ; [R1] = R0
  197 0000003E 49E7            LDR              R1, =UART0_FBRD_R ; R1 = &UART0
                                                            _FBRD_R



ARM Macro Assembler    Page 8 


  198 00000040 F04F 000B       MOV              R0, #11     ; R0 = FBRD = round
                                                            (0.166 * 64 + 0.5) 
                                                            = 11
  199 00000044 6008            STR              R0, [R1]    ; [R1] = R0
  200 00000046         ; configure Line Control Register settings
  201 00000046 49E6            LDR              R1, =UART0_LCRH_R ; R1 = &UART0
                                                            _LCRH_R
  202 00000048 6808            LDR              R0, [R1]    ; R0 = [R1]
  203 0000004A F020 00FF       BIC              R0, R0, #0xFF ; R0 = R0&~0xFF (
                                                            clear all fields)
  204 0000004E         ; 8 bit word length, LOW stick parity, one stop bit, FIF
                       Os
  205 0000004E F100 00F6       ADD              R0, R0, #(UART_LCRH_WLEN_8+UART
_LCRH_FEN+UART_LCRH_PEN+UART_LCRH_EPS+UART_LCRH_SPS)
  206 00000052         ; importante:
  207 00000052         ; Puede ser que haya que desactivar FIFO
  208 00000052         ;
  209 00000052         
  210 00000052 6008            STR              R0, [R1]    ; [R1] = R0
  211 00000054         ; configure Interrupt FIFO Level Select Register setting
                       s
  212 00000054 49E3            LDR              R1, =UART0_IFLS_R ; R1 = &UART0
                                                            _IFLS_R
  213 00000056 6808            LDR              R0, [R1]    ; R0 = [R1]
  214 00000058 F020 003F       BIC              R0, R0, #0x3F ; R0 = R0&~0x3F (
                                                            clear TX and RX int
                                                            errupt FIFO level f
                                                            ields)
  215 0000005C         ; configure interrupt for TX FIFO <= 1/8 full
  216 0000005C         ; configure interrupt for RX FIFO >= 1/8 full
  217 0000005C F100 0000       ADD              R0, R0, #(UART_IFLS_TX1_8+UART_
IFLS_RX1_8)
  218 00000060 6008            STR              R0, [R1]    ; [R1] = R0
  219 00000062         ; enable interrupts to be requested upon certain conditi
                       ons
  220 00000062         ; TX FIFO interrupt: when TX FIFO <= 2 elements (<= 1/8 
                       full, configured above)
  221 00000062         ; RX FIFO interrupt; when RX FIFO >= 2 elements (>= 1/8 
                       full, configured above)
  222 00000062         ; RX time-out interrupt: receive FIFO not empty and no m
                       ore data received in next 32-bit timeframe
  223 00000062         ;               (this causes an interrupt after each key
                       stroke, rather than every other keystroke)
  224 00000062 49E1            LDR              R1, =UART0_IM_R 
                                                            ; R1 = &UART0_IM_R
  225 00000064 6808            LDR              R0, [R1]    ; R0 = [R1]
  226 00000066         ; enable TX and RX FIFO interrupts, RX time-out interrup
                       t and Parity interrupt
  227 00000066 F440 70B8       ORR              R0, R0, #(UART_IM_RXIM+UART_IM_
TXIM+UART_IM_RTIM+UART_IM_PEIM)
  228 0000006A 6008            STR              R0, [R1]    ; [R1] = R0
  229 0000006C         ; UART gets its clock from the alternate clock source as
                        defined by SYSCTL_ALTCLKCFG_R
  230 0000006C 49DF            LDR              R1, =UART0_CC_R 
                                                            ; R1 = &UART0_CC_R
  231 0000006E 6808            LDR              R0, [R1]    ; R0 = [R1]
  232 00000070 F020 000F       BIC              R0, R0, #UART_CC_CS_M ; R0 = R0
                                                            &~UART_CC_CS_M (cle
                                                            ar clock source fie



ARM Macro Assembler    Page 9 


                                                            ld)
  233 00000074 F100 0005       ADD              R0, R0, #UART_CC_CS_PIOSC ; R0 
                                                            = R0+UART_CC_CS_PIO
                                                            SC (configure for a
                                                            lternate clock sour
                                                            ce for UART0)
  234 00000078 6008            STR              R0, [R1]    ; [R1] = R0
  235 0000007A         ; the alternate clock source is the PIOSC (default)
  236 0000007A 49DD            LDR              R1, =SYSCTL_ALTCLKCFG_R ; R1 = 
                                                            &SYSCTL_ALTCLKCFG_R
                                                            
  237 0000007C 6808            LDR              R0, [R1]    ; R0 = [R1]
  238 0000007E         ; R0 = R0&~SYSCTL_ALTCLKCFG_ALTCLK_M (clear alternate cl
                       ock source field)
  239 0000007E F020 000F       BIC              R0, R0, #SYSCTL_ALTCLKCFG_ALTCL
K_M
  240 00000082         ; R0 = R0+SYSCTL_ALTCLKCFG_ALTCLK_PIOSC (configure for P
                       IOSC as alternate clock source)
  241 00000082 F100 0000       ADD              R0, R0, #SYSCTL_ALTCLKCFG_ALTCL
K_PIOSC
  242 00000086 6008            STR              R0, [R1]    ; [R1] = R0
  243 00000088         ; enable UART
  244 00000088 49D2            LDR              R1, =UART0_CTL_R 
                                                            ; R1 = &UART0_CTL_R
                                                            
  245 0000008A 6808            LDR              R0, [R1]    ; R0 = [R1]
  246 0000008C F020 0020       BIC              R0, R0, #UART_CTL_HSE ; R0 = R0
                                                            &~UART_CTL_HSE (hig
                                                            h-speed disable; di
                                                            vide clock by 16 ra
                                                            ther than 8 (defaul
                                                            t))
  247 00000090 F040 0001       ORR              R0, R0, #UART_CTL_UARTEN ; R0 =
                                                             R0|UART_CTL_UARTEN
                                                             (enable UART)
  248 00000094 6008            STR              R0, [R1]    ; [R1] = R0
  249 00000096         ; allow time for clock to stabilize
  250 00000096 49D7            LDR              R1, =SYSCTL_PRGPIO_R ; R1 = &SY
                                                            SCTL_PRGPIO_R
  251 00000098         GPIOAinitloop
  252 00000098 6808            LDR              R0, [R1]    ; R0 = [R1] (value)
                                                            
  253 0000009A F010 0001       ANDS             R0, R0, #SYSCTL_PRGPIO_R0 ; R0 
                                                            = R0&SYSCTL_PRGPIO_
                                                            R0
  254 0000009E D0FB            BEQ              GPIOAinitloop ; if(R0 == 0), ke
                                                            ep polling
  255 000000A0         ; enable alternate function
  256 000000A0 49D5            LDR              R1, =GPIO_PORTA_AFSEL_R ; R1 = 
                                                            &GPIO_PORTA_AFSEL_R
                                                            
  257 000000A2 6808            LDR              R0, [R1]    ; R0 = [R1]
  258 000000A4 F040 0003       ORR              R0, R0, #0x03 ; R0 = R0|0x03 (e
                                                            nable alt funct on 
                                                            PA1-0)
  259 000000A8 6008            STR              R0, [R1]    ; [R1] = R0
  260 000000AA         ; activa resistencia pull-up in RX (PA0)
  261 000000AA 49D4            LDR              R1, =GPIO_PORTA_PUR_R ; R1 = &G
                                                            PIO_PORTA_PUR_R



ARM Macro Assembler    Page 10 


  262 000000AC F040 0001       ORR              R0, #0x01   ; set bit 0 (enable
                                                             pull-up res in PA0
                                                            )
  263 000000B0 6008            STR              R0, [R1]
  264 000000B2         ; enable digital port
  265 000000B2 49D3            LDR              R1, =GPIO_PORTA_DEN_R ; R1 = &G
                                                            PIO_PORTA_DEN_R
  266 000000B4 6808            LDR              R0, [R1]    ; R0 = [R1]
  267 000000B6 F040 0003       ORR              R0, R0, #0x03 ; R0 = R0|0x03 (e
                                                            nable digital I/O o
                                                            n PA1-0)
  268 000000BA 6008            STR              R0, [R1]    ; [R1] = R0
  269 000000BC         ; configure as UART
  270 000000BC 49D1            LDR              R1, =GPIO_PORTA_PCTL_R ; R1 = &
                                                            GPIO_PORTA_PCTL_R
  271 000000BE 6808            LDR              R0, [R1]    ; R0 = [R1]
  272 000000C0 F020 00FF       BIC              R0, R0, #0x000000FF ; R0 = R0&~
                                                            0x000000FF (clear p
                                                            ort control field f
                                                            or PA1-0)
  273 000000C4 F100 0011       ADD              R0, R0, #0x00000011 ; R0 = R0+0
                                                            x00000011 (configur
                                                            e PA1-0 as UART)
  274 000000C8 6008            STR              R0, [R1]    ; [R1] = R0
  275 000000CA         ; disable analog functionality
  276 000000CA 49CF            LDR              R1, =GPIO_PORTA_AMSEL_R ; R1 = 
                                                            &GPIO_PORTA_AMSEL_R
                                                            
  277 000000CC F04F 0000       MOV              R0, #0      ; R0 = 0 (disable a
                                                            nalog functionality
                                                             on PA)
  278 000000D0 6008            STR              R0, [R1]    ; [R1] = R0
  279 000000D2         ; set the priority of the UART interrupt
  280 000000D2 49CE            LDR              R1, =NVIC_PRI1_R 
                                                            ; R1 = &NVIC_PRI1_R
                                                            
  281 000000D4 6808            LDR              R0, [R1]    ; R0 = [R1]
  282 000000D6 F420 407F       BIC              R0, R0, #0x0000FF00 ; R0 = R0&~
                                                            0xFFFF00FF (clear N
                                                            VIC priority field 
                                                            for UART0 interrupt
                                                            )
  283 000000DA F500 4080       ADD              R0, R0, #0x00004000 ; R0 = R0+0
                                                            x00004000 (UART0 = 
                                                            priority 2; stored 
                                                            in bits 13-15)
  284 000000DE 6008            STR              R0, [R1]    ; [R1] = R0
  285 000000E0         ; enable interrupt 5 in NVIC
  286 000000E0 49CB            LDR              R1, =NVIC_EN0_R 
                                                            ; R1 = &NVIC_EN0_R
  287 000000E2 F04F 0020       LDR              R0, =NVIC_EN0_INT5 ; R0 = NVIC_
                                                            EN0_INT5 (zeros wri
                                                            tten to enable regi
                                                            ster have no effect
                                                            )
  288 000000E6 6008            STR              R0, [R1]    ; [R1] = R0
  289 000000E8 F7FF FFFE       BL               EnableInterrupts ; enable all i
                                                            nterrupts (end of c
                                                            ritical section)



ARM Macro Assembler    Page 11 


  290 000000EC BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return)
  291 000000EE         
  292 000000EE         ; private helper subroutine
  293 000000EE         ; copy from hardware RX FIFO to software RX FIFO
  294 000000EE         ; stop when hardware RX FIFO is empty or software RX FIF
                       O is full
  295 000000EE         ; Modifies: R0, R1
  296 000000EE         copyHardwareToSoftware
  297 000000EE B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  298 000000F0         h2sloop
  299 000000F0         ; repeat the loop while (hardware receive FIFO not empty
                       ) and (software receive FIFO not full)
  300 000000F0 49C8            LDR              R1, =UART0_FR_R 
                                                            ; R1 = &UART0_FR_R
  301 000000F2 6808            LDR              R0, [R1]    ; R0 = [R1]
  302 000000F4 F000 0010       AND              R0, R0, #UART_FR_RXFE ; R0 = R0
                                                            &UART_FR_RXFE
  303 000000F8 2810            CMP              R0, #UART_FR_RXFE ; is R0 (UART
                                                            0_FR_R&UART_FR_RXFE
                                                            ) == UART_FR_RXFE? 
                                                            (is hardware receiv
                                                            e FIFO empty?)
  304 000000FA D008            BEQ              h2sdone     ; if so, skip to 'h
                                                            2sdone'
  305 000000FC F7FF FFFE       BL               RxFifo_Size
  306 00000100 280F            CMP              R0, #(FIFOSIZE - 1) ; is R0 (Rx
                                                            Fifo_Size()) == (FI
                                                            FOSIZE - 1)? (is so
                                                            ftware receive FIFO
                                                             full?)
  307 00000102 D004            BEQ              h2sdone     ; if so, skip to 'h
                                                            2sdone'
  308 00000104         ; read a character from the hardware FIFO
  309 00000104 49C4            LDR              R1, =UART0_DR_R 
                                                            ; R1 = &UART0_DR_R
  310 00000106 6808            LDR              R0, [R1]    ; R0 = [R1]
  311 00000108         ; store R0 (UART0_DR_R) in software receive FIFO
  312 00000108 F7FF FFFE       BL               RxFifo_Put
  313 0000010C E7F0            B                h2sloop     ; unconditional bra
                                                            nch to 'h2sloop'
  314 0000010E         h2sdone
  315 0000010E BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return)
  316 00000110         
  317 00000110         ; private helper subroutine
  318 00000110         ; copy from software TX FIFO to hardware TX FIFO
  319 00000110         ; stop when software TX FIFO is empty or hardware TX FIF
                       O is full
  320 00000110         ; Modifies: R0, R1
  321 00000110         copySoftwareToHardware
  322 00000110 B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  323 00000112         s2hloop
  324 00000112         ; repeat the loop while (hardware transmit FIFO not full
                       ) and (software transmit FIFO not empty)



ARM Macro Assembler    Page 12 


  325 00000112 49C0            LDR              R1, =UART0_FR_R 
                                                            ; R1 = &UART0_FR_R
  326 00000114 6808            LDR              R0, [R1]    ; R0 = [R1]
  327 00000116 F000 0020       AND              R0, R0, #UART_FR_TXFF ; R0 = R0
                                                            &UART_FR_TXFF
  328 0000011A 2820            CMP              R0, #UART_FR_TXFF ; is R0 (UART
                                                            0_FR_R&UART_FR_TXFF
                                                            ) == UART_FR_TXFF? 
                                                            (is hardware transm
                                                            it FIFO full?)
  329 0000011C D00B            BEQ              s2hdone     ; if so, skip to 's
                                                            2hdone'
  330 0000011E F7FF FFFE       BL               TxFifo_Size
  331 00000122 2800            CMP              R0, #0      ; is R0 (TxFifo_Siz
                                                            e()) == 0? (is soft
                                                            ware transmit FIFO 
                                                            empty?)
  332 00000124 D007            BEQ              s2hdone     ; if so, skip to 's
                                                            2hdone'
  333 00000126         ; read a character from the software FIFO
  334 00000126 B401            PUSH             {R0}        ; allocate local va
                                                            riable
  335 00000128 4668            MOV              R0, SP      ; R0 = SP (R0 point
                                                            s to local variable
                                                            )
  336 0000012A F7FF FFFE       BL               TxFifo_Get  ; get from software
                                                             transmit FIFO into
                                                             pointer R0
  337 0000012E BC01            POP              {R0}        ; pop data into R0
  338 00000130         ; store R0 (data from TxFifo_Get()) in hardware transmit
                        FIFO
  339 00000130 49B9            LDR              R1, =UART0_DR_R 
                                                            ; R1 = &UART0_DR_R
  340 00000132 6008            STR              R0, [R1]    ; [R1] = R0
  341 00000134 E7ED            B                s2hloop     ; unconditional bra
                                                            nch to 'h2sloop'
  342 00000136         s2hdone
  343 00000136 BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return)
  344 00000138         
  345 00000138         ;------------UART_InChar------------
  346 00000138         ; input ASCII character from UART
  347 00000138         ; spin if RxFifo is empty
  348 00000138         ; Input: none
  349 00000138         ; Output: R0  character in from UART
  350 00000138         ; Very Important: The UART0 interrupt handler automatica
                       lly
  351 00000138         ;  empties the hardware receive FIFO into the software F
                       IFO as
  352 00000138         ;  the hardware gets data.  If the UART0 interrupt is
  353 00000138         ;  disabled, the software receive FIFO may become empty,
                        and
  354 00000138         ;  this function will stall forever.
  355 00000138         ;  Ensure that the UART0 module is initialized and its
  356 00000138         ;  interrupt is enabled before calling this function.  D
                       o not
  357 00000138         ;  use UART I/O functions within a critical section of y
                       our



ARM Macro Assembler    Page 13 


  358 00000138         ;  main program.
  359 00000138         UART_InChar
  360 00000138 F04F 0000       MOV              R0, #0      ; initialize local 
                                                            variable
  361 0000013C B501            PUSH             {R0, LR}    ; save current valu
                                                            e of LR and allocat
                                                            e local variable
  362 0000013E         inCharLoop
  363 0000013E 4668            MOV              R0, SP      ; R0 = SP (R0 point
                                                            s to local variable
                                                            )
  364 00000140 F7FF FFFE       BL               RxFifo_Get  ; get from software
                                                             receive FIFO into 
                                                            pointer R0
  365 00000144 2800            CMP              R0, #FIFOFAIL ; is R0 (RxFifo_G
                                                            et()) == FIFOFAIL (
                                                            value returned when
                                                             FIFO empty)?
  366 00000146 D0FA            BEQ              inCharLoop  ; if so, skip to 'i
                                                            nCharLoop' (spin un
                                                            til receive a chara
                                                            cter)
  367 00000148 BD01            POP              {R0, PC}    ; pop data into R0 
                                                            and restore LR into
                                                             PC (return)
  368 0000014A         
  369 0000014A         ;------------UART_OutChar------------
  370 0000014A         ; output ASCII character to UART
  371 0000014A         ; spin if TxFifo is full
  372 0000014A         ; Input: R0  character out to UART
  373 0000014A         ; Output: none
  374 0000014A         ; Modifies: R0, R1
  375 0000014A         ; Very Important: The UART0 interrupt handler automatica
                       lly
  376 0000014A         ;  empties the software transmit FIFO into the hardware 
                       FIFO as
  377 0000014A         ;  the hardware sends data.  If the UART0 interrupt is
  378 0000014A         ;  disabled, the software transmit FIFO may become full,
                        and
  379 0000014A         ;  this function will stall forever.
  380 0000014A         ;  Ensure that the UART0 module is initialized and its
  381 0000014A         ;  interrupt is enabled before calling this function.  D
                       o not
  382 0000014A         ;  use UART I/O functions within a critical section of y
                       our
  383 0000014A         ;  main program.
  384 0000014A         UART_OutChar
  385 0000014A B510            PUSH             {R4, LR}    ; save current valu
                                                            e of R4 and LR
  386 0000014C 4604            MOV              R4, R0      ; R4 = R0 (save the
                                                             output character)
  387 0000014E         outCharLoop
  388 0000014E 4620            MOV              R0, R4      ; R0 = R4 (recall t
                                                            he output character
                                                            )
  389 00000150 F7FF FFFE       BL               TxFifo_Put  ; store R0 (output 
                                                            character) in softw
                                                            are transmit FIFO
  390 00000154 2800            CMP              R0, #FIFOFAIL ; is R0 (TxFifo_P



ARM Macro Assembler    Page 14 


                                                            ut()) == FIFOFAIL (
                                                            value returned when
                                                             FIFO full)?
  391 00000156 D0FA            BEQ              outCharLoop ; if so, skip to 'o
                                                            utCharLoop' (spin u
                                                            ntil space in softw
                                                            are transmit FIFO)
  392 00000158 4CA3            LDR              R4, =UART0_IM_R 
                                                            ; R4 = &UART0_IM_R
  393 0000015A 6820            LDR              R0, [R4]    ; R0 = [R4]
  394 0000015C F020 0020       BIC              R0, R0, #UART_IM_TXIM ; R0 = R0
                                                            &~UART_IM_TXIM (dis
                                                            able TX FIFO interr
                                                            upt)
  395 00000160 6020            STR              R0, [R4]    ; [R4] = R0
  396 00000162 F7FF FFD5       BL               copySoftwareToHardware ; privat
                                                            e helper subroutine
                                                            
  397 00000166 6820            LDR              R0, [R4]    ; R0 = [R4]
  398 00000168 F040 0020       ORR              R0, R0, #UART_IM_TXIM ; R0 = R0
                                                            |UART_IM_TXIM (enab
                                                            le TX FIFO interrup
                                                            t)
  399 0000016C 6020            STR              R0, [R4]    ; [R4] = R0
  400 0000016E BD10            POP              {R4, PC}    ; restore previous 
                                                            value of R4 into R4
                                                             and LR into PC (re
                                                            turn)
  401 00000170         
  402 00000170         ;------------UART0_Handler------------
  403 00000170         ; at least one of three things has happened:
  404 00000170         ; hardware TX FIFO goes from 3 to 2 or less items
  405 00000170         ; hardware RX FIFO goes from 1 to 2 or more items
  406 00000170         ; UART receiver has timed out
  407 00000170         ; received byte with stick parity bit in HIGH
  408 00000170         UART0_Handler
  409 00000170 B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  410 00000172         ; check the flags to determine which interrupt condition
                        occurred
  411 00000172         handlerCheck0
  412 00000172 49AA            LDR              R1, =UART0_RIS_R 
                                                            ; R1 = &UART0_RIS_R
                                                            
  413 00000174 6808            LDR              R0, [R1]    ; R0 = [R1]
  414 00000176 F000 0020       AND              R0, R0, #UART_RIS_TXRIS ; R0 = 
                                                            R0&UART_RIS_TXRIS
  415 0000017A 2820            CMP              R0, #UART_RIS_TXRIS ; is R0 (UA
                                                            RT0_RIS_R&UART_RIS_
                                                            TXRIS) == UART_RIS_
                                                            TXRIS? (does hardwa
                                                            re TX FIFO have <= 
                                                            2 items?)
  416 0000017C D10E            BNE              handlerCheck1 ; if not, skip to
                                                             'handlerCheck1' an
                                                            d check the next fl
                                                            ag
  417 0000017E         ; acknowledge TX FIFO interrupt
  418 0000017E 49A8            LDR              R1, =UART0_ICR_R 



ARM Macro Assembler    Page 15 


                                                            ; R1 = &UART0_ICR_R
                                                            
  419 00000180 F04F 0020       LDR              R0, =UART_ICR_TXIC ; R0 = UART_
                                                            ICR_TXIC (zeros wri
                                                            tten to interrupt c
                                                            lear register have 
                                                            no effect)
  420 00000184 6008            STR              R0, [R1]    ; [R1] = R0
  421 00000186         ; copy from software TX FIFO to hardware TX FIFO
  422 00000186 F7FF FFC3       BL               copySoftwareToHardware ; privat
                                                            e helper subroutine
                                                            
  423 0000018A         ; if the software transmit FIFO is now empty, disable TX
                        FIFO interrupt
  424 0000018A         ; UART_OutChar() will re-enable the TX FIFO interrupt wh
                       en it is needed
  425 0000018A F7FF FFFE       BL               TxFifo_Size
  426 0000018E 2800            CMP              R0, #0      ; is R0 (TxFifo_Siz
                                                            e()) == 0? (is soft
                                                            ware transmit FIFO 
                                                            empty?)
  427 00000190 D104            BNE              handlerCheck1 ; if not, skip to
                                                             'handlerCheck1'
  428 00000192 4995            LDR              R1, =UART0_IM_R 
                                                            ; R1 = &UART0_IM_R
  429 00000194 6808            LDR              R0, [R1]    ; R0 = [R1]
  430 00000196 F020 0020       BIC              R0, R0, #UART_IM_TXIM ; R0 = R0
                                                            &~UART_IM_TXIM (dis
                                                            able TX FIFO interr
                                                            upt)
  431 0000019A 6008            STR              R0, [R1]    ; [R1] = R0
  432 0000019C         handlerCheck1
  433 0000019C 499F            LDR              R1, =UART0_RIS_R 
                                                            ; R1 = &UART0_RIS_R
                                                            
  434 0000019E 6808            LDR              R0, [R1]    ; R0 = [R1]
  435 000001A0 F000 0010       AND              R0, R0, #UART_RIS_RXRIS ; R0 = 
                                                            R0&UART_RIS_RXRIS
  436 000001A4 2810            CMP              R0, #UART_RIS_RXRIS ; is R0 (UA
                                                            RT0_RIS_R&UART_RIS_
                                                            RXRIS) == UART_RIS_
                                                            RXRIS? (does hardwa
                                                            re RX FIFO have >= 
                                                            2 items?)
  437 000001A6 D105            BNE              handlerCheck2 ; if not, skip to
                                                             'handlerCheck2' an
                                                            d check the next fl
                                                            ag
  438 000001A8         ; acknowledge RX FIFO interrupt
  439 000001A8 499D            LDR              R1, =UART0_ICR_R 
                                                            ; R1 = &UART0_ICR_R
                                                            
  440 000001AA F04F 0010       LDR              R0, =UART_ICR_RXIC ; R0 = UART_
                                                            ICR_RXIC (zeros wri
                                                            tten to interrupt c
                                                            lear register have 
                                                            no effect)
  441 000001AE 6008            STR              R0, [R1]    ; [R1] = R0
  442 000001B0         ; copy from hardware RX FIFO to software RX FIFO



ARM Macro Assembler    Page 16 


  443 000001B0 F7FF FF9D       BL               copyHardwareToSoftware ; privat
                                                            e helper subroutine
                                                            
  444 000001B4         handlerCheck2
  445 000001B4 4999            LDR              R1, =UART0_RIS_R 
                                                            ; R1 = &UART0_RIS_R
                                                            
  446 000001B6 6808            LDR              R0, [R1]    ; R0 = [R1]
  447 000001B8 F000 0040       AND              R0, R0, #UART_RIS_RTRIS ; R0 = 
                                                            R0&UART_RIS_RTRIS
  448 000001BC 2840            CMP              R0, #UART_RIS_RTRIS ; is R0 (UA
                                                            RT0_RIS_R&UART_RIS_
                                                            RTRIS) == UART_RIS_
                                                            RTRIS? (did the rec
                                                            eiver timeout?)
  449 000001BE D105            BNE              handlerCheck3 ; if not, skip to
                                                             'handlerDone'
  450 000001C0         ; acknowledge receiver timeout interrupt
  451 000001C0 4997            LDR              R1, =UART0_ICR_R 
                                                            ; R1 = &UART0_ICR_R
                                                            
  452 000001C2 F04F 0040       LDR              R0, =UART_ICR_RTIC ; R0 = UART_
                                                            ICR_RTIC (zeros wri
                                                            tten to interrupt c
                                                            lear register have 
                                                            no effect)
  453 000001C6 6008            STR              R0, [R1]    ; [R1] = R0
  454 000001C8         ; copy from hardware RX FIFO to software RX FIFO
  455 000001C8 F7FF FF91       BL               copyHardwareToSoftware ; privat
                                                            e helper subroutine
                                                            
  456 000001CC         handlerCheck3
  457 000001CC 4993            LDR              R1, =UART0_RIS_R 
                                                            ; R1 = &UART0_RIS_R
                                                            
  458 000001CE 6808            LDR              R0, [R1]    ; R0 = [R1]
  459 000001D0 F400 7080       AND              R0, R0, #UART_RIS_PERIS ; R0 = 
                                                            R0&UART_RIS_PERIS
  460 000001D4 F5B0 7F80       CMP              R0, #UART_RIS_PERIS ; is R0 (UA
                                                            RT0_RIS_R&UART_RIS_
                                                            PERIS) == UART_RIS_
                                                            PERIS? (did the par
                                                            ity error?)
  461 000001D8 D105            BNE              handlerDone ; if not, skip to '
                                                            handlerDone'
  462 000001DA         ; acknowledge parity error interrupt
  463 000001DA 4991            LDR              R1, =UART0_ICR_R 
                                                            ; R1 = &UART0_ICR_R
                                                            
  464 000001DC F44F 7080       LDR              R0, =UART_ICR_PEIC ; R0 = UART_
                                                            ICR_PEIC (zeros wri
                                                            tten to interrupt c
                                                            lear register have 
                                                            no effect)
  465 000001E0 6008            STR              R0, [R1]    ; [R1] = R0
  466 000001E2         ;update personal flag R5
  467 000001E2 F04F 0501       MOV              R5, #1      ; R5 = 1 
  468 000001E6         handlerDone
  469 000001E6 BD00            POP              {PC}        ; restore previous 



ARM Macro Assembler    Page 17 


                                                            value of LR into PC
                                                             (return from inter
                                                            rupt)
  470 000001E8         
  471 000001E8         ;------------UART_OutString------------
  472 000001E8         ; Output String (NULL termination)
  473 000001E8         ; Input: R0  pointer to a NULL-terminated string to be t
                       ransferred
  474 000001E8         ; Output: none
  475 000001E8         UART_OutString
  476 000001E8 B510            PUSH             {R4, LR}    ; save current valu
                                                            e of R4 and LR
  477 000001EA 4604            MOV              R4, R0      ; R4 = R0 (save the
                                                             string pointer)
  478 000001EC         outStringLoop
  479 000001EC 7820            LDRB             R0, [R4]    ; R0 = [R4] (R0 get
                                                            s unsigned characte
                                                            r pointed to by R4,
                                                             promoted to 32 bit
                                                            s)
  480 000001EE 2800            CMP              R0, #0      ; is R0 (next chara
                                                            cter in string) == 
                                                            0 (NULL)?
  481 000001F0 D004            BEQ              outStringDone ; if so, skip to 
                                                            'outStringDone'
  482 000001F2 F7FF FFFE       BL               UART_OutChar ; send the charact
                                                            er to the UART
  483 000001F6 F104 0401       ADD              R4, R4, #1  ; R4 = R4 + 1 (incr
                                                            ement string pointe
                                                            r)
  484 000001FA E7F7            B                outStringLoop ; unconditional b
                                                            ranch to 'outString
                                                            Loop'
  485 000001FC         outStringDone
  486 000001FC BD10            POP              {R4, PC}    ; restore previous 
                                                            value of R4 into R4
                                                             and LR into PC (re
                                                            turn)
  487 000001FE         
  488 000001FE         ;------------UART_InUDec------------
  489 000001FE         ; InUDec accepts ASCII input in unsigned decimal format
  490 000001FE         ;     and converts to a 32-bit unsigned number
  491 000001FE         ;     valid range is 0 to 4294967295 (2^32-1)
  492 000001FE         ; Input: none
  493 000001FE         ; Output: R0  32-bit unsigned number
  494 000001FE         ; If you enter a number above 4294967295, it will return
                        an incorrect value
  495 000001FE         ; Backspace will remove last digit typed
  496 000001FE         UART_InUDec
  497 000001FE B530            PUSH             {R4, R5, LR} ; save current val
                                                            ue of R4, R5, and L
                                                            R
  498 00000200 F04F 0400       MOV              R4, #0      ; R4 = 0 (number = 
                                                            0)
  499 00000204 F04F 0500       MOV              R5, #0      ; R5 = 0 (length = 
                                                            0)
  500 00000208         inUDecLoop
  501 00000208         ; accepts characters until <enter> is typed
  502 00000208 F7FF FFFE       BL               UART_InChar ; get a character f



ARM Macro Assembler    Page 18 


                                                            rom the UART
  503 0000020C 280D            CMP              R0, #CR     ; is R0 (most recen
                                                            t character) == 0x0
                                                            D (<enter>)?
  504 0000020E D01C            BEQ              inUDecDone  ; if so, skip to 'i
                                                            nUDecDone'
  505 00000210         ; check if the input is a digit, 0-9
  506 00000210         ; if the character is not 0-9, it is ignored and not ech
                       oed
  507 00000210 2830            CMP              R0, #'0'    ; is R0 (most recen
                                                            t character) < '0'?
                                                            
  508 00000212 D30D            BLO              inUDecNAN   ; if so, skip to 'i
                                                            nUDecNAN'
  509 00000214 2839            CMP              R0, #'9'    ; is R0 (most recen
                                                            t character) > '9'?
                                                            
  510 00000216 D80B            BHI              inUDecNAN   ; if so, skip to 'i
                                                            nUDecNAN'
  511 00000218 F04F 010A       MOV              R1, #10     ; R1 = 10
  512 0000021C FB04 F401       MUL              R4, R4, R1  ; R4 = R4*R1 (numbe
                                                            r = number*10)
  513 00000220 4404            ADD              R4, R4, R0  ; R4 = R4 + R0 (num
                                                            ber = number*10 + c
                                                            haracter)
  514 00000222 F1A4 0430       SUB              R4, R4, #'0' ; R4 = R4 - '0' (n
                                                            umber = number*10 +
                                                             character - '0')
  515 00000226 F105 0501       ADD              R5, R5, #1  ; R5 = R5 + 1 (leng
                                                            th = length + 1)
  516 0000022A F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  517 0000022E E7EB            B                inUDecLoop  ; unconditional bra
                                                            nch to 'inUDecLoop'
                                                            
  518 00000230         inUDecNAN
  519 00000230         ; if the input is a backspace, then the return number is
                       
  520 00000230         ; changed and a backspace is outputted to the screen
  521 00000230 2808            CMP              R0, #BS     ; is R0 (most recen
                                                            t character) == 0x0
                                                            8 (<backspace>)?
  522 00000232 D1E9            BNE              inUDecLoop  ; if not, skip to '
                                                            inUDecLoop'
  523 00000234 2D00            CMP              R5, #0      ; is R5 (length) ==
                                                             0?
  524 00000236 D0E7            BEQ              inUDecLoop  ; if so, skip to 'i
                                                            nUDecLoop'
  525 00000238 F04F 010A       MOV              R1, #10     ; R1 = 10
  526 0000023C FBB4 F4F1       UDIV             R4, R4, R1  ; R4 = R4/R1 (numbe
                                                            r = number/10)
  527 00000240 F1A5 0501       SUB              R5, R5, #1  ; R5 = R5 - 1 (leng
                                                            th = length - 1)
  528 00000244 F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  529 00000248         ;    MOV R0, #SPA                    ; R0 = SPA (<space>
                       )
  530 00000248         ;    BL  UART_OutChar                ; echo additional <
                       space> to the UART



ARM Macro Assembler    Page 19 


  531 00000248         ;    MOV R0, #BS                     ; R0 = BS (<backspa
                       ce>)
  532 00000248         ;    BL  UART_OutChar                ; echo additional <
                       backspace> to the UART
  533 00000248 E7DE            B                inUDecLoop  ; unconditional bra
                                                            nch to 'inUDecLoop'
                                                            
  534 0000024A         inUDecDone
  535 0000024A 4620            MOV              R0, R4      ; R0 = R4 (return '
                                                            number' in R0)
  536 0000024C BD30            POP              {R4, R5, PC} ; restore previous
                                                             value of R4 into R
                                                            4, R5 into R5, and 
                                                            LR into PC (return)
                                                            
  537 0000024E         
  538 0000024E         ;Modulus macro from Section 5.4
  539 0000024E         ;Mod and Divnd must not be the same register
  540 0000024E                 MACRO
  541 0000024E                 UMOD             $Mod,$Divnd,$Divsr ;MOD,DIVIDEN
                                                            D,DIVISOR
  542 0000024E                 UDIV             $Mod,$Divnd,$Divsr ;Mod = DIVID
                                                            END/DIVISOR
  543 0000024E                 MUL              $Mod,$Mod,$Divsr ;Mod = DIVISOR
                                                            *(DIVIDEND/DIVISOR)
                                                            
  544 0000024E                 SUB              $Mod,$Divnd,$Mod ;Mod = DIVIDEN
                                                            D-DIVISOR*(DIVIDEND
                                                            /DIVISOR)
  545 0000024E                 MEND
  546 0000024E         
  547 0000024E         ;-----------------------UART_OutUDec--------------------
                       ---
  548 0000024E         ; Output a 32-bit number in unsigned decimal format
  549 0000024E         ; Input: R0  32-bit number to be transferred
  550 0000024E         ; Output: none
  551 0000024E         ; Variable format 1-10 digits with no space before or af
                       ter
  552 0000024E         UART_OutUDec
  553 0000024E         ; This function uses recursion to convert decimal number
                       
  554 0000024E         ;   of unspecified length as an ASCII string
  555 0000024E B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  556 00000250 280A            CMP              R0, #10     ; is R0 (number) < 
                                                            10?
  557 00000252 D310            BLO              outUDecDone ; if so, skip to 'o
                                                            utUDecDone'
  558 00000254         ; R0 (number) >= 10
  559 00000254         ; recursive call to UART_OutUDec with R0/10 (number/10)
  560 00000254 B401            PUSH             {R0}        ; save current valu
                                                            e of R0 (number)
  561 00000256 F04F 010A       MOV              R1, #10     ; R1 = 10
  562 0000025A FBB0 F0F1       UDIV             R0, R0, R1  ; R0 = R0/R1 (numbe
                                                            r = number/10)
  563 0000025E F7FF FFFE       BL               UART_OutUDec
  564 00000262 BC01            POP              {R0}        ; restore previous 
                                                            value of R0 into R0
                                                            



ARM Macro Assembler    Page 20 


  565 00000264         ; extract the ones digit of R0 (number) with R0 = R0%10
  566 00000264 F04F 010A       MOV              R1, #10     ; R1 = 10
  567 00000268 4602            MOV              R2, R0      ; R2 = R0 (temporar
                                                            ily holds number)
  568 0000026A                 UMOD             R0, R2, R1  ; R0 = R2%R1 (numbe
                                                            r = number%10)
  542 0000026A FBB2 F0F1       UDIV             R0,R2,R1    ;Mod = DIVIDEND/DIV
                                                            ISOR
  543 0000026E FB00 F001       MUL              R0,R0,R1    ;Mod = DIVISOR*(DIV
                                                            IDEND/DIVISOR)
  544 00000272 EBA2 0000       SUB              R0,R2,R0    ;Mod = DIVIDEND-DIV
                                                            ISOR*(DIVIDEND/DIVI
                                                            SOR)
  569 00000276         outUDecDone
  570 00000276         ; R0 (number) is between 0 and 9
  571 00000276 F100 0030       ADD              R0, R0, #'0' ; R0 = R0 + '0' (n
                                                            umber = number + '0
                                                            ')
  572 0000027A F7FF FFFE       BL               UART_OutChar ; send the charact
                                                            er to the UART
  573 0000027E BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return)
  574 00000280         
  575 00000280         ;---------------------UART_InUHex-----------------------
                       -----------------
  576 00000280         ; Accepts ASCII input in unsigned hexadecimal (base 16) 
                       format
  577 00000280         ; Input: none
  578 00000280         ; Output: R0  32-bit unsigned number
  579 00000280         ; No '$' or '0x' need be entered, just the 1 to 8 hex di
                       gits
  580 00000280         ; It will convert lower case a-f to uppercase A-F
  581 00000280         ;     and converts to a 32-bit unsigned number
  582 00000280         ;     value range is 0 to FFFFFFFF
  583 00000280         ; If you enter a number above FFFFFFFF, it will return a
                       n incorrect value
  584 00000280         ; Backspace will remove last digit typed
  585 00000280         UART_InUHex
  586 00000280 B530            PUSH             {R4, R5, LR} ; save current val
                                                            ue of R4, R5, and L
                                                            R
  587 00000282 F04F 0400       MOV              R4, #0      ; R4 = 0 (number = 
                                                            0)
  588 00000286 F04F 0500       MOV              R5, #0      ; R5 = 0 (length = 
                                                            0)
  589 0000028A         inUHexLoop
  590 0000028A         ; accepts characters until <enter> is typed
  591 0000028A F7FF FFFE       BL               UART_InChar ; get a character f
                                                            rom the UART
  592 0000028E 280D            CMP              R0, #CR     ; is R0 (most recen
                                                            t character) == 0x0
                                                            D (<enter>)?
  593 00000290 D040            BEQ              inUHexDone  ; if so, skip to 'i
                                                            nUHexDone'
  594 00000292         ; check if the input is a digit, 0-9
  595 00000292         ; if the character is not 0-9, check for other valid inp
                       ut
  596 00000292 2830            CMP              R0, #'0'    ; is R0 (most recen



ARM Macro Assembler    Page 21 


                                                            t character) < '0'?
                                                            
  597 00000294 D30D            BLO              inUHexNotDigit ; if so, skip to
                                                             'inUHexNotDigit'
  598 00000296 2839            CMP              R0, #'9'    ; is R0 (most recen
                                                            t character) > '9'?
                                                            
  599 00000298 D80B            BHI              inUHexNotDigit ; if so, skip to
                                                             'inUHexNotDigit'
  600 0000029A F04F 0110       MOV              R1, #0x10   ; R1 = 0x10 = 16
  601 0000029E FB04 F401       MUL              R4, R4, R1  ; R4 = R4*R1 (numbe
                                                            r = number*16)
  602 000002A2 4404            ADD              R4, R4, R0  ; R4 = R4 + R0 (num
                                                            ber = number*16 + c
                                                            haracter)
  603 000002A4 F1A4 0430       SUB              R4, R4, #'0' ; R4 = R4 - '0' (n
                                                            umber = number*16 +
                                                             character - '0')
  604 000002A8 F105 0501       ADD              R5, R5, #1  ; R5 = R5 + 1 (leng
                                                            th = length + 1)
  605 000002AC F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  606 000002B0 E7EB            B                inUHexLoop  ; unconditional bra
                                                            nch to 'inUHexLoop'
                                                            
  607 000002B2         inUHexNotDigit
  608 000002B2         ; check if the input is an uppercase letter, 'A'-'F'
  609 000002B2 2841            CMP              R0, #'A'    ; is R0 (most recen
                                                            t character) < 'A'?
                                                            
  610 000002B4 D30F            BLO              inUHexNotUpper ; if so, skip to
                                                             'inUHexNotUpper'
  611 000002B6 2846            CMP              R0, #'F'    ; is R0 (most recen
                                                            t character) > 'F'?
                                                            
  612 000002B8 D80D            BHI              inUHexNotUpper ; if so, skip to
                                                             'inUHexNotUpper'
  613 000002BA F04F 0110       MOV              R1, #0x10   ; R1 = 0x10 = 16
  614 000002BE FB04 F401       MUL              R4, R4, R1  ; R4 = R4*R1 (numbe
                                                            r = number*16)
  615 000002C2 4404            ADD              R4, R4, R0  ; R4 = R4 + R0 (num
                                                            ber = number*16 + c
                                                            haracter)
  616 000002C4 F1A4 0441       SUB              R4, R4, #'A' ; R4 = R4 - '0' (n
                                                            umber = number*16 +
                                                             character - 'A')
  617 000002C8 F104 040A       ADD              R4, R4, #0xA ; R4 = R4 + 0xA (n
                                                            umber = number*16 +
                                                             character - 'A' + 
                                                            10)
  618 000002CC F105 0501       ADD              R5, R5, #1  ; R5 = R5 + 1 (leng
                                                            th = length + 1)
  619 000002D0 F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  620 000002D4 E7D9            B                inUHexLoop  ; unconditional bra
                                                            nch to 'inUHexLoop'
                                                            
  621 000002D6         inUHexNotUpper
  622 000002D6         ; check if the input is a lowercase letter, 'a'-'f'



ARM Macro Assembler    Page 22 


  623 000002D6 2861            CMP              R0, #'a'    ; is R0 (most recen
                                                            t character) < 'a'?
                                                            
  624 000002D8 D30F            BLO              inUHexOther ; if so, skip to 'i
                                                            nUHexOther'
  625 000002DA 2866            CMP              R0, #'f'    ; is R0 (most recen
                                                            t character) > 'f'?
                                                            
  626 000002DC D80D            BHI              inUHexOther ; if so, skip to 'i
                                                            nUHexOther'
  627 000002DE F04F 0110       MOV              R1, #0x10   ; R1 = 0x10 = 16
  628 000002E2 FB04 F401       MUL              R4, R4, R1  ; R4 = R4*R1 (numbe
                                                            r = number*16)
  629 000002E6 4404            ADD              R4, R4, R0  ; R4 = R4 + R0 (num
                                                            ber = number*16 + c
                                                            haracter)
  630 000002E8 F1A4 0461       SUB              R4, R4, #'a' ; R4 = R4 - '0' (n
                                                            umber = number*16 +
                                                             character - 'a')
  631 000002EC F104 040A       ADD              R4, R4, #0xA ; R4 = R4 + 0xA (n
                                                            umber = number*16 +
                                                             character - 'a' + 
                                                            10)
  632 000002F0 F105 0501       ADD              R5, R5, #1  ; R5 = R5 + 1 (leng
                                                            th = length + 1)
  633 000002F4 F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  634 000002F8 E7C7            B                inUHexLoop  ; unconditional bra
                                                            nch to 'inUHexLoop'
                                                            
  635 000002FA         inUHexOther
  636 000002FA         ; if the input is a backspace, then the return number is
                       
  637 000002FA         ; changed and a backspace is outputted to the screen
  638 000002FA 2808            CMP              R0, #BS     ; is R0 (most recen
                                                            t character) == 0x0
                                                            8 (<backspace>)?
  639 000002FC D1C5            BNE              inUHexLoop  ; if not, skip to '
                                                            inUHexLoop'
  640 000002FE 2D00            CMP              R5, #0      ; is R5 (length) ==
                                                             0?
  641 00000300 D0C3            BEQ              inUHexLoop  ; if so, skip to 'i
                                                            nUHexLoop'
  642 00000302 F04F 0110       MOV              R1, #0x10   ; R1 = 0x10 = 16
  643 00000306 FBB4 F4F1       UDIV             R4, R4, R1  ; R4 = R4/R1 (numbe
                                                            r = number/16)
  644 0000030A F1A5 0501       SUB              R5, R5, #1  ; R5 = R5 - 1 (leng
                                                            th = length - 1)
  645 0000030E F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  646 00000312         ;    MOV R0, #SPA                    ; R0 = SPA (<space>
                       )
  647 00000312         ;    BL  UART_OutChar                ; echo additional <
                       space> to the UART
  648 00000312         ;    MOV R0, #BS                     ; R0 = BS (<backspa
                       ce>)
  649 00000312         ;    BL  UART_OutChar                ; echo additional <
                       backspace> to the UART
  650 00000312 E7BA            B                inUHexLoop  ; unconditional bra



ARM Macro Assembler    Page 23 


                                                            nch to 'inUHexLoop'
                                                            
  651 00000314         inUHexDone
  652 00000314 4620            MOV              R0, R4      ; R0 = R4 (return '
                                                            number' in R0)
  653 00000316 BD30            POP              {R4, R5, PC} ; restore previous
                                                             value of R4 into R
                                                            4, R5 into R5, and 
                                                            LR into PC (return)
                                                            
  654 00000318         
  655 00000318         ;--------------------------UART_OutUHex-----------------
                       -----------
  656 00000318         ; Output a 32-bit number in unsigned hexadecimal format
  657 00000318         ; Input: R0  32-bit number to be transferred
  658 00000318         ; Output: none
  659 00000318         ; Variable format 1 to 8 digits with no space before or 
                       after
  660 00000318         UART_OutUHex
  661 00000318         ; This function uses recursion to convert the number of
  662 00000318         ;   unspecified length as an ASCII string
  663 00000318 B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  664 0000031A 2810            CMP              R0, #0x10   ; is R0 (number) < 
                                                            16?
  665 0000031C D315            BLO              outUHexOneDigit ; if so, skip t
                                                            o 'outUHexOneDigit'
                                                            
  666 0000031E         outUHexManyDigits
  667 0000031E         ; R0 (number) >= 16
  668 0000031E         ; recursive call to UART_OutUHex with R0/0x10 (number/0x
                       10)
  669 0000031E B401            PUSH             {R0}        ; save current valu
                                                            e of R0 (number)
  670 00000320 F04F 0110       MOV              R1, #0x10   ; R1 = 0x10 = 16
  671 00000324 FBB0 F0F1       UDIV             R0, R0, R1  ; R0 = R0/R1 (numbe
                                                            r = number/0x10)
  672 00000328 F7FF FFFE       BL               UART_OutUHex
  673 0000032C BC01            POP              {R0}        ; restore previous 
                                                            value of R0 into R0
                                                            
  674 0000032E         ; recursive call to UART_OutUHex with R0%0x10 (number%0x
                       10)
  675 0000032E B401            PUSH             {R0}        ; save current valu
                                                            e of R0 (number)
  676 00000330 F04F 0110       MOV              R1, #0x10   ; R1 = 0x10 = 16
  677 00000334 4602            MOV              R2, R0      ; R2 = R0 (temporar
                                                            ily holds number)
  678 00000336                 UMOD             R0, R2, R1  ; R0 = R2%R1 (numbe
                                                            r = number%0x10)
  542 00000336 FBB2 F0F1       UDIV             R0,R2,R1    ;Mod = DIVIDEND/DIV
                                                            ISOR
  543 0000033A FB00 F001       MUL              R0,R0,R1    ;Mod = DIVISOR*(DIV
                                                            IDEND/DIVISOR)
  544 0000033E EBA2 0000       SUB              R0,R2,R0    ;Mod = DIVIDEND-DIV
                                                            ISOR*(DIVIDEND/DIVI
                                                            SOR)
  679 00000342 F7FF FFFE       BL               UART_OutUHex
  680 00000346 BC01            POP              {R0}        ; restore previous 



ARM Macro Assembler    Page 24 


                                                            value of R0 into R0
                                                            
  681 00000348 E00C            B                outUHexDone ; unconditional bra
                                                            nch to 'outUHexDone
                                                            '
  682 0000034A         outUHexOneDigit
  683 0000034A         ; R0 (number) is between 0 and 15
  684 0000034A 280A            CMP              R0, #0xA    ; is R0 (number) < 
                                                            10?
  685 0000034C D306            BLO              outUHexOneNumber ; if so, skip 
                                                            to 'outUHexOneNumbe
                                                            r'
  686 0000034E         outUHexOneLetter
  687 0000034E         ; R0 (number) is between 10 and 15
  688 0000034E         ; convert R0 to a character between 'A' and 'F'
  689 0000034E F1A0 000A       SUB              R0, R0, #0xA ; R0 = R0 - 10 (nu
                                                            mber = number - 0xA
                                                            )
  690 00000352 F100 0041       ADD              R0, R0, #'A' ; R0 = R0 + 'A' (n
                                                            umber = number - 0x
                                                            A + 'A')
  691 00000356 F7FF FFFE       BL               UART_OutChar ; send the charact
                                                            er to the UART
  692 0000035A E003            B                outUHexDone ; unconditional bra
                                                            nch to 'outUHexDone
                                                            '
  693 0000035C         outUHexOneNumber
  694 0000035C         ; R0 (number) is between 0 and 9
  695 0000035C         ; convert R0 to a character between '0' and '9'
  696 0000035C F100 0030       ADD              R0, R0, #'0' ; R0 = R0 + 'A' (n
                                                            umber = number + '0
                                                            ')
  697 00000360 F7FF FFFE       BL               UART_OutChar ; send the charact
                                                            er to the UART
  698 00000364         outUHexDone
  699 00000364 BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return)
  700 00000366         
  701 00000366         ;------------UART_InString------------
  702 00000366         ; Accepts ASCII characters from the serial port
  703 00000366         ;    and adds them to a string until <enter> is typed
  704 00000366         ;    or until max length of the string is reached.
  705 00000366         ; It echoes each character as it is inputted.
  706 00000366         ; If a backspace is inputted, the string is modified
  707 00000366         ;    and the backspace is echoed
  708 00000366         ; terminates the string with a null character
  709 00000366         ; uses busy-waiting synchronization on RDRF
  710 00000366         ; Input: R0  pointer to empty buffer
  711 00000366         ;        R1  number of non-NULL characters that can
  712 00000366         ;            fit in the buffer (in other words size-1)
  713 00000366         ; Output: R0  pointer to NULL-terminated string
  714 00000366         ; -- Modified by Agustinus Darmawan + Mingjie Qiu --
  715 00000366         UART_InString
  716 00000366 B570            PUSH             {R4, R5, R6, LR} ; save current
                                                             value of R4, R5, R
                                                            6, and LR
  717 00000368 4604            MOV              R4, R0      ; R4 = R0 (save the
                                                             buffer pointer par



ARM Macro Assembler    Page 25 


                                                            ameter)
  718 0000036A F04F 0500       MOV              R5, #0      ; R5 = 0 (length = 
                                                            0)
  719 0000036E 460E            MOV              R6, R1      ; R6 = R1 (save the
                                                             max length paramet
                                                            er)
  720 00000370         inStringLoop
  721 00000370         ; accepts characters until <enter> is typed
  722 00000370 F7FF FFFE       BL               UART_InChar ; get a character f
                                                            rom the UART
  723 00000374 280D            CMP              R0, #CR     ; is R0 (most recen
                                                            t character) == 0x0
                                                            D (<enter>)?
  724 00000376 D014            BEQ              inStringDone ; if so, skip to '
                                                            inStringDone'
  725 00000378         ; if the input is a backspace, then the return string is
                       
  726 00000378         ; changed and a backspace is outputted to the screen
  727 00000378 2808            CMP              R0, #BS     ; is R0 (most recen
                                                            t character) == 0x0
                                                            8 (<backspace>)?
  728 0000037A D108            BNE              inStringCont ; if not, skip to 
                                                            'inStringCont'
  729 0000037C 2D00            CMP              R5, #0      ; is R5 (length) ==
                                                             0?
  730 0000037E D0F7            BEQ              inStringLoop ; if so, skip to '
                                                            inStringLoop'
  731 00000380 F1A4 0401       SUB              R4, R4, #1  ; R4 = R4 - 1 (buff
                                                            erPt = bufferPt - 1
                                                            )
  732 00000384 F1A5 0501       SUB              R5, R5, #1  ; R5 = R5 - 1 (leng
                                                            th = length - 1)
  733 00000388 F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  734 0000038C         ;    MOV R0, #SPA                    ; R0 = SPA (<space>
                       )
  735 0000038C         ;    BL  UART_OutChar                ; echo additional <
                       space> to the UART
  736 0000038C         ;    MOV R0, #BS                     ; R0 = BS (<backspa
                       ce>)
  737 0000038C         ;    BL  UART_OutChar                ; echo additional <
                       backspace> to the UART
  738 0000038C E7F0            B                inStringLoop ; unconditional br
                                                            anch to 'inStringLo
                                                            op'
  739 0000038E         inStringCont
  740 0000038E         ; if the buffer has room for another character, add the
  741 0000038E         ; incoming character to the buffer
  742 0000038E 42B5            CMP              R5, R6      ; is R5 (length) ==
                                                             R6 (max length)?
  743 00000390 D0EE            BEQ              inStringLoop ; if so, skip to '
                                                            inUDecLoop'
  744 00000392 7020            STRB             R0, [R4]    ; [R4] = R0 (store 
                                                            8 least significant
                                                             bits of R0 into lo
                                                            cation pointed to b
                                                            y R4)
  745 00000394 F104 0401       ADD              R4, R4, #1  ; R4 = R4 + 1 (buff
                                                            erPt = bufferPt + 1



ARM Macro Assembler    Page 26 


                                                            )
  746 00000398 F105 0501       ADD              R5, R5, #1  ; R5 = R5 + 1 (leng
                                                            th = length + 1)
  747 0000039C F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  748 000003A0 E7E6            B                inStringLoop ; unconditional br
                                                            anch to 'inStringLo
                                                            op'
  749 000003A2         inStringDone
  750 000003A2         ; NULL terminate the string
  751 000003A2 F04F 0000       MOV              R0, #0      ; R0 = 0 = NULL
  752 000003A6 7020            STRB             R0, [R4]    ; [R4] = R0 (store 
                                                            R0 (NULL) into loca
                                                            tion pointed to by 
                                                            R4)
  753 000003A8 4620            MOV              R0, R4      ; R0 = R4 (return t
                                                            he buffer pointer i
                                                            n R0)
  754 000003AA BD70            POP              {R4, R5, R6, PC} ; restore prev
                                                            ious value of R4 in
                                                            to R4, R5 into R5, 
                                                            R6 into R6, and LR 
                                                            into PC (return)
  755 000003AC         
  756 000003AC         ;;------------UART_HighStickParity------------
  757 000003AC         ; Configura el SPS, EPS y PEN del UART0
  758 000003AC         ; para que el bit de paridad envie 1
  759 000003AC         UART_HighStickParity
  760 000003AC B503            PUSH             {R0, R1, LR} ; save current val
                                                            ue of R0, R1 and LR
                                                            
  761 000003AE 490C            LDR              R1, =UART0_LCRH_R ; R1 = &UART0
                                                            _LCRH_R
  762 000003B0 6808            LDR              R0, [R1]    ; R0 = [R1]
  763 000003B2 F020 0004       BIC              R0, R0, #UART_LCRH_EPS 
                                                            ; HIGH Stick Parity
                                                            
  764 000003B6 6008            STR              R0, [R1]    ; [R1] = R0
  765 000003B8 BD03            POP              {R0, R1, PC} ; restore previous
                                                             value of R0 into R
                                                            0, R1 into R1, and 
                                                            LR into PC (return)
                                                            
  766 000003BA         ;;------------UART_LowStickParity------------
  767 000003BA         ; Configura el SPS, EPS y PEN del UART0
  768 000003BA         ; para que el bit de paridad envie 0
  769 000003BA         UART_LowStickParity
  770 000003BA B503            PUSH             {R0, R1, LR} ; save current val
                                                            ue of R0, R1 and LR
                                                            
  771 000003BC 4908            LDR              R1, =UART0_LCRH_R ; R1 = &UART0
                                                            _LCRH_R
  772 000003BE 6808            LDR              R0, [R1]    ; R0 = [R1]
  773 000003C0 F040 0004       ORR              R0, R0, #UART_LCRH_EPS 
                                                            ; LOW Stick Parity
  774 000003C4 6008            STR              R0, [R1]    ; [R1] = R0
  775 000003C6 BD03            POP              {R0, R1, PC} ; restore previous
                                                             value of R0 into R
                                                            0, R1 into R1, and 



ARM Macro Assembler    Page 27 


                                                            LR into PC (return)
                                                            
  776 000003C8         
  777 000003C8         
  778 000003C8                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  779 000003C8                 END                          ; end of file
              400FE618 
              400FE608 
              400FEA18 
              4000C030 
              4000C024 
              4000C028 
              4000C02C 
              4000C034 
              4000C038 
              4000CFC8 
              400FE138 
              400FEA08 
              40058420 
              40058510 
              4005851C 
              4005852C 
              40058528 
              E000E404 
              E000E100 
              4000C018 
              4000C000 
              4000C03C 
              4000C044 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\uartints.d -o.\objects\uartints.o -IC:\Users\mode_\Do
cuments\Fmat\MicroControladores\KeilProjects\Cash_flow\RTE\_Target_1 -IC:\Keil_
v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 -IC:\Keil_v5\ARM\CMSIS\I
nclude --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 522" --p
redefine="TM4C1294NCPDT SETA 1" --list=.\listings\uartints.lst UARTInts.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 141 in file UARTInts.s
   Uses
      None
Comment: .text unused
GPIOAinitloop 00000098

Symbol: GPIOAinitloop
   Definitions
      At line 251 in file UARTInts.s
   Uses
      At line 254 in file UARTInts.s
Comment: GPIOAinitloop used once
UART0_Handler 00000170

Symbol: UART0_Handler
   Definitions
      At line 408 in file UARTInts.s
   Uses
      At line 146 in file UARTInts.s
Comment: UART0_Handler used once
UART0initloop 00000024

Symbol: UART0initloop
   Definitions
      At line 184 in file UARTInts.s
   Uses
      At line 187 in file UARTInts.s
Comment: UART0initloop used once
UART_HighStickParity 000003AC

Symbol: UART_HighStickParity
   Definitions
      At line 759 in file UARTInts.s
   Uses
      At line 153 in file UARTInts.s
Comment: UART_HighStickParity used once
UART_InChar 00000138

Symbol: UART_InChar
   Definitions
      At line 359 in file UARTInts.s
   Uses
      At line 144 in file UARTInts.s
      At line 502 in file UARTInts.s
      At line 591 in file UARTInts.s
      At line 722 in file UARTInts.s

UART_InString 00000366

Symbol: UART_InString
   Definitions
      At line 715 in file UARTInts.s
   Uses
      At line 152 in file UARTInts.s
Comment: UART_InString used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

UART_InUDec 000001FE

Symbol: UART_InUDec
   Definitions
      At line 496 in file UARTInts.s
   Uses
      At line 148 in file UARTInts.s
Comment: UART_InUDec used once
UART_InUHex 00000280

Symbol: UART_InUHex
   Definitions
      At line 585 in file UARTInts.s
   Uses
      At line 150 in file UARTInts.s
Comment: UART_InUHex used once
UART_Init 00000000

Symbol: UART_Init
   Definitions
      At line 166 in file UARTInts.s
   Uses
      At line 143 in file UARTInts.s
Comment: UART_Init used once
UART_LowStickParity 000003BA

Symbol: UART_LowStickParity
   Definitions
      At line 769 in file UARTInts.s
   Uses
      At line 154 in file UARTInts.s
Comment: UART_LowStickParity used once
UART_OutChar 0000014A

Symbol: UART_OutChar
   Definitions
      At line 384 in file UARTInts.s
   Uses
      At line 145 in file UARTInts.s
      At line 482 in file UARTInts.s
      At line 516 in file UARTInts.s
      At line 528 in file UARTInts.s
      At line 572 in file UARTInts.s
      At line 605 in file UARTInts.s
      At line 619 in file UARTInts.s
      At line 633 in file UARTInts.s
      At line 645 in file UARTInts.s
      At line 691 in file UARTInts.s
      At line 697 in file UARTInts.s
      At line 733 in file UARTInts.s
      At line 747 in file UARTInts.s

UART_OutString 000001E8

Symbol: UART_OutString
   Definitions
      At line 475 in file UARTInts.s
   Uses
      At line 147 in file UARTInts.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Comment: UART_OutString used once
UART_OutUDec 0000024E

Symbol: UART_OutUDec
   Definitions
      At line 552 in file UARTInts.s
   Uses
      At line 149 in file UARTInts.s
      At line 563 in file UARTInts.s

UART_OutUHex 00000318

Symbol: UART_OutUHex
   Definitions
      At line 660 in file UARTInts.s
   Uses
      At line 151 in file UARTInts.s
      At line 672 in file UARTInts.s
      At line 679 in file UARTInts.s

copyHardwareToSoftware 000000EE

Symbol: copyHardwareToSoftware
   Definitions
      At line 296 in file UARTInts.s
   Uses
      At line 443 in file UARTInts.s
      At line 455 in file UARTInts.s

copySoftwareToHardware 00000110

Symbol: copySoftwareToHardware
   Definitions
      At line 321 in file UARTInts.s
   Uses
      At line 396 in file UARTInts.s
      At line 422 in file UARTInts.s

h2sdone 0000010E

Symbol: h2sdone
   Definitions
      At line 314 in file UARTInts.s
   Uses
      At line 304 in file UARTInts.s
      At line 307 in file UARTInts.s

h2sloop 000000F0

Symbol: h2sloop
   Definitions
      At line 298 in file UARTInts.s
   Uses
      At line 313 in file UARTInts.s
Comment: h2sloop used once
handlerCheck0 00000172

Symbol: handlerCheck0
   Definitions



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 411 in file UARTInts.s
   Uses
      None
Comment: handlerCheck0 unused
handlerCheck1 0000019C

Symbol: handlerCheck1
   Definitions
      At line 432 in file UARTInts.s
   Uses
      At line 416 in file UARTInts.s
      At line 427 in file UARTInts.s

handlerCheck2 000001B4

Symbol: handlerCheck2
   Definitions
      At line 444 in file UARTInts.s
   Uses
      At line 437 in file UARTInts.s
Comment: handlerCheck2 used once
handlerCheck3 000001CC

Symbol: handlerCheck3
   Definitions
      At line 456 in file UARTInts.s
   Uses
      At line 449 in file UARTInts.s
Comment: handlerCheck3 used once
handlerDone 000001E6

Symbol: handlerDone
   Definitions
      At line 468 in file UARTInts.s
   Uses
      At line 461 in file UARTInts.s
Comment: handlerDone used once
inCharLoop 0000013E

Symbol: inCharLoop
   Definitions
      At line 362 in file UARTInts.s
   Uses
      At line 366 in file UARTInts.s
Comment: inCharLoop used once
inStringCont 0000038E

Symbol: inStringCont
   Definitions
      At line 739 in file UARTInts.s
   Uses
      At line 728 in file UARTInts.s
Comment: inStringCont used once
inStringDone 000003A2

Symbol: inStringDone
   Definitions
      At line 749 in file UARTInts.s
   Uses



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 724 in file UARTInts.s
Comment: inStringDone used once
inStringLoop 00000370

Symbol: inStringLoop
   Definitions
      At line 720 in file UARTInts.s
   Uses
      At line 730 in file UARTInts.s
      At line 738 in file UARTInts.s
      At line 743 in file UARTInts.s
      At line 748 in file UARTInts.s

inUDecDone 0000024A

Symbol: inUDecDone
   Definitions
      At line 534 in file UARTInts.s
   Uses
      At line 504 in file UARTInts.s
Comment: inUDecDone used once
inUDecLoop 00000208

Symbol: inUDecLoop
   Definitions
      At line 500 in file UARTInts.s
   Uses
      At line 517 in file UARTInts.s
      At line 522 in file UARTInts.s
      At line 524 in file UARTInts.s
      At line 533 in file UARTInts.s

inUDecNAN 00000230

Symbol: inUDecNAN
   Definitions
      At line 518 in file UARTInts.s
   Uses
      At line 508 in file UARTInts.s
      At line 510 in file UARTInts.s

inUHexDone 00000314

Symbol: inUHexDone
   Definitions
      At line 651 in file UARTInts.s
   Uses
      At line 593 in file UARTInts.s
Comment: inUHexDone used once
inUHexLoop 0000028A

Symbol: inUHexLoop
   Definitions
      At line 589 in file UARTInts.s
   Uses
      At line 606 in file UARTInts.s
      At line 620 in file UARTInts.s
      At line 634 in file UARTInts.s
      At line 639 in file UARTInts.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

      At line 641 in file UARTInts.s
      At line 650 in file UARTInts.s

inUHexNotDigit 000002B2

Symbol: inUHexNotDigit
   Definitions
      At line 607 in file UARTInts.s
   Uses
      At line 597 in file UARTInts.s
      At line 599 in file UARTInts.s

inUHexNotUpper 000002D6

Symbol: inUHexNotUpper
   Definitions
      At line 621 in file UARTInts.s
   Uses
      At line 610 in file UARTInts.s
      At line 612 in file UARTInts.s

inUHexOther 000002FA

Symbol: inUHexOther
   Definitions
      At line 635 in file UARTInts.s
   Uses
      At line 624 in file UARTInts.s
      At line 626 in file UARTInts.s

outCharLoop 0000014E

Symbol: outCharLoop
   Definitions
      At line 387 in file UARTInts.s
   Uses
      At line 391 in file UARTInts.s
Comment: outCharLoop used once
outStringDone 000001FC

Symbol: outStringDone
   Definitions
      At line 485 in file UARTInts.s
   Uses
      At line 481 in file UARTInts.s
Comment: outStringDone used once
outStringLoop 000001EC

Symbol: outStringLoop
   Definitions
      At line 478 in file UARTInts.s
   Uses
      At line 484 in file UARTInts.s
Comment: outStringLoop used once
outUDecDone 00000276

Symbol: outUDecDone
   Definitions
      At line 569 in file UARTInts.s



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 557 in file UARTInts.s
Comment: outUDecDone used once
outUHexDone 00000364

Symbol: outUHexDone
   Definitions
      At line 698 in file UARTInts.s
   Uses
      At line 681 in file UARTInts.s
      At line 692 in file UARTInts.s

outUHexManyDigits 0000031E

Symbol: outUHexManyDigits
   Definitions
      At line 666 in file UARTInts.s
   Uses
      None
Comment: outUHexManyDigits unused
outUHexOneDigit 0000034A

Symbol: outUHexOneDigit
   Definitions
      At line 682 in file UARTInts.s
   Uses
      At line 665 in file UARTInts.s
Comment: outUHexOneDigit used once
outUHexOneLetter 0000034E

Symbol: outUHexOneLetter
   Definitions
      At line 686 in file UARTInts.s
   Uses
      None
Comment: outUHexOneLetter unused
outUHexOneNumber 0000035C

Symbol: outUHexOneNumber
   Definitions
      At line 693 in file UARTInts.s
   Uses
      At line 685 in file UARTInts.s
Comment: outUHexOneNumber used once
s2hdone 00000136

Symbol: s2hdone
   Definitions
      At line 342 in file UARTInts.s
   Uses
      At line 329 in file UARTInts.s
      At line 332 in file UARTInts.s

s2hloop 00000112

Symbol: s2hloop
   Definitions
      At line 323 in file UARTInts.s
   Uses



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

      At line 341 in file UARTInts.s
Comment: s2hloop used once
47 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BS 00000008

Symbol: BS
   Definitions
      At line 136 in file UARTInts.s
   Uses
      At line 521 in file UARTInts.s
      At line 638 in file UARTInts.s
      At line 727 in file UARTInts.s

CR 0000000D

Symbol: CR
   Definitions
      At line 134 in file UARTInts.s
   Uses
      At line 503 in file UARTInts.s
      At line 592 in file UARTInts.s
      At line 723 in file UARTInts.s

DEL 0000007F

Symbol: DEL
   Definitions
      At line 139 in file UARTInts.s
   Uses
      None
Comment: DEL unused
ESC 0000001B

Symbol: ESC
   Definitions
      At line 137 in file UARTInts.s
   Uses
      None
Comment: ESC unused
FIFOFAIL 00000000

Symbol: FIFOFAIL
   Definitions
      At line 112 in file UARTInts.s
   Uses
      At line 365 in file UARTInts.s
      At line 390 in file UARTInts.s

FIFOSIZE 00000010

Symbol: FIFOSIZE
   Definitions
      At line 110 in file UARTInts.s
   Uses
      At line 306 in file UARTInts.s
Comment: FIFOSIZE used once
FIFOSUCCESS 00000001

Symbol: FIFOSUCCESS
   Definitions
      At line 111 in file UARTInts.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      None
Comment: FIFOSUCCESS unused
GPIO_PORTA_AFSEL_R 40058420

Symbol: GPIO_PORTA_AFSEL_R
   Definitions
      At line 36 in file UARTInts.s
   Uses
      At line 256 in file UARTInts.s
Comment: GPIO_PORTA_AFSEL_R used once
GPIO_PORTA_AMSEL_R 40058528

Symbol: GPIO_PORTA_AMSEL_R
   Definitions
      At line 39 in file UARTInts.s
   Uses
      At line 276 in file UARTInts.s
Comment: GPIO_PORTA_AMSEL_R used once
GPIO_PORTA_DEN_R 4005851C

Symbol: GPIO_PORTA_DEN_R
   Definitions
      At line 38 in file UARTInts.s
   Uses
      At line 265 in file UARTInts.s
Comment: GPIO_PORTA_DEN_R used once
GPIO_PORTA_PCTL_R 4005852C

Symbol: GPIO_PORTA_PCTL_R
   Definitions
      At line 40 in file UARTInts.s
   Uses
      At line 270 in file UARTInts.s
Comment: GPIO_PORTA_PCTL_R used once
GPIO_PORTA_PUR_R 40058510

Symbol: GPIO_PORTA_PUR_R
   Definitions
      At line 37 in file UARTInts.s
   Uses
      At line 261 in file UARTInts.s
Comment: GPIO_PORTA_PUR_R used once
LF 0000000A

Symbol: LF
   Definitions
      At line 135 in file UARTInts.s
   Uses
      None
Comment: LF unused
NVIC_EN0_INT5 00000020

Symbol: NVIC_EN0_INT5
   Definitions
      At line 33 in file UARTInts.s
   Uses
      At line 287 in file UARTInts.s
Comment: NVIC_EN0_INT5 used once
NVIC_EN0_R E000E100



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols


Symbol: NVIC_EN0_R
   Definitions
      At line 34 in file UARTInts.s
   Uses
      At line 286 in file UARTInts.s
Comment: NVIC_EN0_R used once
NVIC_PRI1_R E000E404

Symbol: NVIC_PRI1_R
   Definitions
      At line 35 in file UARTInts.s
   Uses
      At line 280 in file UARTInts.s
Comment: NVIC_PRI1_R used once
SPA 00000020

Symbol: SPA
   Definitions
      At line 138 in file UARTInts.s
   Uses
      None
Comment: SPA unused
SYSCTL_ALTCLKCFG_ALTCLK_M 0000000F

Symbol: SYSCTL_ALTCLKCFG_ALTCLK_M
   Definitions
      At line 88 in file UARTInts.s
   Uses
      At line 239 in file UARTInts.s
Comment: SYSCTL_ALTCLKCFG_ALTCLK_M used once
SYSCTL_ALTCLKCFG_ALTCLK_PIOSC 00000000

Symbol: SYSCTL_ALTCLKCFG_ALTCLK_PIOSC
   Definitions
      At line 89 in file UARTInts.s
   Uses
      At line 241 in file UARTInts.s
Comment: SYSCTL_ALTCLKCFG_ALTCLK_PIOSC used once
SYSCTL_ALTCLKCFG_R 400FE138

Symbol: SYSCTL_ALTCLKCFG_R
   Definitions
      At line 87 in file UARTInts.s
   Uses
      At line 236 in file UARTInts.s
Comment: SYSCTL_ALTCLKCFG_R used once
SYSCTL_PRGPIO_R 400FEA08

Symbol: SYSCTL_PRGPIO_R
   Definitions
      At line 97 in file UARTInts.s
   Uses
      At line 250 in file UARTInts.s
Comment: SYSCTL_PRGPIO_R used once
SYSCTL_PRGPIO_R0 00000001

Symbol: SYSCTL_PRGPIO_R0
   Definitions



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

      At line 98 in file UARTInts.s
   Uses
      At line 253 in file UARTInts.s
Comment: SYSCTL_PRGPIO_R0 used once
SYSCTL_PRUART_R 400FEA18

Symbol: SYSCTL_PRUART_R
   Definitions
      At line 99 in file UARTInts.s
   Uses
      At line 183 in file UARTInts.s
Comment: SYSCTL_PRUART_R used once
SYSCTL_PRUART_R0 00000001

Symbol: SYSCTL_PRUART_R0
   Definitions
      At line 100 in file UARTInts.s
   Uses
      At line 186 in file UARTInts.s
Comment: SYSCTL_PRUART_R0 used once
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 91 in file UARTInts.s
   Uses
      At line 175 in file UARTInts.s
Comment: SYSCTL_RCGCGPIO_R used once
SYSCTL_RCGCGPIO_R0 00000001

Symbol: SYSCTL_RCGCGPIO_R0
   Definitions
      At line 92 in file UARTInts.s
   Uses
      At line 177 in file UARTInts.s
Comment: SYSCTL_RCGCGPIO_R0 used once
SYSCTL_RCGCUART_R 400FE618

Symbol: SYSCTL_RCGCUART_R
   Definitions
      At line 94 in file UARTInts.s
   Uses
      At line 170 in file UARTInts.s
Comment: SYSCTL_RCGCUART_R used once
SYSCTL_RCGCUART_R0 00000001

Symbol: SYSCTL_RCGCUART_R0
   Definitions
      At line 95 in file UARTInts.s
   Uses
      At line 172 in file UARTInts.s
Comment: SYSCTL_RCGCUART_R0 used once
UART0_CC_R 4000CFC8

Symbol: UART0_CC_R
   Definitions
      At line 82 in file UARTInts.s
   Uses
      At line 230 in file UARTInts.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

Comment: UART0_CC_R used once
UART0_CTL_R 4000C030

Symbol: UART0_CTL_R
   Definitions
      At line 56 in file UARTInts.s
   Uses
      At line 189 in file UARTInts.s
      At line 244 in file UARTInts.s

UART0_DR_R 4000C000

Symbol: UART0_DR_R
   Definitions
      At line 41 in file UARTInts.s
   Uses
      At line 309 in file UARTInts.s
      At line 339 in file UARTInts.s

UART0_FBRD_R 4000C028

Symbol: UART0_FBRD_R
   Definitions
      At line 47 in file UARTInts.s
   Uses
      At line 197 in file UARTInts.s
Comment: UART0_FBRD_R used once
UART0_FR_R 4000C018

Symbol: UART0_FR_R
   Definitions
      At line 42 in file UARTInts.s
   Uses
      At line 300 in file UARTInts.s
      At line 325 in file UARTInts.s

UART0_IBRD_R 4000C024

Symbol: UART0_IBRD_R
   Definitions
      At line 46 in file UARTInts.s
   Uses
      At line 194 in file UARTInts.s
Comment: UART0_IBRD_R used once
UART0_ICR_R 4000C044

Symbol: UART0_ICR_R
   Definitions
      At line 76 in file UARTInts.s
   Uses
      At line 418 in file UARTInts.s
      At line 439 in file UARTInts.s
      At line 451 in file UARTInts.s
      At line 463 in file UARTInts.s

UART0_IFLS_R 4000C034

Symbol: UART0_IFLS_R
   Definitions



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

      At line 60 in file UARTInts.s
   Uses
      At line 212 in file UARTInts.s
Comment: UART0_IFLS_R used once
UART0_IM_R 4000C038

Symbol: UART0_IM_R
   Definitions
      At line 64 in file UARTInts.s
   Uses
      At line 224 in file UARTInts.s
      At line 392 in file UARTInts.s
      At line 428 in file UARTInts.s

UART0_LCRH_R 4000C02C

Symbol: UART0_LCRH_R
   Definitions
      At line 49 in file UARTInts.s
   Uses
      At line 201 in file UARTInts.s
      At line 761 in file UARTInts.s
      At line 771 in file UARTInts.s

UART0_RIS_R 4000C03C

Symbol: UART0_RIS_R
   Definitions
      At line 70 in file UARTInts.s
   Uses
      At line 412 in file UARTInts.s
      At line 433 in file UARTInts.s
      At line 445 in file UARTInts.s
      At line 457 in file UARTInts.s

UART_CC_CS_M 0000000F

Symbol: UART_CC_CS_M
   Definitions
      At line 83 in file UARTInts.s
   Uses
      At line 232 in file UARTInts.s
Comment: UART_CC_CS_M used once
UART_CC_CS_PIOSC 00000005

Symbol: UART_CC_CS_PIOSC
   Definitions
      At line 85 in file UARTInts.s
   Uses
      At line 233 in file UARTInts.s
Comment: UART_CC_CS_PIOSC used once
UART_CC_CS_SYSCLK 00000000

Symbol: UART_CC_CS_SYSCLK
   Definitions
      At line 84 in file UARTInts.s
   Uses
      None
Comment: UART_CC_CS_SYSCLK unused



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Absolute symbols

UART_CTL_HSE 00000020

Symbol: UART_CTL_HSE
   Definitions
      At line 57 in file UARTInts.s
   Uses
      At line 246 in file UARTInts.s
Comment: UART_CTL_HSE used once
UART_CTL_UARTEN 00000001

Symbol: UART_CTL_UARTEN
   Definitions
      At line 58 in file UARTInts.s
   Uses
      At line 191 in file UARTInts.s
      At line 247 in file UARTInts.s

UART_FR_RXFE 00000010

Symbol: UART_FR_RXFE
   Definitions
      At line 45 in file UARTInts.s
   Uses
      At line 302 in file UARTInts.s
      At line 303 in file UARTInts.s

UART_FR_RXFF 00000040

Symbol: UART_FR_RXFF
   Definitions
      At line 43 in file UARTInts.s
   Uses
      None
Comment: UART_FR_RXFF unused
UART_FR_TXFF 00000020

Symbol: UART_FR_TXFF
   Definitions
      At line 44 in file UARTInts.s
   Uses
      At line 327 in file UARTInts.s
      At line 328 in file UARTInts.s

UART_ICR_PEIC 00000100

Symbol: UART_ICR_PEIC
   Definitions
      At line 77 in file UARTInts.s
   Uses
      At line 464 in file UARTInts.s
Comment: UART_ICR_PEIC used once
UART_ICR_RTIC 00000040

Symbol: UART_ICR_RTIC
   Definitions
      At line 78 in file UARTInts.s
   Uses
      At line 452 in file UARTInts.s
Comment: UART_ICR_RTIC used once



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Absolute symbols

UART_ICR_RXIC 00000010

Symbol: UART_ICR_RXIC
   Definitions
      At line 80 in file UARTInts.s
   Uses
      At line 440 in file UARTInts.s
Comment: UART_ICR_RXIC used once
UART_ICR_TXIC 00000020

Symbol: UART_ICR_TXIC
   Definitions
      At line 79 in file UARTInts.s
   Uses
      At line 419 in file UARTInts.s
Comment: UART_ICR_TXIC used once
UART_IFLS_RX1_8 00000000

Symbol: UART_IFLS_RX1_8
   Definitions
      At line 61 in file UARTInts.s
   Uses
      At line 217 in file UARTInts.s
Comment: UART_IFLS_RX1_8 used once
UART_IFLS_TX1_8 00000000

Symbol: UART_IFLS_TX1_8
   Definitions
      At line 62 in file UARTInts.s
   Uses
      At line 217 in file UARTInts.s
Comment: UART_IFLS_TX1_8 used once
UART_IM_PEIM 00000100

Symbol: UART_IM_PEIM
   Definitions
      At line 65 in file UARTInts.s
   Uses
      At line 227 in file UARTInts.s
Comment: UART_IM_PEIM used once
UART_IM_RTIM 00000040

Symbol: UART_IM_RTIM
   Definitions
      At line 66 in file UARTInts.s
   Uses
      At line 227 in file UARTInts.s
Comment: UART_IM_RTIM used once
UART_IM_RXIM 00000010

Symbol: UART_IM_RXIM
   Definitions
      At line 68 in file UARTInts.s
   Uses
      At line 227 in file UARTInts.s
Comment: UART_IM_RXIM used once
UART_IM_TXIM 00000020

Symbol: UART_IM_TXIM



ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 67 in file UARTInts.s
   Uses
      At line 227 in file UARTInts.s
      At line 394 in file UARTInts.s
      At line 398 in file UARTInts.s
      At line 430 in file UARTInts.s

UART_LCRH_EPS 00000004

Symbol: UART_LCRH_EPS
   Definitions
      At line 53 in file UARTInts.s
   Uses
      At line 205 in file UARTInts.s
      At line 763 in file UARTInts.s
      At line 773 in file UARTInts.s

UART_LCRH_FEN 00000010

Symbol: UART_LCRH_FEN
   Definitions
      At line 52 in file UARTInts.s
   Uses
      At line 205 in file UARTInts.s
Comment: UART_LCRH_FEN used once
UART_LCRH_PEN 00000002

Symbol: UART_LCRH_PEN
   Definitions
      At line 54 in file UARTInts.s
   Uses
      At line 205 in file UARTInts.s
Comment: UART_LCRH_PEN used once
UART_LCRH_SPS 00000080

Symbol: UART_LCRH_SPS
   Definitions
      At line 50 in file UARTInts.s
   Uses
      At line 205 in file UARTInts.s
Comment: UART_LCRH_SPS used once
UART_LCRH_WLEN_8 00000060

Symbol: UART_LCRH_WLEN_8
   Definitions
      At line 51 in file UARTInts.s
   Uses
      At line 205 in file UARTInts.s
Comment: UART_LCRH_WLEN_8 used once
UART_RIS_PERIS 00000100

Symbol: UART_RIS_PERIS
   Definitions
      At line 71 in file UARTInts.s
   Uses
      At line 459 in file UARTInts.s
      At line 460 in file UARTInts.s




ARM Macro Assembler    Page 10 Alphabetic symbol ordering
Absolute symbols

UART_RIS_RTRIS 00000040

Symbol: UART_RIS_RTRIS
   Definitions
      At line 72 in file UARTInts.s
   Uses
      At line 447 in file UARTInts.s
      At line 448 in file UARTInts.s

UART_RIS_RXRIS 00000010

Symbol: UART_RIS_RXRIS
   Definitions
      At line 74 in file UARTInts.s
   Uses
      At line 435 in file UARTInts.s
      At line 436 in file UARTInts.s

UART_RIS_TXRIS 00000020

Symbol: UART_RIS_TXRIS
   Definitions
      At line 73 in file UARTInts.s
   Uses
      At line 414 in file UARTInts.s
      At line 415 in file UARTInts.s

66 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

DisableInterrupts 00000000

Symbol: DisableInterrupts
   Definitions
      At line 102 in file UARTInts.s
   Uses
      At line 168 in file UARTInts.s
Comment: DisableInterrupts used once
EnableInterrupts 00000000

Symbol: EnableInterrupts
   Definitions
      At line 103 in file UARTInts.s
   Uses
      At line 289 in file UARTInts.s
Comment: EnableInterrupts used once
EndCritical 00000000

Symbol: EndCritical
   Definitions
      At line 105 in file UARTInts.s
   Uses
      None
Comment: EndCritical unused
RxFifo_Get 00000000

Symbol: RxFifo_Get
   Definitions
      At line 121 in file UARTInts.s
   Uses
      At line 364 in file UARTInts.s
Comment: RxFifo_Get used once
RxFifo_Init 00000000

Symbol: RxFifo_Init
   Definitions
      At line 119 in file UARTInts.s
   Uses
      At line 180 in file UARTInts.s
Comment: RxFifo_Init used once
RxFifo_Put 00000000

Symbol: RxFifo_Put
   Definitions
      At line 120 in file UARTInts.s
   Uses
      At line 312 in file UARTInts.s
Comment: RxFifo_Put used once
RxFifo_Size 00000000

Symbol: RxFifo_Size
   Definitions
      At line 122 in file UARTInts.s
   Uses
      At line 305 in file UARTInts.s
Comment: RxFifo_Size used once
StartCritical 00000000

Symbol: StartCritical



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Definitions
      At line 104 in file UARTInts.s
   Uses
      None
Comment: StartCritical unused
Timer_BreakTime 00000000

Symbol: Timer_BreakTime
   Definitions
      At line 127 in file UARTInts.s
   Uses
      None
Comment: Timer_BreakTime unused
Timer_NoResponseTime 00000000

Symbol: Timer_NoResponseTime
   Definitions
      At line 130 in file UARTInts.s
   Uses
      None
Comment: Timer_NoResponseTime unused
Timer_NoResponseTime_stop 00000000

Symbol: Timer_NoResponseTime_stop
   Definitions
      At line 131 in file UARTInts.s
   Uses
      None
Comment: Timer_NoResponseTime_stop unused
Timer_PollingTime 00000000

Symbol: Timer_PollingTime
   Definitions
      At line 129 in file UARTInts.s
   Uses
      None
Comment: Timer_PollingTime unused
Timer_ResponseTime 00000000

Symbol: Timer_ResponseTime
   Definitions
      At line 125 in file UARTInts.s
   Uses
      None
Comment: Timer_ResponseTime unused
Timer_ResponseTime_stop 00000000

Symbol: Timer_ResponseTime_stop
   Definitions
      At line 126 in file UARTInts.s
   Uses
      None
Comment: Timer_ResponseTime_stop unused
Timer_SetupTime 00000000

Symbol: Timer_SetupTime
   Definitions
      At line 128 in file UARTInts.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
External symbols

      None
Comment: Timer_SetupTime unused
TxFifo_Get 00000000

Symbol: TxFifo_Get
   Definitions
      At line 117 in file UARTInts.s
   Uses
      At line 336 in file UARTInts.s
Comment: TxFifo_Get used once
TxFifo_Init 00000000

Symbol: TxFifo_Init
   Definitions
      At line 115 in file UARTInts.s
   Uses
      At line 181 in file UARTInts.s
Comment: TxFifo_Init used once
TxFifo_Put 00000000

Symbol: TxFifo_Put
   Definitions
      At line 116 in file UARTInts.s
   Uses
      At line 389 in file UARTInts.s
Comment: TxFifo_Put used once
TxFifo_Size 00000000

Symbol: TxFifo_Size
   Definitions
      At line 118 in file UARTInts.s
   Uses
      At line 330 in file UARTInts.s
      At line 425 in file UARTInts.s

WaitForInterrupt 00000000

Symbol: WaitForInterrupt
   Definitions
      At line 106 in file UARTInts.s
   Uses
      None
Comment: WaitForInterrupt unused
20 symbols
469 symbols in table
