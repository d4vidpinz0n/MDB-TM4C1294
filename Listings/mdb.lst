


ARM Macro Assembler    Page 1 


    1 00000000         ; mdb.s
    2 00000000         ; Runs on TM4C1294
    3 00000000         ; Modulo de funciones del protocolo MDB
    4 00000000         ; usando funciones del modulo de UARTInts.s
    5 00000000         ; David Pinzon & Alberto Lopez
    6 00000000         ; May 27, 2017
    7 00000000         
    8 00000000 00000008 
                       COIN_CHANGER_ADDR
                               EQU              0x0008
    9 00000000 00000008 
                       COMMAND_RESET
                               EQU              0x0008
   10 00000000 00000009 
                       COMMAND_SETUP
                               EQU              0x0009
   11 00000000 0000000A 
                       COMMAND_TUBE_STATUS
                               EQU              0x000A
   12 00000000 0000000B 
                       COMMAND_POLL
                               EQU              0x000B
   13 00000000 0000000C 
                       COMMAND_COIN_TYPE
                               EQU              0x000C
   14 00000000 0000000D 
                       COMMAND_DISPENSE
                               EQU              0x000D
   15 00000000 0000000F 
                       COMMAND_EXPANSION
                               EQU              0x000F
   16 00000000 0000000F 
                       COMMAND_EXP_IDENTIFICATION
                               EQU              0x000F
   17 00000000 0000010F 
                       COMMAND_EXP_FEATURE_ENEABLE
                               EQU              0x010F
   18 00000000 0000020F 
                       COMMAND_EXP_PAYOUT
                               EQU              0x020F
   19 00000000 0000030F 
                       COMMAND_EXP_PAYOUT_STATUS
                               EQU              0x030F
   20 00000000 0000040F 
                       COMMAND_EXP_PAYOUT_VALUE_POLL
                               EQU              0x040F
   21 00000000 0000050F 
                       COMMAND_EXP_SEND_DIAGNOSTIC_STATUS
                               EQU              0x050F
   22 00000000         
   23 00000000         ;functions from UARTInts.s
   24 00000000                 IMPORT           UART_Init
   25 00000000                 IMPORT           UART_InChar
   26 00000000                 IMPORT           UART_OutChar
   27 00000000                 IMPORT           UART0_Handler
   28 00000000                 IMPORT           UART_OutString
   29 00000000                 IMPORT           UART_InUDec
   30 00000000                 IMPORT           UART_OutUDec
   31 00000000                 IMPORT           UART_InUHex



ARM Macro Assembler    Page 2 


   32 00000000                 IMPORT           UART_OutUHex
   33 00000000                 IMPORT           UART_InString
   34 00000000                 IMPORT           UART_HighStickParity
   35 00000000                 IMPORT           UART_LowStickParity
   36 00000000                 IMPORT           UART_SendBreak
   37 00000000                 IMPORT           UART_SendBreak_Disable
   38 00000000         
   39 00000000         ;functions from GPTimer.s
   40 00000000                 IMPORT           Timer_ResponseTime
   41 00000000                 IMPORT           Timer_ResponseTime_stop
   42 00000000                 IMPORT           Timer_BreakTime
   43 00000000                 IMPORT           Timer_SetupTime
   44 00000000                 IMPORT           Timer_PollingTime
   45 00000000                 IMPORT           Timer_NoResponseTime
   46 00000000                 IMPORT           Timer_NoResponseTime_stop
   47 00000000         
   48 00000000         ;functions from Systick.s
   49 00000000                 IMPORT           delay
   50 00000000         
   51 00000000                 AREA             DATA, ALIGN=2
   52 00000000 00000024 
                       CMDLEN  EQU              36          ; max size of comma
                                                            nd
   53 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 Command SPACE            (CMDLEN)
   54 00000024 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 DataIn  SPACE            (CMDLEN)
   55 00000048 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 Setup_buf
                               SPACE            24
   56 00000060 00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 3 


              00 00 00 
              00 00 00 
              00 00 00 
              00       Tube_status_buf
                               SPACE            19
   57 00000073 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    Pool_buf
                               SPACE            17
   58 00000084 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       Identification_buf
                               SPACE            34
   59 000000A6 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    Payout_status_buf
                               SPACE            17
   60 000000B7 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    Send_diag_status_buf
                               SPACE            17
   61 000000C8                 EXPORT           Command
   62 000000C8                 EXPORT           DataIn
   63 000000C8                 EXPORT           Setup_buf
   64 000000C8                 EXPORT           Tube_status_buf
   65 000000C8                 EXPORT           Pool_buf
   66 000000C8                 EXPORT           Identification_buf
   67 000000C8                 EXPORT           Payout_status_buf
   68 000000C8                 EXPORT           Send_diag_status_buf
   69 000000C8         ;functions to export
   70 000000C8                 EXPORT           MDB_SendAddress
   71 000000C8                 EXPORT           MDB_SendCommand
   72 000000C8                 EXPORT           MDB_SendACK
   73 000000C8                 EXPORT           MDB_SendRET
   74 000000C8                 EXPORT           MDB_SendNAK
   75 000000C8                 EXPORT           MDB_GetAnswer
   76 000000C8                 EXPORT           MDB_SendBusReset
   77 000000C8                 EXPORT           MDB_InitCoinChanger
   78 000000C8                 EXPORT           MDB_SendPool
   79 000000C8                 EXPORT           MDB_SendSetup
   80 000000C8                 EXPORT           MDB_SendExpIdentification



ARM Macro Assembler    Page 4 


   81 000000C8                 EXPORT           MDB_DispenseValue
   82 000000C8         
   83 000000C8                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   84 00000000                 THUMB
   85 00000000         
   86 00000000         ;-----------MDB_SendAddress-----------
   87 00000000         ; Envia la direccion de un periferico
   88 00000000         ; activa High Stick Parity bit to send adress
   89 00000000         ; activa Low Stick parity after send
   90 00000000         ; Input : R0 8-bit address
   91 00000000         ; Output: none
   92 00000000         MDB_SendAddress
   93 00000000 B50F            PUSH             {R0, R1, R2, R3, LR} ; save cur
                                                            rent value of R0, R
                                                            1 and LR
   94 00000002 F7FF FFFE       BL               UART_HighStickParity ; set high
                                                             stick parity
   95 00000006 F7FF FFFE       BL               UART_OutChar ; note: modifies R
                                                            0, R2
   96 0000000A F7FF FFFE       BL               UART_LowStickParity ; set to lo
                                                            w stick parity
   97 0000000E BD0F            POP              {R0, R1, R2, R3, PC} ; restore 
                                                            previous value of R
                                                            0 into R0, R1 into 
                                                            R1, and LR into PC 
                                                            (return)
   98 00000010         
   99 00000010         ;-----------MDB_SendCommand-----------
  100 00000010         ; Envia comando/datos a un periferico
  101 00000010         ; Input : R0 address (for chkSum), R1 pointer to command
                       s, R2 number of command/data bytes to be send
  102 00000010         ; Output: none
  103 00000010         ; Modifies: none, all used Register are pushed and poped
                       
  104 00000010         MDB_SendCommand
  105 00000010 B53F            PUSH             {R0, R1, R2, R3, R4, R5, LR} ; 
                                                            save current value 
                                                            of R0, R1, R2, R3, 
                                                            R4, R5 and LR
  106 00000012 4605            MOV              R5, R0      ; R5 = R0 save init
                                                            ial value of ChkSum
                                                            
  107 00000014 460C            MOV              R4, R1      ; R4 = R1 (save the
                                                             command pointer)
  108 00000016 4613            MOV              R3, R2      ; R3 = R2 (save num
                                                            ber of command/data
                                                             bytes)
  109 00000018 F04F 0200       MOV              R2, #0      ; initialize counte
                                                            r, contador de dato
                                                            s enviados
  110 0000001C         outCommandLoop
  111 0000001C 429A            CMP              R2, R3      ; is counter = numb
                                                            er of commands to s
                                                            end ?
  112 0000001E D008            BEQ              outCommandDone ; if so, its don
                                                            e, skip to 'outComm
                                                            andDone'
  113 00000020 6820            LDR              R0, [R4]    ; R0 = [R4] carga e



ARM Macro Assembler    Page 5 


                                                            l byte a ser enviad
                                                            o
  114 00000022 4405            ADD              R5, R5, R0  ; actualiza chksum 
                                                            byte
  115 00000024 F7FF FFFE       BL               UART_OutChar ; envia el byte en
                                                             R0, note: modifies
                                                             R0 and R1
  116 00000028 F104 0401       ADD              R4, R4, #1  ; R4 = R4 + 1 incre
                                                            menta el command po
                                                            inter
  117 0000002C F102 0201       ADD              R2, R2, #1  ; R2 = R2 + 1 incre
                                                            menta el contador
  118 00000030 E7F4            B                outCommandLoop
  119 00000032         outCommandDone
  120 00000032 4628            MOV              R0, R5      ; R0 = R5 Copy chks
                                                            um to R0
  121 00000034 F7FF FFFE       BL               UART_OutChar ; send chksum byte
                                                            
  122 00000038         ; restore previous value of R0 into R0, R1 into R1, R2 i
                       nto R2
  123 00000038 BD3F            POP              {R0, R1, R2, R3, R4, R5, PC} ; 
                                                            R3 into R3, R4 into
                                                             R4, R5, into R5 an
                                                            d LR into PC (retur
                                                            n)
  124 0000003A         
  125 0000003A         
  126 0000003A         ;-----------MDB_SendACK-----------
  127 0000003A         ; Envia el ACK byte
  128 0000003A         ; Input : none
  129 0000003A         ; Output: none
  130 0000003A         ; Modifies: none, all used Register are pushed and poped
                       
  131 0000003A         MDB_SendACK
  132 0000003A B503            PUSH             {R0, R1, LR} ; save current val
                                                            ue of R0, R1 and LR
                                                            
  133 0000003C F04F 0000       MOV              R0, #0      ; R0 = 0x00H (ACK)
  134 00000040 F7FF FFFE       BL               UART_OutChar ; envia ACK, note:
                                                             modifies R0 and R1
                                                            
  135 00000044 BD03            POP              {R0, R1, PC} ; restore previous
                                                             value of R0 into R
                                                            0, R1 into R1, and 
                                                            LR into PC (return)
                                                            
  136 00000046         
  137 00000046         ;-----------MDB_SendRET-----------
  138 00000046         ; Envia el RET byte
  139 00000046         ; Input : none
  140 00000046         ; Output: none
  141 00000046         ; Modifies: none, all used Register are pushed and poped
                       
  142 00000046         MDB_SendRET
  143 00000046 B503            PUSH             {R0, R1, LR} ; save current val
                                                            ue of R0, R1 and LR
                                                            
  144 00000048 F04F 00AA       MOV              R0, #170    ; R0 = 0xAAH (RET)
  145 0000004C F7FF FFFE       BL               UART_OutChar ; envia RET, note:



ARM Macro Assembler    Page 6 


                                                             modifies R0 and R1
                                                            
  146 00000050 BD03            POP              {R0, R1, PC} ; restore previous
                                                             value of R0 into R
                                                            0, R1 into R1, and 
                                                            LR into PC (return)
                                                            
  147 00000052         
  148 00000052         ;-----------MDB_SendNAK-----------
  149 00000052         ; Envia el NAK byte
  150 00000052         ; Input : none
  151 00000052         ; Output: none
  152 00000052         ; Modifies: none, all used Register are pushed and poped
                       
  153 00000052         MDB_SendNAK
  154 00000052 B503            PUSH             {R0, R1, LR} ; save current val
                                                            ue of R0, R1 and LR
                                                            
  155 00000054 F04F 00FF       MOV              R0, #255    ; R0 = 0xFFH (NAK)
  156 00000058 F7FF FFFE       BL               UART_OutChar ; envia NAK, note:
                                                             modifies R0 and R1
                                                            
  157 0000005C BD03            POP              {R0, R1, PC} ; restore previous
                                                             value of R0 into R
                                                            0, R1 into R1, and 
                                                            LR into PC (return)
                                                            
  158 0000005E         
  159 0000005E         ;-----------MDB_GetAnswer-----------
  160 0000005E         ; Recibe datos/respuesta del periferico
  161 0000005E         ; se debe tener activado LOW Stick Parity, o se cicla la
                        funcion
  162 0000005E         ; Input : R0 pointer to DataIn buffer
  163 0000005E         ; Output: R0 number of data bytes getted, included chk(i
                       f apply), 0 if chksum failed
  164 0000005E         ;    R1 time response out 1 if no response, 0 if good re
                       sponse
  165 0000005E         ; Modifies: R0, all used Register are pushed and poped
  166 0000005E         ; DataIn buffer upgraded.
  167 0000005E         MDB_GetAnswer
  168 0000005E B53C            PUSH             {R2, R3, R4, R5, LR} ; save cur
                                                            rent value of R0, R
                                                            1, R2, R3, R4, R5 a
                                                            nd LR
  169 00000060 4603            MOV              R3, R0      ; R3 = R0 (save the
                                                             DataIn pointer buf
                                                            fer) 
  170 00000062 F04F 0200       MOV              R2, #0      ; initialize counte
                                                            r, contador de dato
                                                            s recibidos
  171 00000066 F04F 0400       MOV              R4, #0      ; initialize chksum
                                                            
  172 0000006A F04F 0500       MOV              R5, #0      ; personal flag for
                                                             Stick Parity Inter
                                                            rup
  173 0000006E         getAnswerLoop                        ; stay in loop util
                                                             interruption by st
                                                            ick parity detected
                                                             



ARM Macro Assembler    Page 7 


  174 0000006E F7FF FFFE       BL               UART_InChar ; get byte from UAR
                                                            T
  175 00000072 2901            CMP              R1,#1       ; R1 == 1? (time re
                                                            sponse out)?
  176 00000074 D00E            BEQ              getAnswer_no_response
  177 00000076 7018            STRB             R0, [R3]    ; [R3] = R0 (store 
                                                            8 least significant
                                                             bits of R0 into lo
                                                            cation pointed to b
                                                            y R4)
  178 00000078 F103 0301       ADD              R3, R3, #1  ; R4 = R4 + 1 (buff
                                                            erPt = bufferPt + 1
                                                            )
  179 0000007C 2D01            CMP              R5, #1      ; R5 = 1 ? (R5 modi
                                                            fied by Stick Parit
                                                            y Interrupt Handler
                                                            )
  180 0000007E D001            BEQ              getAnswerEnd ; if so, answer of
                                                             peripheral MDB is 
                                                            finished
  181 00000080 4404            ADD              R4, R4, R0  ; actualize chksum 
                                                            
  182 00000082 E7F4            B                getAnswerLoop ; unconditional b
                                                            ranch to 'inDataLoo
                                                            p'
  183 00000084         getAnswerEnd
  184 00000084 4601            MOV              R1, R0      ; R1 = R0 (chk byte
                                                            )
  185 00000086 4610            MOV              R0, R2      ; R0 = R2 number of
                                                             bytes received
  186 00000088 2801            CMP              R0, #1      ; R0 = 1 ? (if no n
                                                            eeded check sum)
  187 0000008A D002            BEQ              getAnswerDone ; if so, answer d
                                                            one
  188 0000008C 428C            CMP              R4, R1      ; R4 = R0 (chksum =
                                                             chk)?
  189 0000008E BF18 2000       MOVNE            R0, #0      ; R0 = 0 (chksum fa
                                                            iled)
  190 00000092         getAnswerDone
  191 00000092         ; restore previous value of R0 into R0, R1 into R1, R2 i
                       nto R2
  192 00000092 BD3C            POP              {R2, R3, R4, R5, PC} ; R3 into 
                                                            R3, R4 into R4, R5,
                                                             into R5 and LR int
                                                            o PC (return)
  193 00000094         getAnswer_no_response
  194 00000094 F04F 0000       MOV              R0, #0      ; R0 = 0 (no answer
                                                            )
  195 00000098 F04F 0101       MOV              R1, #1      ; R0 = 1 (response 
                                                            time out)
  196 0000009C BD3C            POP              {R2, R3, R4, R5, PC} ; R3 into 
                                                            R3, R4 into R4, R5,
                                                             into R5 and LR int
                                                            o PC (return)
  197 0000009E         
  198 0000009E         ;---------MDB_SendBusReset---------
  199 0000009E         ; Manda un bus reset a los perifericos
  200 0000009E         ; Input : none
  201 0000009E         ; Output: none



ARM Macro Assembler    Page 8 


  202 0000009E         ; Modifies: none, all used Register are pushed and poped
                       
  203 0000009E         MDB_SendBusReset
  204 0000009E B503            PUSH             {R0, R1, LR} ; save current val
                                                            ues of R0, R1, LR
  205 000000A0 F7FF FFFE       BL               UART_SendBreak ; send break
  206 000000A4         ;BL Timer_BreakTime    ; start Timer_BreakTime (100ms)
  207 000000A4         ;sendBusResetLoop
  208 000000A4         ;B sendBusResetLoop
  209 000000A4 F04F 0096       MOV              R0, #150
  210 000000A8 F7FF FFFE       BL               delay       ; delay of 150ms (R
                                                            0)
  211 000000AC         sendBusResetDone
  212 000000AC F7FF FFFE       BL               UART_SendBreak_Disable 
                                                            ; stop break
  213 000000B0 BD03            POP              {R0, R1, PC} ; restore previous
                                                             value of R0 into R
                                                            0, R1 into R1, and 
                                                            LR into PC (return)
                                                            
  214 000000B2         
  215 000000B2         ;---------MDB_SendPool---------
  216 000000B2         ; Manda un el comando POOL
  217 000000B2         ; Input : R0, peripheral addres to send the pool command
                       
  218 000000B2         ; Output: none
  219 000000B2         ; Modifies: none, all used Register are pushed and poped
                       
  220 000000B2         MDB_SendPool
  221 000000B2 B507            PUSH             {R0, R1, R2, LR} ; save current
                                                             values of R0, R1, 
                                                            R2, LR
  222 000000B4 499C            LDR              R1,=Command ; R1 = &Command (po
                                                            inter)
  223 000000B6 F04F 020B       MOV              R2,#COMMAND_POLL 
                                                            ; R2 = COMMAND_POLL
                                                            
  224 000000BA 700A            STRB             R2,[R1]     ; [R1] = R2 (COMMAN
                                                            D_POLL)
  225 000000BC F04F 0201       MOV              R2,#1       ; R2 = 1 (number of
                                                             command bytes to s
                                                            end)
  226 000000C0 F7FF FFFE       BL               MDB_SendAddress ; send the peri
                                                            pheral address
  227 000000C4 F7FF FFFE       BL               MDB_SendCommand ; send pool com
                                                            mand with chk byte
  228 000000C8 BD07            POP              {R0, R1, R2, PC} ; restore prev
                                                            ious value of R0 in
                                                            to R0, R1 into R1, 
                                                            and LR into PC (ret
                                                            urn)
  229 000000CA         
  230 000000CA         ;---------MDB_SendSetup---------
  231 000000CA         ; Manda un el comando SETUP
  232 000000CA         ; Input : R0, peripheral addres to send the Setup comman
                       d
  233 000000CA         ; Output: none
  234 000000CA         ; Modifies: none, all used Register are pushed and poped
                       



ARM Macro Assembler    Page 9 


  235 000000CA         MDB_SendSetup
  236 000000CA B507            PUSH             {R0, R1, R2, LR} ; save current
                                                             values of R0, R1, 
                                                            R2, LR
  237 000000CC 4996            LDR              R1,=Command ; R1 = &Command (po
                                                            inter)
  238 000000CE F04F 0209       MOV              R2,#COMMAND_SETUP ; R2 = COMMAN
                                                            D_SETUP
  239 000000D2 700A            STRB             R2,[R1]     ; [R1] = R2 (COMMAN
                                                            D_SETUP)
  240 000000D4 F04F 0201       MOV              R2,#1       ; R2 = 1 (number of
                                                             command bytes to s
                                                            end)
  241 000000D8 F7FF FFFE       BL               MDB_SendAddress ; send the peri
                                                            pheral address
  242 000000DC F7FF FFFE       BL               MDB_SendCommand ; send pool com
                                                            mand with chk byte
  243 000000E0 BD07            POP              {R0, R1, R2, PC} ; restore prev
                                                            ious value of R0 in
                                                            to R0, R1 into R1, 
                                                            and LR into PC (ret
                                                            urn)
  244 000000E2         
  245 000000E2         ;---------MDB_SendExpIdentification---------
  246 000000E2         ; Manda un el comando-exp  Identification
  247 000000E2         ; Input : R0, peripheral addres to send the Identificati
                       on command
  248 000000E2         ; Output: none
  249 000000E2         ; Modifies: none, all used Register are pushed and poped
                       
  250 000000E2         MDB_SendExpIdentification
  251 000000E2 B507            PUSH             {R0, R1, R2, LR} ; save current
                                                             values of R0, R1, 
                                                            R2, LR
  252 000000E4 4990            LDR              R1,=Command ; R1 = &Command (po
                                                            inter)
  253 000000E6 F04F 020F       MOV              R2,#COMMAND_EXP_IDENTIFICATION 
                                                            ; R2 = COMMAND_EXP_
                                                            IDENTIFICATION
  254 000000EA 800A            STRH             R2,[R1]     ; [R1] = R2 (COMMAN
                                                            D_EXP_IDENTIFICATIO
                                                            N)
  255 000000EC F04F 0202       MOV              R2,#2       ; R2 = 2 (number of
                                                             command bytes to s
                                                            end)
  256 000000F0 F7FF FFFE       BL               MDB_SendAddress ; send the peri
                                                            pheral address
  257 000000F4 F7FF FFFE       BL               MDB_SendCommand ; send pool com
                                                            mand with chk byte
  258 000000F8 BD07            POP              {R0, R1, R2, PC} ; restore prev
                                                            ious value of R0 in
                                                            to R0, R1 into R1, 
                                                            and LR into PC (ret
                                                            urn)
  259 000000FA         
  260 000000FA         ;---------MDB_SendExpSendDiagStatus---------
  261 000000FA         ; Manda el comando-exp Send Diagnostic status
  262 000000FA         ; Input : R0, peripheral addres to send the SendDiagStat
                       us comand



ARM Macro Assembler    Page 10 


  263 000000FA         ; Output: none
  264 000000FA         ; Modifies: none, all used Register are pushed and poped
                       
  265 000000FA         MDB_SendExpSendDiagStatus
  266 000000FA B507            PUSH             {R0, R1, R2, LR} ; save current
                                                             values of R0, R1, 
                                                            R2, LR
  267 000000FC 498A            LDR              R1,=Command ; R1 = &Command (po
                                                            inter)
  268 000000FE F240 520F       MOV              R2,#COMMAND_EXP_SEND_DIAGNOSTIC
_STATUS 
                                                            ; R2 = COMMAND_EXP_
                                                            SEND_DIAGNOSTIC_STA
                                                            TUS
  269 00000102 800A            STRH             R2,[R1]     ; [R1] = R2 (COMMAN
                                                            D_EXP_SEND_DIAGNOST
                                                            IC_STATUS)
  270 00000104 F04F 0202       MOV              R2,#2       ; R2 = 1 (number of
                                                             command bytes to s
                                                            end)
  271 00000108 F7FF FFFE       BL               MDB_SendAddress ; send the peri
                                                            pheral address
  272 0000010C F7FF FFFE       BL               MDB_SendCommand ; send pool com
                                                            mand with chk byte
  273 00000110 BD07            POP              {R0, R1, R2, PC} ; restore prev
                                                            ious value of R0 in
                                                            to R0, R1 into R1, 
                                                            and LR into PC (ret
                                                            urn)
  274 00000112         
  275 00000112         ;---------MDB_SendTubeStatus---------
  276 00000112         ; Manda el comando Tube Status
  277 00000112         ; Input : R0, peripheral addres to send the Tube Status 
                       comand
  278 00000112         ; Output: none
  279 00000112         ; Modifies: none, all used Register are pushed and poped
                       
  280 00000112         MDB_SendTubeStatus
  281 00000112 B507            PUSH             {R0, R1, R2, LR} ; save current
                                                             values of R0, R1, 
                                                            R2, LR
  282 00000114 4984            LDR              R1,=Command ; R1 = &Command (po
                                                            inter)
  283 00000116 F04F 020A       MOV              R2,#COMMAND_TUBE_STATUS ; R2 = 
                                                            COMMAND_TUBE_STATUS
                                                            
  284 0000011A 700A            STRB             R2,[R1]     ; [R1] = R2 (COMMAN
                                                            D_TUBE_STATUS)
  285 0000011C F04F 0201       MOV              R2,#1       ; R2 = 1 (number of
                                                             command bytes to s
                                                            end)
  286 00000120 F7FF FFFE       BL               MDB_SendAddress ; send the peri
                                                            pheral address
  287 00000124 F7FF FFFE       BL               MDB_SendCommand ; send pool com
                                                            mand with chk byte
  288 00000128 BD07            POP              {R0, R1, R2, PC} ; restore prev
                                                            ious value of R0 in
                                                            to R0, R1 into R1, 
                                                            and LR into PC (ret



ARM Macro Assembler    Page 11 


                                                            urn)
  289 0000012A         
  290 0000012A         ;---------MDB_DispenseValue---------
  291 0000012A         ; Send expansion command to request a dispense value
  292 0000012A         ; and init sequence to verify dispense is done
  293 0000012A         ; Input : R0, value to dispense
  294 0000012A         ; Output: none
  295 0000012A         ; Modifies: none, all used Register are pushed and poped
                       
  296 0000012A         MDB_DispenseValue
  297 0000012A B507            PUSH             {R0, R1, R2, LR} ; save current
                                                             values of R0, R1, 
                                                            R2, LR
  298 0000012C         init_dispense_value
  299 0000012C 497E            LDR              R1,=Command ; R1 = &Command (po
                                                            inter)
  300 0000012E F240 220F       MOV              R2,#COMMAND_EXP_PAYOUT ; R2 = C
                                                            OMMAND_EXP_PAYOUT
  301 00000132 800A            STRH             R2,[R1]     ; [R1] = R2 (COMMAN
                                                            D_EXP_PAYOUT)
  302 00000134 7088            STRB             R0,[R1,#2]  ; [R1+1] = R0 (Valu
                                                            e of coins to dispe
                                                            nse)
  303 00000136 F04F 0203       MOV              R2,#3       ; R2 = 1 (number of
                                                             command bytes to s
                                                            end)
  304 0000013A F04F 0008       MOV              R0,#COIN_CHANGER_ADDR ; R0 = CO
                                                            IN_CHANGER_ADDR
  305 0000013E F7FF FFFE       BL               MDB_SendAddress ; send the peri
                                                            pheral address
  306 00000142 F7FF FFFE       BL               MDB_SendCommand ; send command 
                                                            with chk byte
  307 00000146         DispenseValue_get_answer
  308 00000146 4879            LDR              R0,=DataIn  ; R0 = &DataIn (poi
                                                            nter)
  309 00000148 F7FF FFFE       BL               MDB_GetAnswer ; getting answer
  310 0000014C 2901            CMP              R1, #1      ; R1 == 1 ? (respon
                                                            se time out)?
  311 0000014E D0ED            BEQ              init_dispense_value ; if so, go
                                                             to init_dispense_v
                                                            alue
  312 00000150 4876            LDR              R0,=DataIn  ; R0 = &DataIn (poi
                                                            nter)
  313 00000152 6801            LDR              R1, [R0]    ; R1 = [R0]
  314 00000154 2900            CMP              R1,#0       ; R1 == 0 ? (ACK)?
  315 00000156 D1E9            BNE              init_dispense_value ; if so, go
                                                             to init_dispense_v
                                                            alue
  316 00000158         ; acknowledge, confirm sended command
  317 00000158         payout_value_pool_loop
  318 00000158 F04F 007D       MOV              R0,#125     ; R0 = 125
  319 0000015C F7FF FFFE       BL               delay       ; delay 125ms
  320 00000160         payout_send_value_pool
  321 00000160 4971            LDR              R1,=Command ; R1 = &Command (po
                                                            inter)
  322 00000162 F240 420F       MOV              R2,#COMMAND_EXP_PAYOUT_VALUE_PO
LL 
                                                            ; R2 = COMMAND_EXP_
                                                            PAYOUT_VALUE_POLL



ARM Macro Assembler    Page 12 


  323 00000166 800A            STRH             R2,[R1]     ; [R1] = R2 (COMMAN
                                                            D_EXP_PAYOUT_VALUE_
                                                            POLL)
  324 00000168 F04F 0202       MOV              R2,#2       ; R2 = 2 (number of
                                                             command bytes to s
                                                            end)
  325 0000016C F04F 0008       MOV              R0,#COIN_CHANGER_ADDR ; R0 = CO
                                                            IN_CHANGER_ADDR
  326 00000170 F7FF FFFE       BL               MDB_SendAddress ; send the peri
                                                            pheral address
  327 00000174 F7FF FFFE       BL               MDB_SendCommand ; send command 
                                                            with chk byte
  328 00000178         payout_value_poll_get_answer
  329 00000178 486C            LDR              R0,=DataIn  ; R0 = &DataIn (poi
                                                            nter)
  330 0000017A F7FF FFFE       BL               MDB_GetAnswer ; getting answer
  331 0000017E 2901            CMP              R1, #1      ; R1 == 1 ? (respon
                                                            se time out)?
  332 00000180 D0EE            BEQ              payout_send_value_pool ; if so,
                                                             go to init_dispens
                                                            e_value
  333 00000182 2800            CMP              R0,#0       ; R0 == 0 ? (chksum
                                                             fail)?
  334 00000184 BF08 F7FF 
              FFFE             BLEQ             MDB_SendRET ; if so, sen RET
  335 0000018A 2800            CMP              R0,#0       ; R0 == 0 ? (chksum
                                                             fail)?
  336 0000018C D0F4            BEQ              payout_value_poll_get_answer ; 
                                                            if so, go to payout
                                                            _value_poll_get_ans
                                                            wer
  337 0000018E 2802            CMP              R0,#2       ; R0 == 2 ? (value 
                                                            to report)?
  338 00000190 BF08 F7FF 
              FFFE             BLEQ             MDB_SendACK ; if so, send ACK
  339 00000196 2802            CMP              R0,#2       ; R0 == 2 ? (value 
                                                            to report)?
  340 00000198 D0DE            BEQ              payout_value_pool_loop ; if so,
                                                             go to payout_value
                                                            _pool_loop
  341 0000019A         ; acknowledge, reserved byte answer
  342 0000019A 4864            LDR              R0,=DataIn  ; R0 = &DataIn (poi
                                                            nter)
  343 0000019C 6801            LDR              R1, [R0]    ; R1 = [R0]
  344 0000019E 2900            CMP              R1,#0       ; R1 = 0x00 (ACK)
  345 000001A0 D1DA            BNE              payout_value_pool_loop ; if not
                                                            , go to payout_valu
                                                            e_pool_loop
  346 000001A2         ; acknowledge, payout is complete
  347 000001A2         payout_status_send_payout_status
  348 000001A2 4961            LDR              R1,=Command ; R1 = &Command (po
                                                            inter)
  349 000001A4 F240 320F       MOV              R2,#COMMAND_EXP_PAYOUT_STATUS ;
                                                             R2 = COMMAND_EXP_P
                                                            AYOUT_STATUS
  350 000001A8 800A            STRH             R2,[R1]     ; [R1] = R2 (COMMAN
                                                            D_EXP_PAYOUT_VALUE_
                                                            POLL)
  351 000001AA F04F 0202       MOV              R2,#2       ; R2 = 2 (number of



ARM Macro Assembler    Page 13 


                                                             command bytes to s
                                                            end)
  352 000001AE F04F 0008       MOV              R0,#COIN_CHANGER_ADDR ; R0 = CO
                                                            IN_CHANGER_ADDR
  353 000001B2 F7FF FFFE       BL               MDB_SendAddress ; send the peri
                                                            pheral address
  354 000001B6 F7FF FFFE       BL               MDB_SendCommand ; send command 
                                                            with chk byte
  355 000001BA         payout_status_get_answer
  356 000001BA 485C            LDR              R0,=DataIn  ; R0 = &DataIn (poi
                                                            nter)
  357 000001BC F7FF FFFE       BL               MDB_GetAnswer ; getting answer
  358 000001C0 2901            CMP              R1, #1      ; R1 == 1 ? (respon
                                                            se time out)?
  359 000001C2 D0EE            BEQ              payout_status_send_payout_statu
s 
                                                            ; if so, go to payo
                                                            ut_status_send_payo
                                                            ut_status
  360 000001C4 2800            CMP              R0,#0       ; R0 == 0 ? (chksum
                                                             fail)?
  361 000001C6 BF08 F7FF 
              FFFE             BLEQ             MDB_SendRET ; if so, sen RET
  362 000001CC 2800            CMP              R0,#0       ; R0 == 0 ? (chksum
                                                             fail)?
  363 000001CE D0F4            BEQ              payout_status_get_answer ; if s
                                                            o, go to payout_sta
                                                            tus_get_answer
  364 000001D0 2801            CMP              R0,#1       ; R0 == 1 ? (reserv
                                                            ed byte as answer)?
                                                            
  365 000001D2 D0E6            BEQ              payout_status_send_payout_statu
s 
                                                            ; if so, go to payo
                                                            ut_status_send_payo
                                                            ut_status
  366 000001D4         ; acknowledge received information
  367 000001D4 F7FF FFFE       BL               MDB_SendACK ; sending ACK
  368 000001D8         payout_status_send_tube_status
  369 000001D8 4953            LDR              R1,=Command ; R1 = &Command (po
                                                            inter)
  370 000001DA F04F 020A       MOV              R2,#COMMAND_TUBE_STATUS ; R2 = 
                                                            COMMAND_TUBE_STATUS
                                                            
  371 000001DE 700A            STRB             R2,[R1]     ; [R1] = R2 (COMMAN
                                                            D_TUBE_STATUS)
  372 000001E0 F04F 0201       MOV              R2,#1       ; R2 = 2 (number of
                                                             command bytes to s
                                                            end)
  373 000001E4 F04F 0008       MOV              R0,#COIN_CHANGER_ADDR ; R0 = CO
                                                            IN_CHANGER_ADDR
  374 000001E8 F7FF FFFE       BL               MDB_SendAddress ; send the peri
                                                            pheral address
  375 000001EC F7FF FFFE       BL               MDB_SendCommand ; send command 
                                                            with chk byte
  376 000001F0         tube_status_get_answer
  377 000001F0 484F            LDR              R0,=Tube_status_buf ; R0 = &Tub
                                                            e_status_buf (point
                                                            er)



ARM Macro Assembler    Page 14 


  378 000001F2 F7FF FFFE       BL               MDB_GetAnswer ; getting answer
  379 000001F6 2901            CMP              R1, #1      ; R1 == 1 ? (respon
                                                            se time out)?
  380 000001F8 D0EE            BEQ              payout_status_send_tube_status 
                                                            ; if so, go to payo
                                                            ut_status_send_tube
                                                            _status
  381 000001FA 2800            CMP              R0,#0       ; R0 == 0 ? (chksum
                                                             fail)?
  382 000001FC BF08 F7FF 
              FFFE             BLEQ             MDB_SendRET ; if so, sen RET
  383 00000202 2800            CMP              R0,#0       ; R0 == 0 ? (chksum
                                                             fail)?
  384 00000204 D0F4            BEQ              tube_status_get_answer ; if so,
                                                             go to tube_status_
                                                            get_answer
  385 00000206         ; acknowledge, received data
  386 00000206 F7FF FFFE       BL               MDB_SendACK ; sending ACK
  387 0000020A         ; acknowledge, rutine of payout finished
  388 0000020A BD07            POP              {R0, R1, R2, PC} ; restore prev
                                                            ious value of R0 in
                                                            to R0, R1 into R1, 
                                                            and LR into PC (ret
                                                            urn)
  389 0000020C         
  390 0000020C         ;---------MDB_InitCoinChanger---------
  391 0000020C         ; Secuencia de inicializacion requerida para el Coin Cha
                       nger
  392 0000020C         ; Input : none
  393 0000020C         ; Output: none
  394 0000020C         ; Modifies: none, all used Register are pushed and poped
                       
  395 0000020C         MDB_InitCoinChanger
  396 0000020C B507            PUSH             {R0, R1, R2, LR} ; save current
                                                             values of R0, R1, 
                                                            R2, LR
  397 0000020E         ;reset all
  398 0000020E         InitSendBusReset
  399 0000020E F7FF FFFE       BL               MDB_SendBusReset
  400 00000212         ;wait after first pool
  401 00000212         ;LDR R0,=InitTimerSetupDone  ; Addres to jump after Time
                       r_SetupTime
  402 00000212         ;BL Timer_SetupTime    ; Timer 200ms, in: R0
  403 00000212         ;InitResetLoop
  404 00000212         ;B InitResetLoop    ; loop for wait Timer_SetupTime inte
                       rrupt
  405 00000212         ;InitTimerSetupDone
  406 00000212 F04F 00D2       MOV              R0, #210
  407 00000216 F7FF FFFE       BL               delay
  408 0000021A         ;send first pool to obtain "just reset" response
  409 0000021A         InitSendPool
  410 0000021A F04F 0008       MOV              R0, #COIN_CHANGER_ADDR ; R0 = C
                                                            OIN_CHANGER_ADDR
  411 0000021E F7FF FFFE       BL               MDB_SendPool ; Send command poo
                                                            l to R0 (coin chang
                                                            er)
  412 00000222         InitGetPool
  413 00000222 4844            LDR              R0, =Pool_buf ; R0 = &Pool_buf 
                                                            (pointer)



ARM Macro Assembler    Page 15 


  414 00000224 F7FF FFFE       BL               MDB_GetAnswer ; Get answer from
                                                             peripheral
  415 00000228 2901            CMP              R1, #1      ; R1 == 1 ? (respon
                                                            se time out)?
  416 0000022A D0F6            BEQ              InitSendPool ; if so, go to Ini
                                                            tSendPool
  417 0000022C 2802            CMP              R0,#2       ; R0 == 2? (receive
                                                            d 2 bytes - JustRes
                                                            et & Chk)
  418 0000022E D1EE            BNE              InitSendBusReset ; if not, go t
                                                            o InitNoResponsePoo
                                                            lLoop
  419 00000230 F04F 0100       MOV              R1,#0       ; clean register
  420 00000234 483D            LDR              R0, =DataIn ; R0 = &DataIn (poi
                                                            nter)
  421 00000236 7801            LDRB             R1, [R0]    ; R1 = [R0]
  422 00000238 290B            CMP              R1,#2_00001011 ; R1 == 00001011
                                                            B (Changer was Rese
                                                            t)
  423 0000023A D1E8            BNE              InitSendBusReset ; if not, go t
                                                            o InitSendBusReset
  424 0000023C F7FF FFFE       BL               MDB_SendACK ; Sending ACK
  425 00000240         ;send first setup, to obtain changer level and configura
                       tion information
  426 00000240         InitSendSetup
  427 00000240 F04F 0008       MOV              R0, #COIN_CHANGER_ADDR ; R0 = C
                                                            OIN_CHANGER_ADDR
  428 00000244 F7FF FFFE       BL               MDB_SendSetup ; Send command se
                                                            tup to R0
  429 00000248         InitGetSetup
  430 00000248 483B            LDR              R0, =Setup_buf ; R0 = &Setup_bu
                                                            f (pointer)
  431 0000024A F7FF FFFE       BL               MDB_GetAnswer ; Get answer from
                                                             peripheral
  432 0000024E 2901            CMP              R1, #1      ; R1 == 1 ? (respon
                                                            se time out)?
  433 00000250 D0F6            BEQ              InitSendSetup ; if so, go to In
                                                            itSendSetup
  434 00000252 2800            CMP              R0, #0      ; R0 == 0? (Chksum 
                                                            Failed)
  435 00000254 D102            BNE              InitSetupDone ; if not, go to I
                                                            nitSetupDone
  436 00000256 F7FF FFFE       BL               MDB_SendRET ; Sending RET
  437 0000025A E7F5            B                InitGetSetup ; go to InitGetSet
                                                            up, for getting ans
                                                            wer again
  438 0000025C         InitSetupDone
  439 0000025C F7FF FFFE       BL               MDB_SendACK ; Sending ACK
  440 00000260         ;send expansion indentification, to obtain additional ch
                       anger information and options
  441 00000260         InitSendExpIdentification
  442 00000260 F04F 0008       MOV              R0, #COIN_CHANGER_ADDR ; R0 = C
                                                            OIN_CHANGER_ADDR
  443 00000264 F7FF FFFE       BL               MDB_SendExpIdentification ; Sen
                                                            d expansion command
                                                             Identification to 
                                                            R0
  444 00000268         InitGetExpIdentification
  445 00000268 4834            LDR              R0, =Identification_buf ; R0 = 



ARM Macro Assembler    Page 16 


                                                            &Identification_buf
                                                             (pointer)
  446 0000026A F7FF FFFE       BL               MDB_GetAnswer ; Get answer from
                                                             peripheral
  447 0000026E 2901            CMP              R1, #1      ; R1 == 1 ? (respon
                                                            se time out)?
  448 00000270 D0F6            BEQ              InitSendExpIdentification ; if 
                                                            so, go to InitSendE
                                                            xpIdentification
  449 00000272 2800            CMP              R0, #0      ; R0 == 0? (Chksum 
                                                            Failed)
  450 00000274 D102            BNE              InitExpIdentificationDone ; if 
                                                            not, go to InitExpI
                                                            dentificationDone
  451 00000276 F7FF FFFE       BL               MDB_SendRET ; Sending RET
  452 0000027A E7F5            B                InitGetExpIdentification ; go t
                                                            o InitGetIdentifica
                                                            tion, for getting a
                                                            nswer again
  453 0000027C         InitExpIdentificationDone
  454 0000027C F7FF FFFE       BL               MDB_SendACK ; Sending ACK
  455 00000280         ;send Feature Enable, To enable desired options
  456 00000280         InitSendExpFeatureEnable
  457 00000280 4929            LDR              R1, =Command ; R1 = &Command (p
                                                            ointer)
  458 00000282 F240 100F       MOV              R0, #COMMAND_EXP_FEATURE_ENEABL
E 
                                                            ; R0 = COMMAND_EXP_
                                                            FEATURE_ENEABLE
  459 00000286 7008            STRB             R0, [R1]    ; [R1] = R0 (upgrad
                                                            e command buffer)
  460 00000288 4A2C            LDR              R2, =Identification_buf ; R2 = 
                                                            &Identification_buf
                                                             (pointer)
  461 0000028A F8D2 001D       LDR              R0, [R2,#29] ; R0 = [R2+29] (fe
                                                            atures availables)
  462 0000028E F8C1 0001       STR              R0, [R1,#1] ; [R1+1] = R0 (acti
                                                            vate all features)
  463 00000292 F04F 0008       MOV              R0, #COIN_CHANGER_ADDR ; R0 = C
                                                            OIN_CHANGER_ADDR
  464 00000296 F04F 0205       MOV              R2, #5      ; R2 = 5 (number of
                                                             command/data bytes
                                                             to send)
  465 0000029A F7FF FFFE       BL               MDB_SendCommand ; envia a R0, R
                                                            2 comandos en &R1
  466 0000029E         InitGetExpFeatureEnable
  467 0000029E 4823            LDR              R0, =DataIn ; R0 = &DataIn (poi
                                                            nter)
  468 000002A0 F7FF FFFE       BL               MDB_GetAnswer ; Get answer from
                                                             peripheral
  469 000002A4 2901            CMP              R1, #1      ; R1 == 1 ? (respon
                                                            se time out)?
  470 000002A6 D0EB            BEQ              InitSendExpFeatureEnable ; if s
                                                            o, go to InitSendEx
                                                            pFeatureEnable
  471 000002A8 4820            LDR              R0, =DataIn ; R0 = &DataIn (poi
                                                            nter)
  472 000002AA 6801            LDR              R1, [R0]    ; R1 = [R0] (answer
                                                            )



ARM Macro Assembler    Page 17 


  473 000002AC 2900            CMP              R1, #0      ; R1 == 00H ? (R1 =
                                                            = ACK?)
  474 000002AE D1E7            BNE              InitSendExpFeatureEnable ; if n
                                                            ot, go to InitSendE
                                                            xpFeatureEnable
  475 000002B0         ;send expansion SEND DIAGNOSTIC STATUS, to request the c
                       hanger to report its current state of operation
  476 000002B0         InitSendExpSendDiagStatus
  477 000002B0 F04F 0008       MOV              R0, #COIN_CHANGER_ADDR ; R0 = C
                                                            OIN_CHANGER_ADDR
  478 000002B4 F7FF FF21       BL               MDB_SendExpSendDiagStatus ; Sen
                                                            d expansion command
                                                             send diagnostic st
                                                            atus to R0
  479 000002B8         InitGetExpSendDiagStatus
  480 000002B8 4821            LDR              R0, =Send_diag_status_buf ; R0 
                                                            = &Send_diag_status
                                                            _buf (pointer)
  481 000002BA F7FF FFFE       BL               MDB_GetAnswer ; Get answer from
                                                             peripheral
  482 000002BE 2901            CMP              R1, #1      ; R1 == 1 ? (respon
                                                            se time out)?
  483 000002C0 D0F6            BEQ              InitSendExpSendDiagStatus ; if 
                                                            so, go to InitSendE
                                                            xpSendDiagStatus
  484 000002C2 2800            CMP              R0, #0      ; R0 == 0? (Chksum 
                                                            Failed)
  485 000002C4 D102            BNE              InitExpSendDiagStatusDone ; if 
                                                            not, go to InitExpS
                                                            endDiagStatusDone
  486 000002C6 F7FF FFFE       BL               MDB_SendRET ; Sending RET
  487 000002CA E7F5            B                InitGetExpSendDiagStatus ; go t
                                                            o InitGetExpSendDia
                                                            gStatus, for gettin
                                                            g answer again
  488 000002CC         InitExpSendDiagStatusDone
  489 000002CC F7FF FFFE       BL               MDB_SendACK ; Sending ACK
  490 000002D0         ;wait before first TUBE STATUS
  491 000002D0 F04F 00FA       MOV              R0, #250
  492 000002D4 F7FF FFFE       BL               delay
  493 000002D8         ;send TUBE STATUS, to obtain tube status / change inform
                       ation
  494 000002D8         InitSendTubeStatus
  495 000002D8 F04F 0008       MOV              R0, #COIN_CHANGER_ADDR ; R0 = C
                                                            OIN_CHANGER_ADDR
  496 000002DC F7FF FF19       BL               MDB_SendTubeStatus ; Send comma
                                                            nd Send Tube Status
                                                             to R0
  497 000002E0         InitGetTubeStatus
  498 000002E0 4813            LDR              R0, =Tube_status_buf ; R0 = &Tu
                                                            be_status_buf (poin
                                                            ter)
  499 000002E2 F7FF FFFE       BL               MDB_GetAnswer ; Get answer from
                                                             peripheral
  500 000002E6 2901            CMP              R1, #1      ; R1 == 1 ? (respon
                                                            se time out)?
  501 000002E8 D0F6            BEQ              InitSendTubeStatus ; if so, go 
                                                            to InitSendTubeStat
                                                            us



ARM Macro Assembler    Page 18 


  502 000002EA 2800            CMP              R0, #0      ; R0 == 0? (Chksum 
                                                            Failed)
  503 000002EC D102            BNE              InitTubeStatusDone ; if not, go
                                                             to InitTubeStatusD
                                                            one
  504 000002EE F7FF FFFE       BL               MDB_SendRET ; Sending RET
  505 000002F2 E7F5            B                InitGetTubeStatus ; go to InitG
                                                            etTubeStatus, for g
                                                            etting answer again
                                                            
  506 000002F4         InitTubeStatusDone
  507 000002F4 F7FF FFFE       BL               MDB_SendACK ; Sending ACK
  508 000002F8         ;send Coin type, to enable desired coin acceptance and d
                       isable manual coin payout if desired
  509 000002F8         InitSendCoinType
  510 000002F8 490B            LDR              R1, =Command ; R1 = &Command (p
                                                            ointer)
  511 000002FA F04F 000C       MOV              R0, #COMMAND_COIN_TYPE ; R0 = C
                                                            OMMAND_COIN_TYPE
  512 000002FE 7008            STRB             R0, [R1]    ; [R1] = R0 (upgrad
                                                            e command buffer)
  513 00000300 F04F 30FF       LDR              R0,=0xFFFFFFFF ; enable ALL ace
                                                            pted coins, and all
                                                             coins to manual di
                                                            spense
  514 00000304 F8C1 0001       STR              R0, [R1,#1] ; [R1+1] = R0 (upgr
                                                            ade command buffer)
                                                            
  515 00000308 F04F 0008       MOV              R0, #COIN_CHANGER_ADDR ; R0 = C
                                                            OIN_CHANGER_ADDR
  516 0000030C F04F 0205       MOV              R2, #5      ; R2 = 5 (number of
                                                             command/data bytes
                                                             to send)
  517 00000310 F7FF FFFE       BL               MDB_SendCommand ; envia a R0, R
                                                            2 comandos en &R1
  518 00000314         InitGetCoinType
  519 00000314 4805            LDR              R0, =DataIn ; R0 = &DataIn (poi
                                                            nter)
  520 00000316 F7FF FFFE       BL               MDB_GetAnswer ; Get answer from
                                                             peripheral
  521 0000031A 2901            CMP              R1, #1      ; R1 == 1 ? (respon
                                                            se time out)?
  522 0000031C D0EC            BEQ              InitSendCoinType ; if so, go to
                                                             InitSendCoinType
  523 0000031E 4803            LDR              R0, =DataIn ; R0 = &DataIn (poi
                                                            nter)
  524 00000320 6801            LDR              R1, [R0]    ; R1 = [R0] (answer
                                                            )
  525 00000322 2900            CMP              R1, #0x00   ; R1 == 00H ? (R1 =
                                                            = ACK?)
  526 00000324 D1E8            BNE              InitSendCoinType ; if not, go t
                                                            o InitSendExpFeatur
                                                            eEnable
  527 00000326         
  528 00000326 BD07            POP              {R0, R1, R2, PC} ; restore prev
                                                            ious value of R0 in
                                                            to R0, R1 into R1, 
                                                            R2 into R2 and LR i
                                                            nto PC (return)



ARM Macro Assembler    Page 19 


  529 00000328         
  530 00000328         
  531 00000328                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  532 00000328                 END                          ; end of file
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\mdb.d -o.\objects\mdb.o -IC:\Users\mode_\Documents\Fm
at\MicroControladores\KeilProjects\Cash_flow\RTE\_Target_1 -IC:\Keil_v5\ARM\PAC
K\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 -IC:\Keil_v5\ARM\CMSIS\Include --p
redefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 522" --predefine="
TM4C1294NCPDT SETA 1" --list=.\listings\mdb.lst mdb.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Command 00000000

Symbol: Command
   Definitions
      At line 53 in file mdb.s
   Uses
      At line 61 in file mdb.s
      At line 222 in file mdb.s
      At line 237 in file mdb.s
      At line 252 in file mdb.s
      At line 267 in file mdb.s
      At line 282 in file mdb.s
      At line 299 in file mdb.s
      At line 321 in file mdb.s
      At line 348 in file mdb.s
      At line 369 in file mdb.s
      At line 457 in file mdb.s
      At line 510 in file mdb.s

DATA 00000000

Symbol: DATA
   Definitions
      At line 51 in file mdb.s
   Uses
      None
Comment: DATA unused
DataIn 00000024

Symbol: DataIn
   Definitions
      At line 54 in file mdb.s
   Uses
      At line 62 in file mdb.s
      At line 308 in file mdb.s
      At line 312 in file mdb.s
      At line 329 in file mdb.s
      At line 342 in file mdb.s
      At line 356 in file mdb.s
      At line 420 in file mdb.s
      At line 467 in file mdb.s
      At line 471 in file mdb.s
      At line 519 in file mdb.s
      At line 523 in file mdb.s

Identification_buf 00000084

Symbol: Identification_buf
   Definitions
      At line 58 in file mdb.s
   Uses
      At line 66 in file mdb.s
      At line 445 in file mdb.s
      At line 460 in file mdb.s

Payout_status_buf 000000A6

Symbol: Payout_status_buf
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 59 in file mdb.s
   Uses
      At line 67 in file mdb.s
Comment: Payout_status_buf used once
Pool_buf 00000073

Symbol: Pool_buf
   Definitions
      At line 57 in file mdb.s
   Uses
      At line 65 in file mdb.s
      At line 413 in file mdb.s

Send_diag_status_buf 000000B7

Symbol: Send_diag_status_buf
   Definitions
      At line 60 in file mdb.s
   Uses
      At line 68 in file mdb.s
      At line 480 in file mdb.s

Setup_buf 00000048

Symbol: Setup_buf
   Definitions
      At line 55 in file mdb.s
   Uses
      At line 63 in file mdb.s
      At line 430 in file mdb.s

Tube_status_buf 00000060

Symbol: Tube_status_buf
   Definitions
      At line 56 in file mdb.s
   Uses
      At line 64 in file mdb.s
      At line 377 in file mdb.s
      At line 498 in file mdb.s

9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 83 in file mdb.s
   Uses
      None
Comment: .text unused
DispenseValue_get_answer 00000146

Symbol: DispenseValue_get_answer
   Definitions
      At line 307 in file mdb.s
   Uses
      None
Comment: DispenseValue_get_answer unused
InitExpIdentificationDone 0000027C

Symbol: InitExpIdentificationDone
   Definitions
      At line 453 in file mdb.s
   Uses
      At line 450 in file mdb.s
Comment: InitExpIdentificationDone used once
InitExpSendDiagStatusDone 000002CC

Symbol: InitExpSendDiagStatusDone
   Definitions
      At line 488 in file mdb.s
   Uses
      At line 485 in file mdb.s
Comment: InitExpSendDiagStatusDone used once
InitGetCoinType 00000314

Symbol: InitGetCoinType
   Definitions
      At line 518 in file mdb.s
   Uses
      None
Comment: InitGetCoinType unused
InitGetExpFeatureEnable 0000029E

Symbol: InitGetExpFeatureEnable
   Definitions
      At line 466 in file mdb.s
   Uses
      None
Comment: InitGetExpFeatureEnable unused
InitGetExpIdentification 00000268

Symbol: InitGetExpIdentification
   Definitions
      At line 444 in file mdb.s
   Uses
      At line 452 in file mdb.s
Comment: InitGetExpIdentification used once
InitGetExpSendDiagStatus 000002B8

Symbol: InitGetExpSendDiagStatus



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 479 in file mdb.s
   Uses
      At line 487 in file mdb.s
Comment: InitGetExpSendDiagStatus used once
InitGetPool 00000222

Symbol: InitGetPool
   Definitions
      At line 412 in file mdb.s
   Uses
      None
Comment: InitGetPool unused
InitGetSetup 00000248

Symbol: InitGetSetup
   Definitions
      At line 429 in file mdb.s
   Uses
      At line 437 in file mdb.s
Comment: InitGetSetup used once
InitGetTubeStatus 000002E0

Symbol: InitGetTubeStatus
   Definitions
      At line 497 in file mdb.s
   Uses
      At line 505 in file mdb.s
Comment: InitGetTubeStatus used once
InitSendBusReset 0000020E

Symbol: InitSendBusReset
   Definitions
      At line 398 in file mdb.s
   Uses
      At line 418 in file mdb.s
      At line 423 in file mdb.s

InitSendCoinType 000002F8

Symbol: InitSendCoinType
   Definitions
      At line 509 in file mdb.s
   Uses
      At line 522 in file mdb.s
      At line 526 in file mdb.s

InitSendExpFeatureEnable 00000280

Symbol: InitSendExpFeatureEnable
   Definitions
      At line 456 in file mdb.s
   Uses
      At line 470 in file mdb.s
      At line 474 in file mdb.s

InitSendExpIdentification 00000260

Symbol: InitSendExpIdentification



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 441 in file mdb.s
   Uses
      At line 448 in file mdb.s
Comment: InitSendExpIdentification used once
InitSendExpSendDiagStatus 000002B0

Symbol: InitSendExpSendDiagStatus
   Definitions
      At line 476 in file mdb.s
   Uses
      At line 483 in file mdb.s
Comment: InitSendExpSendDiagStatus used once
InitSendPool 0000021A

Symbol: InitSendPool
   Definitions
      At line 409 in file mdb.s
   Uses
      At line 416 in file mdb.s
Comment: InitSendPool used once
InitSendSetup 00000240

Symbol: InitSendSetup
   Definitions
      At line 426 in file mdb.s
   Uses
      At line 433 in file mdb.s
Comment: InitSendSetup used once
InitSendTubeStatus 000002D8

Symbol: InitSendTubeStatus
   Definitions
      At line 494 in file mdb.s
   Uses
      At line 501 in file mdb.s
Comment: InitSendTubeStatus used once
InitSetupDone 0000025C

Symbol: InitSetupDone
   Definitions
      At line 438 in file mdb.s
   Uses
      At line 435 in file mdb.s
Comment: InitSetupDone used once
InitTubeStatusDone 000002F4

Symbol: InitTubeStatusDone
   Definitions
      At line 506 in file mdb.s
   Uses
      At line 503 in file mdb.s
Comment: InitTubeStatusDone used once
MDB_DispenseValue 0000012A

Symbol: MDB_DispenseValue
   Definitions
      At line 296 in file mdb.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 81 in file mdb.s
Comment: MDB_DispenseValue used once
MDB_GetAnswer 0000005E

Symbol: MDB_GetAnswer
   Definitions
      At line 167 in file mdb.s
   Uses
      At line 75 in file mdb.s
      At line 309 in file mdb.s
      At line 330 in file mdb.s
      At line 357 in file mdb.s
      At line 378 in file mdb.s
      At line 414 in file mdb.s
      At line 431 in file mdb.s
      At line 446 in file mdb.s
      At line 468 in file mdb.s
      At line 481 in file mdb.s
      At line 499 in file mdb.s
      At line 520 in file mdb.s

MDB_InitCoinChanger 0000020C

Symbol: MDB_InitCoinChanger
   Definitions
      At line 395 in file mdb.s
   Uses
      At line 77 in file mdb.s
Comment: MDB_InitCoinChanger used once
MDB_SendACK 0000003A

Symbol: MDB_SendACK
   Definitions
      At line 131 in file mdb.s
   Uses
      At line 72 in file mdb.s
      At line 338 in file mdb.s
      At line 367 in file mdb.s
      At line 386 in file mdb.s
      At line 424 in file mdb.s
      At line 439 in file mdb.s
      At line 454 in file mdb.s
      At line 489 in file mdb.s
      At line 507 in file mdb.s

MDB_SendAddress 00000000

Symbol: MDB_SendAddress
   Definitions
      At line 92 in file mdb.s
   Uses
      At line 70 in file mdb.s
      At line 226 in file mdb.s
      At line 241 in file mdb.s
      At line 256 in file mdb.s
      At line 271 in file mdb.s
      At line 286 in file mdb.s
      At line 305 in file mdb.s
      At line 326 in file mdb.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 353 in file mdb.s
      At line 374 in file mdb.s

MDB_SendBusReset 0000009E

Symbol: MDB_SendBusReset
   Definitions
      At line 203 in file mdb.s
   Uses
      At line 76 in file mdb.s
      At line 399 in file mdb.s

MDB_SendCommand 00000010

Symbol: MDB_SendCommand
   Definitions
      At line 104 in file mdb.s
   Uses
      At line 71 in file mdb.s
      At line 227 in file mdb.s
      At line 242 in file mdb.s
      At line 257 in file mdb.s
      At line 272 in file mdb.s
      At line 287 in file mdb.s
      At line 306 in file mdb.s
      At line 327 in file mdb.s
      At line 354 in file mdb.s
      At line 375 in file mdb.s
      At line 465 in file mdb.s
      At line 517 in file mdb.s

MDB_SendExpIdentification 000000E2

Symbol: MDB_SendExpIdentification
   Definitions
      At line 250 in file mdb.s
   Uses
      At line 80 in file mdb.s
      At line 443 in file mdb.s

MDB_SendExpSendDiagStatus 000000FA

Symbol: MDB_SendExpSendDiagStatus
   Definitions
      At line 265 in file mdb.s
   Uses
      At line 478 in file mdb.s
Comment: MDB_SendExpSendDiagStatus used once
MDB_SendNAK 00000052

Symbol: MDB_SendNAK
   Definitions
      At line 153 in file mdb.s
   Uses
      At line 74 in file mdb.s
Comment: MDB_SendNAK used once
MDB_SendPool 000000B2

Symbol: MDB_SendPool



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 220 in file mdb.s
   Uses
      At line 78 in file mdb.s
      At line 411 in file mdb.s

MDB_SendRET 00000046

Symbol: MDB_SendRET
   Definitions
      At line 142 in file mdb.s
   Uses
      At line 73 in file mdb.s
      At line 334 in file mdb.s
      At line 361 in file mdb.s
      At line 382 in file mdb.s
      At line 436 in file mdb.s
      At line 451 in file mdb.s
      At line 486 in file mdb.s
      At line 504 in file mdb.s

MDB_SendSetup 000000CA

Symbol: MDB_SendSetup
   Definitions
      At line 235 in file mdb.s
   Uses
      At line 79 in file mdb.s
      At line 428 in file mdb.s

MDB_SendTubeStatus 00000112

Symbol: MDB_SendTubeStatus
   Definitions
      At line 280 in file mdb.s
   Uses
      At line 496 in file mdb.s
Comment: MDB_SendTubeStatus used once
getAnswerDone 00000092

Symbol: getAnswerDone
   Definitions
      At line 190 in file mdb.s
   Uses
      At line 187 in file mdb.s
Comment: getAnswerDone used once
getAnswerEnd 00000084

Symbol: getAnswerEnd
   Definitions
      At line 183 in file mdb.s
   Uses
      At line 180 in file mdb.s
Comment: getAnswerEnd used once
getAnswerLoop 0000006E

Symbol: getAnswerLoop
   Definitions
      At line 173 in file mdb.s



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 182 in file mdb.s
Comment: getAnswerLoop used once
getAnswer_no_response 00000094

Symbol: getAnswer_no_response
   Definitions
      At line 193 in file mdb.s
   Uses
      At line 176 in file mdb.s
Comment: getAnswer_no_response used once
init_dispense_value 0000012C

Symbol: init_dispense_value
   Definitions
      At line 298 in file mdb.s
   Uses
      At line 311 in file mdb.s
      At line 315 in file mdb.s

outCommandDone 00000032

Symbol: outCommandDone
   Definitions
      At line 119 in file mdb.s
   Uses
      At line 112 in file mdb.s
Comment: outCommandDone used once
outCommandLoop 0000001C

Symbol: outCommandLoop
   Definitions
      At line 110 in file mdb.s
   Uses
      At line 118 in file mdb.s
Comment: outCommandLoop used once
payout_send_value_pool 00000160

Symbol: payout_send_value_pool
   Definitions
      At line 320 in file mdb.s
   Uses
      At line 332 in file mdb.s
Comment: payout_send_value_pool used once
payout_status_get_answer 000001BA

Symbol: payout_status_get_answer
   Definitions
      At line 355 in file mdb.s
   Uses
      At line 363 in file mdb.s
Comment: payout_status_get_answer used once
payout_status_send_payout_status 000001A2

Symbol: payout_status_send_payout_status
   Definitions
      At line 347 in file mdb.s
   Uses
      At line 359 in file mdb.s



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

      At line 365 in file mdb.s

payout_status_send_tube_status 000001D8

Symbol: payout_status_send_tube_status
   Definitions
      At line 368 in file mdb.s
   Uses
      At line 380 in file mdb.s
Comment: payout_status_send_tube_status used once
payout_value_poll_get_answer 00000178

Symbol: payout_value_poll_get_answer
   Definitions
      At line 328 in file mdb.s
   Uses
      At line 336 in file mdb.s
Comment: payout_value_poll_get_answer used once
payout_value_pool_loop 00000158

Symbol: payout_value_pool_loop
   Definitions
      At line 317 in file mdb.s
   Uses
      At line 340 in file mdb.s
      At line 345 in file mdb.s

sendBusResetDone 000000AC

Symbol: sendBusResetDone
   Definitions
      At line 211 in file mdb.s
   Uses
      None
Comment: sendBusResetDone unused
tube_status_get_answer 000001F0

Symbol: tube_status_get_answer
   Definitions
      At line 376 in file mdb.s
   Uses
      At line 384 in file mdb.s
Comment: tube_status_get_answer used once
50 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

CMDLEN 00000024

Symbol: CMDLEN
   Definitions
      At line 52 in file mdb.s
   Uses
      At line 53 in file mdb.s
      At line 54 in file mdb.s

COIN_CHANGER_ADDR 00000008

Symbol: COIN_CHANGER_ADDR
   Definitions
      At line 8 in file mdb.s
   Uses
      At line 304 in file mdb.s
      At line 325 in file mdb.s
      At line 352 in file mdb.s
      At line 373 in file mdb.s
      At line 410 in file mdb.s
      At line 427 in file mdb.s
      At line 442 in file mdb.s
      At line 463 in file mdb.s
      At line 477 in file mdb.s
      At line 495 in file mdb.s
      At line 515 in file mdb.s

COMMAND_COIN_TYPE 0000000C

Symbol: COMMAND_COIN_TYPE
   Definitions
      At line 13 in file mdb.s
   Uses
      At line 511 in file mdb.s
Comment: COMMAND_COIN_TYPE used once
COMMAND_DISPENSE 0000000D

Symbol: COMMAND_DISPENSE
   Definitions
      At line 14 in file mdb.s
   Uses
      None
Comment: COMMAND_DISPENSE unused
COMMAND_EXPANSION 0000000F

Symbol: COMMAND_EXPANSION
   Definitions
      At line 15 in file mdb.s
   Uses
      None
Comment: COMMAND_EXPANSION unused
COMMAND_EXP_FEATURE_ENEABLE 0000010F

Symbol: COMMAND_EXP_FEATURE_ENEABLE
   Definitions
      At line 17 in file mdb.s
   Uses
      At line 458 in file mdb.s
Comment: COMMAND_EXP_FEATURE_ENEABLE used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

COMMAND_EXP_IDENTIFICATION 0000000F

Symbol: COMMAND_EXP_IDENTIFICATION
   Definitions
      At line 16 in file mdb.s
   Uses
      At line 253 in file mdb.s
Comment: COMMAND_EXP_IDENTIFICATION used once
COMMAND_EXP_PAYOUT 0000020F

Symbol: COMMAND_EXP_PAYOUT
   Definitions
      At line 18 in file mdb.s
   Uses
      At line 300 in file mdb.s
Comment: COMMAND_EXP_PAYOUT used once
COMMAND_EXP_PAYOUT_STATUS 0000030F

Symbol: COMMAND_EXP_PAYOUT_STATUS
   Definitions
      At line 19 in file mdb.s
   Uses
      At line 349 in file mdb.s
Comment: COMMAND_EXP_PAYOUT_STATUS used once
COMMAND_EXP_PAYOUT_VALUE_POLL 0000040F

Symbol: COMMAND_EXP_PAYOUT_VALUE_POLL
   Definitions
      At line 20 in file mdb.s
   Uses
      At line 322 in file mdb.s
Comment: COMMAND_EXP_PAYOUT_VALUE_POLL used once
COMMAND_EXP_SEND_DIAGNOSTIC_STATUS 0000050F

Symbol: COMMAND_EXP_SEND_DIAGNOSTIC_STATUS
   Definitions
      At line 21 in file mdb.s
   Uses
      At line 268 in file mdb.s
Comment: COMMAND_EXP_SEND_DIAGNOSTIC_STATUS used once
COMMAND_POLL 0000000B

Symbol: COMMAND_POLL
   Definitions
      At line 12 in file mdb.s
   Uses
      At line 223 in file mdb.s
Comment: COMMAND_POLL used once
COMMAND_RESET 00000008

Symbol: COMMAND_RESET
   Definitions
      At line 9 in file mdb.s
   Uses
      None
Comment: COMMAND_RESET unused
COMMAND_SETUP 00000009

Symbol: COMMAND_SETUP



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 10 in file mdb.s
   Uses
      At line 238 in file mdb.s
Comment: COMMAND_SETUP used once
COMMAND_TUBE_STATUS 0000000A

Symbol: COMMAND_TUBE_STATUS
   Definitions
      At line 11 in file mdb.s
   Uses
      At line 283 in file mdb.s
      At line 370 in file mdb.s

15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

Timer_BreakTime 00000000

Symbol: Timer_BreakTime
   Definitions
      At line 42 in file mdb.s
   Uses
      None
Comment: Timer_BreakTime unused
Timer_NoResponseTime 00000000

Symbol: Timer_NoResponseTime
   Definitions
      At line 45 in file mdb.s
   Uses
      None
Comment: Timer_NoResponseTime unused
Timer_NoResponseTime_stop 00000000

Symbol: Timer_NoResponseTime_stop
   Definitions
      At line 46 in file mdb.s
   Uses
      None
Comment: Timer_NoResponseTime_stop unused
Timer_PollingTime 00000000

Symbol: Timer_PollingTime
   Definitions
      At line 44 in file mdb.s
   Uses
      None
Comment: Timer_PollingTime unused
Timer_ResponseTime 00000000

Symbol: Timer_ResponseTime
   Definitions
      At line 40 in file mdb.s
   Uses
      None
Comment: Timer_ResponseTime unused
Timer_ResponseTime_stop 00000000

Symbol: Timer_ResponseTime_stop
   Definitions
      At line 41 in file mdb.s
   Uses
      None
Comment: Timer_ResponseTime_stop unused
Timer_SetupTime 00000000

Symbol: Timer_SetupTime
   Definitions
      At line 43 in file mdb.s
   Uses
      None
Comment: Timer_SetupTime unused
UART0_Handler 00000000

Symbol: UART0_Handler



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Definitions
      At line 27 in file mdb.s
   Uses
      None
Comment: UART0_Handler unused
UART_HighStickParity 00000000

Symbol: UART_HighStickParity
   Definitions
      At line 34 in file mdb.s
   Uses
      At line 94 in file mdb.s
Comment: UART_HighStickParity used once
UART_InChar 00000000

Symbol: UART_InChar
   Definitions
      At line 25 in file mdb.s
   Uses
      At line 174 in file mdb.s
Comment: UART_InChar used once
UART_InString 00000000

Symbol: UART_InString
   Definitions
      At line 33 in file mdb.s
   Uses
      None
Comment: UART_InString unused
UART_InUDec 00000000

Symbol: UART_InUDec
   Definitions
      At line 29 in file mdb.s
   Uses
      None
Comment: UART_InUDec unused
UART_InUHex 00000000

Symbol: UART_InUHex
   Definitions
      At line 31 in file mdb.s
   Uses
      None
Comment: UART_InUHex unused
UART_Init 00000000

Symbol: UART_Init
   Definitions
      At line 24 in file mdb.s
   Uses
      None
Comment: UART_Init unused
UART_LowStickParity 00000000

Symbol: UART_LowStickParity
   Definitions
      At line 35 in file mdb.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
External symbols

      At line 96 in file mdb.s
Comment: UART_LowStickParity used once
UART_OutChar 00000000

Symbol: UART_OutChar
   Definitions
      At line 26 in file mdb.s
   Uses
      At line 95 in file mdb.s
      At line 115 in file mdb.s
      At line 121 in file mdb.s
      At line 134 in file mdb.s
      At line 145 in file mdb.s
      At line 156 in file mdb.s

UART_OutString 00000000

Symbol: UART_OutString
   Definitions
      At line 28 in file mdb.s
   Uses
      None
Comment: UART_OutString unused
UART_OutUDec 00000000

Symbol: UART_OutUDec
   Definitions
      At line 30 in file mdb.s
   Uses
      None
Comment: UART_OutUDec unused
UART_OutUHex 00000000

Symbol: UART_OutUHex
   Definitions
      At line 32 in file mdb.s
   Uses
      None
Comment: UART_OutUHex unused
UART_SendBreak 00000000

Symbol: UART_SendBreak
   Definitions
      At line 36 in file mdb.s
   Uses
      At line 205 in file mdb.s
Comment: UART_SendBreak used once
UART_SendBreak_Disable 00000000

Symbol: UART_SendBreak_Disable
   Definitions
      At line 37 in file mdb.s
   Uses
      At line 212 in file mdb.s
Comment: UART_SendBreak_Disable used once
delay 00000000

Symbol: delay
   Definitions



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
External symbols

      At line 49 in file mdb.s
   Uses
      At line 210 in file mdb.s
      At line 319 in file mdb.s
      At line 407 in file mdb.s
      At line 492 in file mdb.s

22 symbols
432 symbols in table
