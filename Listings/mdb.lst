


ARM Macro Assembler    Page 1 


    1 00000000         ; mdb.s
    2 00000000         ; Runs on TM4C1294
    3 00000000         ; Modulo de funciones del protocolo MDB
    4 00000000         ; usando funciones del modulo de UARTInts.s
    5 00000000         ; David Pinzon & Alberto Lopez
    6 00000000         ; May 27, 2017
    7 00000000         
    8 00000000 00000008 
                       COIN_CHANGER_ADDR
                               EQU              0x0008
    9 00000000 00000008 
                       COMMAND_RESET
                               EQU              0x0008
   10 00000000 00000009 
                       COMMAND_SETUP
                               EQU              0x0009
   11 00000000 0000000A 
                       COMMAND_TUBE_STATUS
                               EQU              0x000A
   12 00000000 0000000B 
                       COMMAND_POLL
                               EQU              0x000B
   13 00000000 0000000C 
                       COMMAND_COIN_TYPE
                               EQU              0x000C
   14 00000000 0000000D 
                       COMMAND_DISPENSE
                               EQU              0x000D
   15 00000000 0000000F 
                       COMMAND_EXPANSION
                               EQU              0x000F
   16 00000000 0000000F 
                       COMMAND_EXP_IDENTIFICATION
                               EQU              0x000F
   17 00000000 0000010F 
                       COMMAND_EXP_FEATURE_ENEABLE
                               EQU              0x010F
   18 00000000 0000020F 
                       COMMAND_EXP_PAYOUT
                               EQU              0x020F
   19 00000000 0000030F 
                       COMMAND_EXP_PAYOUT_STATUS
                               EQU              0x030F
   20 00000000 0000040F 
                       COMMAND_EXP_PAYOUT_VALUE_POLL
                               EQU              0x040F
   21 00000000 0000050F 
                       COMMAND_EXP_SEND_DIAGNOSTIC_STATUS
                               EQU              0x050F
   22 00000000         
   23 00000000         ;functions from UARTInts.s
   24 00000000                 IMPORT           UART_Init
   25 00000000                 IMPORT           UART_InChar
   26 00000000                 IMPORT           UART_OutChar
   27 00000000                 IMPORT           UART0_Handler
   28 00000000                 IMPORT           UART_OutString
   29 00000000                 IMPORT           UART_InUDec
   30 00000000                 IMPORT           UART_OutUDec
   31 00000000                 IMPORT           UART_InUHex



ARM Macro Assembler    Page 2 


   32 00000000                 IMPORT           UART_OutUHex
   33 00000000                 IMPORT           UART_InString
   34 00000000                 IMPORT           UART_HighStickParity
   35 00000000                 IMPORT           UART_LowStickParity
   36 00000000                 IMPORT           UART_SendBreak
   37 00000000                 IMPORT           UART_SendBreak_Disable
   38 00000000         
   39 00000000         ;functions from GPTimer.s
   40 00000000                 IMPORT           Timer_ResponseTime
   41 00000000                 IMPORT           Timer_ResponseTime_stop
   42 00000000                 IMPORT           Timer_BreakTime
   43 00000000                 IMPORT           Timer_SetupTime
   44 00000000                 IMPORT           Timer_PollingTime
   45 00000000                 IMPORT           Timer_NoResponseTime
   46 00000000                 IMPORT           Timer_NoResponseTime_stop
   47 00000000         
   48 00000000         ;functions from Systick.s
   49 00000000                 IMPORT           delay
   50 00000000         
   51 00000000                 AREA             DATA, ALIGN=2
   52 00000000 00000024 
                       CMDLEN  EQU              36          ; max size of comma
                                                            nd
   53 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 Command SPACE            (CMDLEN)
   54 00000024 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 DataIn  SPACE            (CMDLEN)
   55 00000048 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 Setup_buf
                               SPACE            24
   56 00000060 00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 3 


              00 00 00 
              00 00 00 
              00 00 00 
              00       Tube_status_buf
                               SPACE            19
   57 00000073 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    Pool_buf
                               SPACE            17
   58 00000084 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       Identification_buf
                               SPACE            34
   59 000000A6 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    Payout_status_buf
                               SPACE            17
   60 000000B7 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    Send_diag_status_buf
                               SPACE            17
   61 000000C8                 EXPORT           Command
   62 000000C8                 EXPORT           DataIn
   63 000000C8                 EXPORT           Setup_buf
   64 000000C8                 EXPORT           Tube_status_buf
   65 000000C8                 EXPORT           Pool_buf
   66 000000C8                 EXPORT           Identification_buf
   67 000000C8                 EXPORT           Payout_status_buf
   68 000000C8                 EXPORT           Send_diag_status_buf
   69 000000C8         ;functions to export
   70 000000C8                 EXPORT           MDB_SendAddress
   71 000000C8                 EXPORT           MDB_SendCommand
   72 000000C8                 EXPORT           MDB_SendACK
   73 000000C8                 EXPORT           MDB_SendRET
   74 000000C8                 EXPORT           MDB_SendNAK
   75 000000C8                 EXPORT           MDB_GetAnswer
   76 000000C8                 EXPORT           MDB_SendBusReset
   77 000000C8                 EXPORT           MDB_InitCoinChanger
   78 000000C8                 EXPORT           MDB_SendPool
   79 000000C8                 EXPORT           MDB_SendSetup
   80 000000C8                 EXPORT           MDB_SendExpIdentification



ARM Macro Assembler    Page 4 


   81 000000C8                 EXPORT           MDB_DispenseValue
   82 000000C8         
   83 000000C8                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   84 00000000                 THUMB
   85 00000000         
   86 00000000         ;-----------MDB_SendAddress-----------
   87 00000000         ; Envia la direccion de un periferico
   88 00000000         ; activa High Stick Parity bit to send adress
   89 00000000         ; activa Low Stick parity after send
   90 00000000         ; Input : R0 8-bit address
   91 00000000         ; Output: none
   92 00000000         MDB_SendAddress
   93 00000000 B503            PUSH             {R0, R1, LR} ; save current val
                                                            ue of R0, R1 and LR
                                                            
   94 00000002 F7FF FFFE       BL               UART_HighStickParity ; set high
                                                             stick parity
   95 00000006 F7FF FFFE       BL               UART_OutChar ; note: modifies R
                                                            0 and R1
   96 0000000A F7FF FFFE       BL               UART_LowStickParity ; set to lo
                                                            w stick parity
   97 0000000E BD03            POP              {R0, R1, PC} ; restore previous
                                                             value of R0 into R
                                                            0, R1 into R1, and 
                                                            LR into PC (return)
                                                            
   98 00000010         
   99 00000010         ;-----------MDB_SendCommand-----------
  100 00000010         ; Envia comando/datos a un periferico
  101 00000010         ; Input : R0 address (for chkSum), R1 pointer to command
                       s, R2 number of command/data bytes to be send
  102 00000010         ; Output: none
  103 00000010         ; Modifies: none, all used Register are pushed and poped
                       
  104 00000010         MDB_SendCommand
  105 00000010 B53F            PUSH             {R0, R1, R2, R3, R4, R5, LR} ; 
                                                            save current value 
                                                            of R0, R1, R2, R3, 
                                                            R4, R5 and LR
  106 00000012 4605            MOV              R5, R0      ; R5 = R0 save init
                                                            ial value of ChkSum
                                                            
  107 00000014 460C            MOV              R4, R1      ; R4 = R1 (save the
                                                             command pointer)
  108 00000016 4613            MOV              R3, R2      ; R3 = R2 (save num
                                                            ber of command/data
                                                             bytes)
  109 00000018 F04F 0200       MOV              R2, #0      ; initialize counte
                                                            r, contador de dato
                                                            s enviados
  110 0000001C         outCommandLoop
  111 0000001C 429A            CMP              R2, R3      ; is counter = numb
                                                            er of commands to s
                                                            end ?
  112 0000001E D008            BEQ              outCommandDone ; if so, its don
                                                            e, skip to 'outComm
                                                            andDone'
  113 00000020 6820            LDR              R0, [R4]    ; R0 = [R4] carga e



ARM Macro Assembler    Page 5 


                                                            l byte a ser enviad
                                                            o
  114 00000022 4405            ADD              R5, R5, R0  ; actualiza chksum 
                                                            byte
  115 00000024 F7FF FFFE       BL               UART_OutChar ; envia el byte en
                                                             R0, note: modifies
                                                             R0 and R1
  116 00000028 F104 0401       ADD              R4, R4, #1  ; R4 = R4 + 1 incre
                                                            menta el command po
                                                            inter
  117 0000002C F102 0201       ADD              R2, R2, #1  ; R2 = R2 + 1 incre
                                                            menta el contador
  118 00000030 E7F4            B                outCommandLoop
  119 00000032         outCommandDone
  120 00000032 4628            MOV              R0, R5      ; R0 = R5 Copy chks
                                                            um to R0
  121 00000034 F7FF FFFE       BL               UART_OutChar ; send chksum byte
                                                            
  122 00000038         ; restore previous value of R0 into R0, R1 into R1, R2 i
                       nto R2
  123 00000038 BD3F            POP              {R0, R1, R2, R3, R4, R5, PC} ; 
                                                            R3 into R3, R4 into
                                                             R4, R5, into R5 an
                                                            d LR into PC (retur
                                                            n)
  124 0000003A         
  125 0000003A         
  126 0000003A         ;-----------MDB_SendACK-----------
  127 0000003A         ; Envia el ACK byte
  128 0000003A         ; Input : none
  129 0000003A         ; Output: none
  130 0000003A         ; Modifies: none, all used Register are pushed and poped
                       
  131 0000003A         MDB_SendACK
  132 0000003A B503            PUSH             {R0, R1, LR} ; save current val
                                                            ue of R0, R1 and LR
                                                            
  133 0000003C F04F 0000       MOV              R0, #0      ; R0 = 0x00H (ACK)
  134 00000040 F7FF FFFE       BL               UART_OutChar ; envia ACK, note:
                                                             modifies R0 and R1
                                                            
  135 00000044 BD03            POP              {R0, R1, PC} ; restore previous
                                                             value of R0 into R
                                                            0, R1 into R1, and 
                                                            LR into PC (return)
                                                            
  136 00000046         
  137 00000046         ;-----------MDB_SendRET-----------
  138 00000046         ; Envia el RET byte
  139 00000046         ; Input : none
  140 00000046         ; Output: none
  141 00000046         ; Modifies: none, all used Register are pushed and poped
                       
  142 00000046         MDB_SendRET
  143 00000046 B503            PUSH             {R0, R1, LR} ; save current val
                                                            ue of R0, R1 and LR
                                                            
  144 00000048 F04F 00AA       MOV              R0, #170    ; R0 = 0xAAH (RET)
  145 0000004C F7FF FFFE       BL               UART_OutChar ; envia RET, note:



ARM Macro Assembler    Page 6 


                                                             modifies R0 and R1
                                                            
  146 00000050 BD03            POP              {R0, R1, PC} ; restore previous
                                                             value of R0 into R
                                                            0, R1 into R1, and 
                                                            LR into PC (return)
                                                            
  147 00000052         
  148 00000052         ;-----------MDB_SendNAK-----------
  149 00000052         ; Envia el NAK byte
  150 00000052         ; Input : none
  151 00000052         ; Output: none
  152 00000052         ; Modifies: none, all used Register are pushed and poped
                       
  153 00000052         MDB_SendNAK
  154 00000052 B503            PUSH             {R0, R1, LR} ; save current val
                                                            ue of R0, R1 and LR
                                                            
  155 00000054 F04F 00FF       MOV              R0, #255    ; R0 = 0xFFH (NAK)
  156 00000058 F7FF FFFE       BL               UART_OutChar ; envia NAK, note:
                                                             modifies R0 and R1
                                                            
  157 0000005C BD03            POP              {R0, R1, PC} ; restore previous
                                                             value of R0 into R
                                                            0, R1 into R1, and 
                                                            LR into PC (return)
                                                            
  158 0000005E         
  159 0000005E         ;-----------MDB_GetAnswer-----------
  160 0000005E         ; Recibe datos/respuesta del periferico
  161 0000005E         ; se debe tener activado LOW Stick Parity, o se cicla la
                        funcion
  162 0000005E         ; Input : R0 pointer to DataIn buffer
  163 0000005E         ; Output: R0 number of data bytes getted, included chk(i
                       f apply), 0 if chksum failed
  164 0000005E         ; Modifies: R0, all used Register are pushed and poped
  165 0000005E         ; DataIn buffer upgraded.
  166 0000005E         MDB_GetAnswer
  167 0000005E B53E            PUSH             {R1, R2, R3, R4, R5, LR} ; save
                                                             current value of R
                                                            0, R1, R2, R3, R4, 
                                                            R5 and LR
  168 00000060 4603            MOV              R3, R0      ; R3 = R0 (save the
                                                             DataIn pointer buf
                                                            fer) 
  169 00000062 F04F 0200       MOV              R2, #0      ; initialize counte
                                                            r, contador de dato
                                                            s recibidos
  170 00000066 F04F 0400       MOV              R4, #0      ; initialize chksum
                                                            
  171 0000006A F04F 0500       MOV              R5, #0      ; personal flag for
                                                             Stick Parity Inter
                                                            rup
  172 0000006E         getAnswerLoop                        ; stay in loop util
                                                             interruption by st
                                                            ick parity detected
                                                             
  173 0000006E F7FF FFFE       BL               UART_InChar ; get byte from UAR
                                                            T



ARM Macro Assembler    Page 7 


  174 00000072 7018            STRB             R0, [R3]    ; [R3] = R0 (store 
                                                            8 least significant
                                                             bits of R0 into lo
                                                            cation pointed to b
                                                            y R4)
  175 00000074 F103 0301       ADD              R3, R3, #1  ; R4 = R4 + 1 (buff
                                                            erPt = bufferPt + 1
                                                            )
  176 00000078 2D01            CMP              R5, #1      ; R5 = 1 ? (R5 modi
                                                            fied by Stick Parit
                                                            y Interrupt Handler
                                                            )
  177 0000007A D001            BEQ              getAnswerEnd ; if so, answer of
                                                             peripheral MDB is 
                                                            finished
  178 0000007C 4404            ADD              R4, R4, R0  ; actualize chksum 
                                                            
  179 0000007E E7F6            B                getAnswerLoop ; unconditional b
                                                            ranch to 'inDataLoo
                                                            p'
  180 00000080         getAnswerEnd
  181 00000080 4601            MOV              R1, R0      ; R1 = R0 (chk byte
                                                            )
  182 00000082 4610            MOV              R0, R2      ; R0 = R2 number of
                                                             bytes received
  183 00000084 2801            CMP              R0, #1      ; R0 = 1 ? (if no n
                                                            eeded check sum)
  184 00000086 D002            BEQ              getAnswerDone ; if so, answer d
                                                            one
  185 00000088 428C            CMP              R4, R1      ; R4 = R0 (chksum =
                                                             chk)?
  186 0000008A BF18 2000       MOVNE            R0, #0      ; R0 = 0 (chksum fa
                                                            iled)
  187 0000008E         getAnswerDone
  188 0000008E         ; restore previous value of R0 into R0, R1 into R1, R2 i
                       nto R2
  189 0000008E BD3E            POP              {R1, R2, R3, R4, R5, PC} ; R3 i
                                                            nto R3, R4 into R4,
                                                             R5, into R5 and LR
                                                             into PC (return)
  190 00000090         
  191 00000090         ;---------MDB_SendBusReset---------
  192 00000090         ; Manda un bus reset a los perifericos
  193 00000090         ; Input : none
  194 00000090         ; Output: none
  195 00000090         ; Modifies: none, all used Register are pushed and poped
                       
  196 00000090         MDB_SendBusReset
  197 00000090 B503            PUSH             {R0, R1, LR} ; save current val
                                                            ues of R0, R1, LR
  198 00000092 F7FF FFFE       BL               UART_SendBreak ; send break
  199 00000096 F7FF FFFE       BL               Timer_BreakTime ; start Timer_B
                                                            reakTime (100ms)
  200 0000009A         sendBusResetLoop
  201 0000009A E7FE            B                sendBusResetLoop
  202 0000009C         sendBusResetDone
  203 0000009C F7FF FFFE       BL               UART_SendBreak_Disable 
                                                            ; stop break
  204 000000A0 BD03            POP              {R0, R1, PC} ; restore previous



ARM Macro Assembler    Page 8 


                                                             value of R0 into R
                                                            0, R1 into R1, and 
                                                            LR into PC (return)
                                                            
  205 000000A2         
  206 000000A2         ;---------MDB_SendPool---------
  207 000000A2         ; Manda un el comando POOL
  208 000000A2         ; Input : R0, peripheral addres to send the pool command
                       
  209 000000A2         ; Output: none
  210 000000A2         ; Modifies: none, all used Register are pushed and poped
                       
  211 000000A2         MDB_SendPool
  212 000000A2 B507            PUSH             {R0, R1, R2, LR} ; save current
                                                             values of R0, R1, 
                                                            R2, LR
  213 000000A4 4991            LDR              R1,=Command ; R1 = &Command (po
                                                            inter)
  214 000000A6 F04F 020B       MOV              R2,#COMMAND_POLL 
                                                            ; R2 = COMMAND_POLL
                                                            
  215 000000AA 700A            STRB             R2,[R1]     ; [R1] = R2 (COMMAN
                                                            D_POLL)
  216 000000AC F04F 0201       MOV              R2,#1       ; R2 = 1 (number of
                                                             command bytes to s
                                                            end)
  217 000000B0 F7FF FFFE       BL               MDB_SendAddress ; send the peri
                                                            pheral address
  218 000000B4 F7FF FFFE       BL               MDB_SendCommand ; send pool com
                                                            mand with chk byte
  219 000000B8 BD07            POP              {R0, R1, R2, PC} ; restore prev
                                                            ious value of R0 in
                                                            to R0, R1 into R1, 
                                                            and LR into PC (ret
                                                            urn)
  220 000000BA         
  221 000000BA         ;---------MDB_SendSetup---------
  222 000000BA         ; Manda un el comando SETUP
  223 000000BA         ; Input : R0, peripheral addres to send the Setup comman
                       d
  224 000000BA         ; Output: none
  225 000000BA         ; Modifies: none, all used Register are pushed and poped
                       
  226 000000BA         MDB_SendSetup
  227 000000BA B507            PUSH             {R0, R1, R2, LR} ; save current
                                                             values of R0, R1, 
                                                            R2, LR
  228 000000BC 498B            LDR              R1,=Command ; R1 = &Command (po
                                                            inter)
  229 000000BE F04F 0209       MOV              R2,#COMMAND_SETUP ; R2 = COMMAN
                                                            D_SETUP
  230 000000C2 700A            STRB             R2,[R1]     ; [R1] = R2 (COMMAN
                                                            D_SETUP)
  231 000000C4 F04F 0201       MOV              R2,#1       ; R2 = 1 (number of
                                                             command bytes to s
                                                            end)
  232 000000C8 F7FF FFFE       BL               MDB_SendAddress ; send the peri
                                                            pheral address
  233 000000CC F7FF FFFE       BL               MDB_SendCommand ; send pool com



ARM Macro Assembler    Page 9 


                                                            mand with chk byte
  234 000000D0 BD07            POP              {R0, R1, R2, PC} ; restore prev
                                                            ious value of R0 in
                                                            to R0, R1 into R1, 
                                                            and LR into PC (ret
                                                            urn)
  235 000000D2         
  236 000000D2         ;---------MDB_SendExpIdentification---------
  237 000000D2         ; Manda un el comando-exp  Identification
  238 000000D2         ; Input : R0, peripheral addres to send the Identificati
                       on command
  239 000000D2         ; Output: none
  240 000000D2         ; Modifies: none, all used Register are pushed and poped
                       
  241 000000D2         MDB_SendExpIdentification
  242 000000D2 B507            PUSH             {R0, R1, R2, LR} ; save current
                                                             values of R0, R1, 
                                                            R2, LR
  243 000000D4 4985            LDR              R1,=Command ; R1 = &Command (po
                                                            inter)
  244 000000D6 F04F 020F       MOV              R2,#COMMAND_EXP_IDENTIFICATION 
                                                            ; R2 = COMMAND_EXP_
                                                            IDENTIFICATION
  245 000000DA 800A            STRH             R2,[R1]     ; [R1] = R2 (COMMAN
                                                            D_EXP_IDENTIFICATIO
                                                            N)
  246 000000DC F04F 0202       MOV              R2,#2       ; R2 = 2 (number of
                                                             command bytes to s
                                                            end)
  247 000000E0 F7FF FFFE       BL               MDB_SendAddress ; send the peri
                                                            pheral address
  248 000000E4 F7FF FFFE       BL               MDB_SendCommand ; send pool com
                                                            mand with chk byte
  249 000000E8 BD07            POP              {R0, R1, R2, PC} ; restore prev
                                                            ious value of R0 in
                                                            to R0, R1 into R1, 
                                                            and LR into PC (ret
                                                            urn)
  250 000000EA         
  251 000000EA         ;---------MDB_SendExpSendDiagStatus---------
  252 000000EA         ; Manda el comando-exp Send Diagnostic status
  253 000000EA         ; Input : R0, peripheral addres to send the SendDiagStat
                       us comand
  254 000000EA         ; Output: none
  255 000000EA         ; Modifies: none, all used Register are pushed and poped
                       
  256 000000EA         MDB_SendExpSendDiagStatus
  257 000000EA B507            PUSH             {R0, R1, R2, LR} ; save current
                                                             values of R0, R1, 
                                                            R2, LR
  258 000000EC 497F            LDR              R1,=Command ; R1 = &Command (po
                                                            inter)
  259 000000EE F240 520F       MOV              R2,#COMMAND_EXP_SEND_DIAGNOSTIC
_STATUS 
                                                            ; R2 = COMMAND_EXP_
                                                            SEND_DIAGNOSTIC_STA
                                                            TUS
  260 000000F2 800A            STRH             R2,[R1]     ; [R1] = R2 (COMMAN
                                                            D_EXP_SEND_DIAGNOST



ARM Macro Assembler    Page 10 


                                                            IC_STATUS)
  261 000000F4 F04F 0202       MOV              R2,#2       ; R2 = 1 (number of
                                                             command bytes to s
                                                            end)
  262 000000F8 F7FF FFFE       BL               MDB_SendAddress ; send the peri
                                                            pheral address
  263 000000FC F7FF FFFE       BL               MDB_SendCommand ; send pool com
                                                            mand with chk byte
  264 00000100 BD07            POP              {R0, R1, R2, PC} ; restore prev
                                                            ious value of R0 in
                                                            to R0, R1 into R1, 
                                                            and LR into PC (ret
                                                            urn)
  265 00000102         
  266 00000102         ;---------MDB_SendTubeStatus---------
  267 00000102         ; Manda el comando Tube Status
  268 00000102         ; Input : R0, peripheral addres to send the Tube Status 
                       comand
  269 00000102         ; Output: none
  270 00000102         ; Modifies: none, all used Register are pushed and poped
                       
  271 00000102         MDB_SendTubeStatus
  272 00000102 B507            PUSH             {R0, R1, R2, LR} ; save current
                                                             values of R0, R1, 
                                                            R2, LR
  273 00000104 4979            LDR              R1,=Command ; R1 = &Command (po
                                                            inter)
  274 00000106 F04F 020A       MOV              R2,#COMMAND_TUBE_STATUS ; R2 = 
                                                            COMMAND_TUBE_STATUS
                                                            
  275 0000010A 700A            STRB             R2,[R1]     ; [R1] = R2 (COMMAN
                                                            D_TUBE_STATUS)
  276 0000010C F04F 0201       MOV              R2,#1       ; R2 = 1 (number of
                                                             command bytes to s
                                                            end)
  277 00000110 F7FF FFFE       BL               MDB_SendAddress ; send the peri
                                                            pheral address
  278 00000114 F7FF FFFE       BL               MDB_SendCommand ; send pool com
                                                            mand with chk byte
  279 00000118 BD07            POP              {R0, R1, R2, PC} ; restore prev
                                                            ious value of R0 in
                                                            to R0, R1 into R1, 
                                                            and LR into PC (ret
                                                            urn)
  280 0000011A         
  281 0000011A         ;---------MDB_DispenseValue---------
  282 0000011A         ; Send expansion command to request a dispense value
  283 0000011A         ; and init sequence to verify dispense is done
  284 0000011A         ; Input : R0, value to dispense
  285 0000011A         ; Output: none
  286 0000011A         ; Modifies: none, all used Register are pushed and poped
                       
  287 0000011A         MDB_DispenseValue
  288 0000011A B507            PUSH             {R0, R1, R2, LR} ; save current
                                                             values of R0, R1, 
                                                            R2, LR
  289 0000011C         init_dispense_value
  290 0000011C 4973            LDR              R1,=Command ; R1 = &Command (po
                                                            inter)



ARM Macro Assembler    Page 11 


  291 0000011E F240 220F       MOV              R2,#COMMAND_EXP_PAYOUT ; R2 = C
                                                            OMMAND_EXP_PAYOUT
  292 00000122 800A            STRH             R2,[R1]     ; [R1] = R2 (COMMAN
                                                            D_EXP_PAYOUT)
  293 00000124 7088            STRB             R0,[R1,#2]  ; [R1+1] = R0 (Valu
                                                            e of coins to dispe
                                                            nse)
  294 00000126 F04F 0203       MOV              R2,#3       ; R2 = 1 (number of
                                                             command bytes to s
                                                            end)
  295 0000012A F04F 0008       MOV              R0,#COIN_CHANGER_ADDR ; R0 = CO
                                                            IN_CHANGER_ADDR
  296 0000012E F7FF FFFE       BL               MDB_SendAddress ; send the peri
                                                            pheral address
  297 00000132 F7FF FFFE       BL               MDB_SendCommand ; send command 
                                                            with chk byte
  298 00000136         DispenseValue_get_answer
  299 00000136 486E            LDR              R0,=DataIn  ; R0 = &DataIn (poi
                                                            nter)
  300 00000138 F7FF FFFE       BL               MDB_GetAnswer ; getting answer
  301 0000013C 486C            LDR              R0,=DataIn  ; R0 = &DataIn (poi
                                                            nter)
  302 0000013E 6801            LDR              R1, [R0]    ; R1 = [R0]
  303 00000140 2900            CMP              R1,#0       ; R1 == 0 ? (ACK)?
  304 00000142 D1EB            BNE              init_dispense_value ; if so, go
                                                             to init_dispense_v
                                                            alue
  305 00000144         ; acknowledge, confirm sended command
  306 00000144         payout_value_pool_loop
  307 00000144 F04F 007D       MOV              R0,#125     ; R0 = 125
  308 00000148 F7FF FFFE       BL               delay       ; delay 125ms
  309 0000014C 4967            LDR              R1,=Command ; R1 = &Command (po
                                                            inter)
  310 0000014E F240 420F       MOV              R2,#COMMAND_EXP_PAYOUT_VALUE_PO
LL 
                                                            ; R2 = COMMAND_EXP_
                                                            PAYOUT_VALUE_POLL
  311 00000152 800A            STRH             R2,[R1]     ; [R1] = R2 (COMMAN
                                                            D_EXP_PAYOUT_VALUE_
                                                            POLL)
  312 00000154 F04F 0202       MOV              R2,#2       ; R2 = 2 (number of
                                                             command bytes to s
                                                            end)
  313 00000158 F04F 0008       MOV              R0,#COIN_CHANGER_ADDR ; R0 = CO
                                                            IN_CHANGER_ADDR
  314 0000015C F7FF FFFE       BL               MDB_SendAddress ; send the peri
                                                            pheral address
  315 00000160 F7FF FFFE       BL               MDB_SendCommand ; send command 
                                                            with chk byte
  316 00000164         payout_value_poll_get_answer
  317 00000164 4862            LDR              R0,=DataIn  ; R0 = &DataIn (poi
                                                            nter)
  318 00000166 F7FF FFFE       BL               MDB_GetAnswer ; getting answer
  319 0000016A 2800            CMP              R0,#0       ; R0 == 0 ? (chksum
                                                             fail)?
  320 0000016C BF08 F7FF 
              FFFE             BLEQ             MDB_SendRET ; if so, sen RET
  321 00000172 2800            CMP              R0,#0       ; R0 == 0 ? (chksum
                                                             fail)?



ARM Macro Assembler    Page 12 


  322 00000174 D0F6            BEQ              payout_value_poll_get_answer ; 
                                                            if so, go to payout
                                                            _value_poll_get_ans
                                                            wer
  323 00000176 2802            CMP              R0,#2       ; R0 == 2 ? (value 
                                                            to report)?
  324 00000178 BF08 F7FF 
              FFFE             BLEQ             MDB_SendACK ; if so, send ACK
  325 0000017E 2802            CMP              R0,#2       ; R0 == 2 ? (value 
                                                            to report)?
  326 00000180 D0E0            BEQ              payout_value_pool_loop ; if so,
                                                             go to payout_value
                                                            _pool_loop
  327 00000182         ; acknowledge, reserved byte answer
  328 00000182 485B            LDR              R0,=DataIn  ; R0 = &DataIn (poi
                                                            nter)
  329 00000184 6801            LDR              R1, [R0]    ; R1 = [R0]
  330 00000186 2900            CMP              R1,#0       ; R1 = 0x00 (ACK)
  331 00000188 D1DC            BNE              payout_value_pool_loop ; if not
                                                            , go to payout_valu
                                                            e_pool_loop
  332 0000018A         ; acknowledge, payout is complete
  333 0000018A         payout_status_send_payout_status
  334 0000018A 4958            LDR              R1,=Command ; R1 = &Command (po
                                                            inter)
  335 0000018C F240 320F       MOV              R2,#COMMAND_EXP_PAYOUT_STATUS ;
                                                             R2 = COMMAND_EXP_P
                                                            AYOUT_STATUS
  336 00000190 800A            STRH             R2,[R1]     ; [R1] = R2 (COMMAN
                                                            D_EXP_PAYOUT_VALUE_
                                                            POLL)
  337 00000192 F04F 0202       MOV              R2,#2       ; R2 = 2 (number of
                                                             command bytes to s
                                                            end)
  338 00000196 F04F 0008       MOV              R0,#COIN_CHANGER_ADDR ; R0 = CO
                                                            IN_CHANGER_ADDR
  339 0000019A F7FF FFFE       BL               MDB_SendAddress ; send the peri
                                                            pheral address
  340 0000019E F7FF FFFE       BL               MDB_SendCommand ; send command 
                                                            with chk byte
  341 000001A2         payout_status_get_answer
  342 000001A2 4853            LDR              R0,=DataIn  ; R0 = &DataIn (poi
                                                            nter)
  343 000001A4 F7FF FFFE       BL               MDB_GetAnswer ; getting answer
  344 000001A8 2800            CMP              R0,#0       ; R0 == 0 ? (chksum
                                                             fail)?
  345 000001AA BF08 F7FF 
              FFFE             BLEQ             MDB_SendRET ; if so, sen RET
  346 000001B0 2800            CMP              R0,#0       ; R0 == 0 ? (chksum
                                                             fail)?
  347 000001B2 D0F6            BEQ              payout_status_get_answer ; if s
                                                            o, go to payout_sta
                                                            tus_get_answer
  348 000001B4 2801            CMP              R0,#1       ; R0 == 1 ? (reserv
                                                            ed byte as answer)?
                                                            
  349 000001B6 D0E8            BEQ              payout_status_send_payout_statu
s 
                                                            ; if so, go to payo



ARM Macro Assembler    Page 13 


                                                            ut_status_send_payo
                                                            ut_status
  350 000001B8         ; acknowledge received information
  351 000001B8 F7FF FFFE       BL               MDB_SendACK ; sending ACK
  352 000001BC         payout_status_send_tube_status
  353 000001BC 494B            LDR              R1,=Command ; R1 = &Command (po
                                                            inter)
  354 000001BE F04F 020A       MOV              R2,#COMMAND_TUBE_STATUS ; R2 = 
                                                            COMMAND_TUBE_STATUS
                                                            
  355 000001C2 700A            STRB             R2,[R1]     ; [R1] = R2 (COMMAN
                                                            D_TUBE_STATUS)
  356 000001C4 F04F 0201       MOV              R2,#1       ; R2 = 2 (number of
                                                             command bytes to s
                                                            end)
  357 000001C8 F04F 0008       MOV              R0,#COIN_CHANGER_ADDR ; R0 = CO
                                                            IN_CHANGER_ADDR
  358 000001CC F7FF FFFE       BL               MDB_SendAddress ; send the peri
                                                            pheral address
  359 000001D0 F7FF FFFE       BL               MDB_SendCommand ; send command 
                                                            with chk byte
  360 000001D4         tube_status_get_answer
  361 000001D4 4847            LDR              R0,=Tube_status_buf ; R0 = &Tub
                                                            e_status_buf (point
                                                            er)
  362 000001D6 F7FF FFFE       BL               MDB_GetAnswer ; getting answer
  363 000001DA 2800            CMP              R0,#0       ; R0 == 0 ? (chksum
                                                             fail)?
  364 000001DC BF08 F7FF 
              FFFE             BLEQ             MDB_SendRET ; if so, sen RET
  365 000001E2 2800            CMP              R0,#0       ; R0 == 0 ? (chksum
                                                             fail)?
  366 000001E4 D0F6            BEQ              tube_status_get_answer ; if so,
                                                             go to tube_status_
                                                            get_answer
  367 000001E6         ; acknowledge, received data
  368 000001E6 F7FF FFFE       BL               MDB_SendACK ; sending ACK
  369 000001EA         ; acknowledge, rutine of payout finished
  370 000001EA BD07            POP              {R0, R1, R2, PC} ; restore prev
                                                            ious value of R0 in
                                                            to R0, R1 into R1, 
                                                            and LR into PC (ret
                                                            urn)
  371 000001EC         
  372 000001EC         ;---------MDB_InitCoinChanger---------
  373 000001EC         ; Secuencia de inicializacion requerida para el Coin Cha
                       nger
  374 000001EC         ; Input : none
  375 000001EC         ; Output: none
  376 000001EC         ; Modifies: none, all used Register are pushed and poped
                       
  377 000001EC         MDB_InitCoinChanger
  378 000001EC B507            PUSH             {R0, R1, R2, LR} ; save current
                                                             values of R0, R1, 
                                                            R2, LR
  379 000001EE         ;reset all
  380 000001EE         InitSendBusReset
  381 000001EE F7FF FFFE       BL               MDB_SendBusReset
  382 000001F2         ;wait after first pool



ARM Macro Assembler    Page 14 


  383 000001F2 4841            LDR              R0,=InitTimerSetupDone ; Addres
                                                             to jump after Time
                                                            r_SetupTime
  384 000001F4 F7FF FFFE       BL               Timer_SetupTime ; Timer 200ms, 
                                                            in: R0
  385 000001F8         InitResetLoop
  386 000001F8 E7FE            B                InitResetLoop ; loop for wait T
                                                            imer_SetupTime inte
                                                            rrupt
  387 000001FA         InitTimerSetupDone
  388 000001FA         ;send first pool to obtain "just reset" response
  389 000001FA         InitSendPool
  390 000001FA F04F 0008       MOV              R0, #COIN_CHANGER_ADDR ; R0 = C
                                                            OIN_CHANGER_ADDR
  391 000001FE F7FF FFFE       BL               MDB_SendPool ; Send command poo
                                                            l to R0 (coin chang
                                                            er)
  392 00000202         InitGetPool
  393 00000202 483E            LDR              R0, =Pool_buf ; R0 = &Pool_buf 
                                                            (pointer)
  394 00000204 F7FF FFFE       BL               MDB_GetAnswer ; Get answer from
                                                             peripheral
  395 00000208 2802            CMP              R0,#2       ; R0 == 2? (receive
                                                            d 2 bytes - JustRes
                                                            et & Chk)
  396 0000020A D1F0            BNE              InitSendBusReset ; if not, go t
                                                            o InitNoResponsePoo
                                                            lLoop
  397 0000020C F04F 0100       MOV              R1,#0       ; clean register
  398 00000210 4837            LDR              R0, =DataIn ; R0 = &DataIn (poi
                                                            nter)
  399 00000212 7801            LDRB             R1, [R0]    ; R1 = [R0]
  400 00000214 290B            CMP              R1,#2_00001011 ; R1 == 00001011
                                                            B (Changer was Rese
                                                            t)
  401 00000216 D1EA            BNE              InitSendBusReset ; if not, go t
                                                            o InitSendBusReset
  402 00000218 F7FF FFFE       BL               MDB_SendACK ; Sending ACK
  403 0000021C         ;send first setup, to obtain changer level and configura
                       tion information
  404 0000021C         InitSendSetup
  405 0000021C F04F 0008       MOV              R0, #COIN_CHANGER_ADDR ; R0 = C
                                                            OIN_CHANGER_ADDR
  406 00000220 F7FF FFFE       BL               MDB_SendSetup ; Send command se
                                                            tup to R0
  407 00000224         InitGetSetup
  408 00000224 4836            LDR              R0, =Setup_buf ; R0 = &Setup_bu
                                                            f (pointer)
  409 00000226 F7FF FFFE       BL               MDB_GetAnswer ; Get answer from
                                                             peripheral
  410 0000022A 2800            CMP              R0, #0      ; R0 == 0? (Chksum 
                                                            Failed)
  411 0000022C D102            BNE              InitSetupDone ; if not, go to I
                                                            nitSetupDone
  412 0000022E F7FF FFFE       BL               MDB_SendRET ; Sending RET
  413 00000232 E7F7            B                InitGetSetup ; go to InitGetSet
                                                            up, for getting ans
                                                            wer again
  414 00000234         InitSetupDone



ARM Macro Assembler    Page 15 


  415 00000234 F7FF FFFE       BL               MDB_SendACK ; Sending ACK
  416 00000238         ;send expansion indentification, to obtain additional ch
                       anger information and options
  417 00000238         InitSendExpIdentification
  418 00000238 F04F 0008       MOV              R0, #COIN_CHANGER_ADDR ; R0 = C
                                                            OIN_CHANGER_ADDR
  419 0000023C F7FF FFFE       BL               MDB_SendExpIdentification ; Sen
                                                            d expansion command
                                                             Identification to 
                                                            R0
  420 00000240         InitGetExpIdentification
  421 00000240 4830            LDR              R0, =Identification_buf ; R0 = 
                                                            &Identification_buf
                                                             (pointer)
  422 00000242 F7FF FFFE       BL               MDB_GetAnswer ; Get answer from
                                                             peripheral
  423 00000246 2800            CMP              R0, #0      ; R0 == 0? (Chksum 
                                                            Failed)
  424 00000248 D102            BNE              InitExpIdentificationDone ; if 
                                                            not, go to InitExpI
                                                            dentificationDone
  425 0000024A F7FF FFFE       BL               MDB_SendRET ; Sending RET
  426 0000024E E7F7            B                InitGetExpIdentification ; go t
                                                            o InitGetIdentifica
                                                            tion, for getting a
                                                            nswer again
  427 00000250         InitExpIdentificationDone
  428 00000250 F7FF FFFE       BL               MDB_SendACK ; Sending ACK
  429 00000254         ;send Feature Enable, To enable desired options
  430 00000254         InitSendExpFeatureEnable
  431 00000254 4925            LDR              R1, =Command ; R1 = &Command (p
                                                            ointer)
  432 00000256 F240 100F       MOV              R0, #COMMAND_EXP_FEATURE_ENEABL
E 
                                                            ; R0 = COMMAND_EXP_
                                                            FEATURE_ENEABLE
  433 0000025A 7008            STRB             R0, [R1]    ; [R1] = R0 (upgrad
                                                            e command buffer)
  434 0000025C 4A29            LDR              R2, =Identification_buf ; R2 = 
                                                            &Identification_buf
                                                             (pointer)
  435 0000025E F8D2 001D       LDR              R0, [R2,#29] ; R0 = [R2+29] (fe
                                                            atures availables)
  436 00000262 F8C1 0001       STR              R0, [R1,#1] ; [R1+1] = R0 (acti
                                                            vate all features)
  437 00000266 F04F 0008       MOV              R0, #COIN_CHANGER_ADDR ; R0 = C
                                                            OIN_CHANGER_ADDR
  438 0000026A F04F 0205       MOV              R2, #5      ; R2 = 5 (number of
                                                             command/data bytes
                                                             to send)
  439 0000026E F7FF FFFE       BL               MDB_SendCommand ; envia a R0, R
                                                            2 comandos en &R1
  440 00000272         InitGetExpFeatureEnable
  441 00000272 481F            LDR              R0, =DataIn ; R0 = &DataIn (poi
                                                            nter)
  442 00000274 F7FF FFFE       BL               MDB_GetAnswer ; Get answer from
                                                             peripheral
  443 00000278 481D            LDR              R0, =DataIn ; R0 = &DataIn (poi
                                                            nter)



ARM Macro Assembler    Page 16 


  444 0000027A 6801            LDR              R1, [R0]    ; R1 = [R0] (answer
                                                            )
  445 0000027C 2900            CMP              R1, #0      ; R1 == 00H ? (R1 =
                                                            = ACK?)
  446 0000027E D1E9            BNE              InitSendExpFeatureEnable ; if n
                                                            ot, go to InitSendE
                                                            xpFeatureEnable
  447 00000280         ;send expansion SEND DIAGNOSTIC STATUS, to request the c
                       hanger to report its current state of operation
  448 00000280         InitSendExpSendDiagStatus
  449 00000280 F04F 0008       MOV              R0, #COIN_CHANGER_ADDR ; R0 = C
                                                            OIN_CHANGER_ADDR
  450 00000284 F7FF FF31       BL               MDB_SendExpSendDiagStatus ; Sen
                                                            d expansion command
                                                             send diagnostic st
                                                            atus to R0
  451 00000288         InitGetExpSendDiagStatus
  452 00000288 481F            LDR              R0, =Send_diag_status_buf ; R0 
                                                            = &Send_diag_status
                                                            _buf (pointer)
  453 0000028A F7FF FFFE       BL               MDB_GetAnswer ; Get answer from
                                                             peripheral
  454 0000028E 2800            CMP              R0, #0      ; R0 == 0? (Chksum 
                                                            Failed)
  455 00000290 D102            BNE              InitExpSendDiagStatusDone ; if 
                                                            not, go to InitExpS
                                                            endDiagStatusDone
  456 00000292 F7FF FFFE       BL               MDB_SendRET ; Sending RET
  457 00000296 E7F7            B                InitGetExpSendDiagStatus ; go t
                                                            o InitGetExpSendDia
                                                            gStatus, for gettin
                                                            g answer again
  458 00000298         InitExpSendDiagStatusDone
  459 00000298 F7FF FFFE       BL               MDB_SendACK ; Sending ACK
  460 0000029C         ;wait before first TUBE STATUS
  461 0000029C F04F 00FA       MOV              R0, #250
  462 000002A0 F7FF FFFE       BL               delay
  463 000002A4         ;send TUBE STATUS, to obtain tube status / change inform
                       ation
  464 000002A4         InitSendTubeStatus
  465 000002A4 F04F 0008       MOV              R0, #COIN_CHANGER_ADDR ; R0 = C
                                                            OIN_CHANGER_ADDR
  466 000002A8 F7FF FF2B       BL               MDB_SendTubeStatus ; Send comma
                                                            nd Send Tube Status
                                                             to R0
  467 000002AC         InitGetTubeStatus
  468 000002AC 4811            LDR              R0, =Tube_status_buf ; R0 = &Tu
                                                            be_status_buf (poin
                                                            ter)
  469 000002AE F7FF FFFE       BL               MDB_GetAnswer ; Get answer from
                                                             peripheral
  470 000002B2 2800            CMP              R0, #0      ; R0 == 0? (Chksum 
                                                            Failed)
  471 000002B4 D102            BNE              InitTubeStatusDone ; if not, go
                                                             to InitTubeStatusD
                                                            one
  472 000002B6 F7FF FFFE       BL               MDB_SendRET ; Sending RET
  473 000002BA E7F7            B                InitGetTubeStatus ; go to InitG
                                                            etTubeStatus, for g



ARM Macro Assembler    Page 17 


                                                            etting answer again
                                                            
  474 000002BC         InitTubeStatusDone
  475 000002BC F7FF FFFE       BL               MDB_SendACK ; Sending ACK
  476 000002C0         ;send Coin type, to enable desired coin acceptance and d
                       isable manual coin payout if desired
  477 000002C0         InitSendCoinType
  478 000002C0 490A            LDR              R1, =Command ; R1 = &Command (p
                                                            ointer)
  479 000002C2 F04F 000C       MOV              R0, #COMMAND_COIN_TYPE ; R0 = C
                                                            OMMAND_COIN_TYPE
  480 000002C6 7008            STRB             R0, [R1]    ; [R1] = R0 (upgrad
                                                            e command buffer)
  481 000002C8 F04F 30FF       LDR              R0,=0xFFFFFFFF ; enable ALL ace
                                                            pted coins, and all
                                                             coins to manual di
                                                            spense
  482 000002CC F8C1 0001       STR              R0, [R1,#1] ; [R1+1] = R0 (upgr
                                                            ade command buffer)
                                                            
  483 000002D0 F04F 0008       MOV              R0, #COIN_CHANGER_ADDR ; R0 = C
                                                            OIN_CHANGER_ADDR
  484 000002D4 F04F 0205       MOV              R2, #5      ; R2 = 5 (number of
                                                             command/data bytes
                                                             to send)
  485 000002D8 F7FF FFFE       BL               MDB_SendCommand ; envia a R0, R
                                                            2 comandos en &R1
  486 000002DC         InitGetCoinType
  487 000002DC 4804            LDR              R0, =DataIn ; R0 = &DataIn (poi
                                                            nter)
  488 000002DE F7FF FFFE       BL               MDB_GetAnswer ; Get answer from
                                                             peripheral
  489 000002E2 4803            LDR              R0, =DataIn ; R0 = &DataIn (poi
                                                            nter)
  490 000002E4 6801            LDR              R1, [R0]    ; R1 = [R0] (answer
                                                            )
  491 000002E6 2900            CMP              R1, #0x00   ; R1 == 00H ? (R1 =
                                                            = ACK?)
  492 000002E8 D1EA            BNE              InitSendCoinType ; if not, go t
                                                            o InitSendExpFeatur
                                                            eEnable
  493 000002EA         
  494 000002EA BD07            POP              {R0, R1, R2, PC} ; restore prev
                                                            ious value of R0 in
                                                            to R0, R1 into R1, 
                                                            R2 into R2 and LR i
                                                            nto PC (return)
  495 000002EC         
  496 000002EC         
  497 000002EC                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  498 000002EC                 END                          ; end of file
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 18 


              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\mdb.d -o.\objects\mdb.o -IC:\Users\mode_\Documents\Fm
at\MicroControladores\KeilProjects\Cash_flow\RTE\_Target_1 -IC:\Keil_v5\ARM\PAC
K\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 -IC:\Keil_v5\ARM\CMSIS\Include --p
redefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 522" --predefine="
TM4C1294NCPDT SETA 1" --list=.\listings\mdb.lst mdb.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Command 00000000

Symbol: Command
   Definitions
      At line 53 in file mdb.s
   Uses
      At line 61 in file mdb.s
      At line 213 in file mdb.s
      At line 228 in file mdb.s
      At line 243 in file mdb.s
      At line 258 in file mdb.s
      At line 273 in file mdb.s
      At line 290 in file mdb.s
      At line 309 in file mdb.s
      At line 334 in file mdb.s
      At line 353 in file mdb.s
      At line 431 in file mdb.s
      At line 478 in file mdb.s

DATA 00000000

Symbol: DATA
   Definitions
      At line 51 in file mdb.s
   Uses
      None
Comment: DATA unused
DataIn 00000024

Symbol: DataIn
   Definitions
      At line 54 in file mdb.s
   Uses
      At line 62 in file mdb.s
      At line 299 in file mdb.s
      At line 301 in file mdb.s
      At line 317 in file mdb.s
      At line 328 in file mdb.s
      At line 342 in file mdb.s
      At line 398 in file mdb.s
      At line 441 in file mdb.s
      At line 443 in file mdb.s
      At line 487 in file mdb.s
      At line 489 in file mdb.s

Identification_buf 00000084

Symbol: Identification_buf
   Definitions
      At line 58 in file mdb.s
   Uses
      At line 66 in file mdb.s
      At line 421 in file mdb.s
      At line 434 in file mdb.s

Payout_status_buf 000000A6

Symbol: Payout_status_buf
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 59 in file mdb.s
   Uses
      At line 67 in file mdb.s
Comment: Payout_status_buf used once
Pool_buf 00000073

Symbol: Pool_buf
   Definitions
      At line 57 in file mdb.s
   Uses
      At line 65 in file mdb.s
      At line 393 in file mdb.s

Send_diag_status_buf 000000B7

Symbol: Send_diag_status_buf
   Definitions
      At line 60 in file mdb.s
   Uses
      At line 68 in file mdb.s
      At line 452 in file mdb.s

Setup_buf 00000048

Symbol: Setup_buf
   Definitions
      At line 55 in file mdb.s
   Uses
      At line 63 in file mdb.s
      At line 408 in file mdb.s

Tube_status_buf 00000060

Symbol: Tube_status_buf
   Definitions
      At line 56 in file mdb.s
   Uses
      At line 64 in file mdb.s
      At line 361 in file mdb.s
      At line 468 in file mdb.s

9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 83 in file mdb.s
   Uses
      None
Comment: .text unused
DispenseValue_get_answer 00000136

Symbol: DispenseValue_get_answer
   Definitions
      At line 298 in file mdb.s
   Uses
      None
Comment: DispenseValue_get_answer unused
InitExpIdentificationDone 00000250

Symbol: InitExpIdentificationDone
   Definitions
      At line 427 in file mdb.s
   Uses
      At line 424 in file mdb.s
Comment: InitExpIdentificationDone used once
InitExpSendDiagStatusDone 00000298

Symbol: InitExpSendDiagStatusDone
   Definitions
      At line 458 in file mdb.s
   Uses
      At line 455 in file mdb.s
Comment: InitExpSendDiagStatusDone used once
InitGetCoinType 000002DC

Symbol: InitGetCoinType
   Definitions
      At line 486 in file mdb.s
   Uses
      None
Comment: InitGetCoinType unused
InitGetExpFeatureEnable 00000272

Symbol: InitGetExpFeatureEnable
   Definitions
      At line 440 in file mdb.s
   Uses
      None
Comment: InitGetExpFeatureEnable unused
InitGetExpIdentification 00000240

Symbol: InitGetExpIdentification
   Definitions
      At line 420 in file mdb.s
   Uses
      At line 426 in file mdb.s
Comment: InitGetExpIdentification used once
InitGetExpSendDiagStatus 00000288

Symbol: InitGetExpSendDiagStatus



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 451 in file mdb.s
   Uses
      At line 457 in file mdb.s
Comment: InitGetExpSendDiagStatus used once
InitGetPool 00000202

Symbol: InitGetPool
   Definitions
      At line 392 in file mdb.s
   Uses
      None
Comment: InitGetPool unused
InitGetSetup 00000224

Symbol: InitGetSetup
   Definitions
      At line 407 in file mdb.s
   Uses
      At line 413 in file mdb.s
Comment: InitGetSetup used once
InitGetTubeStatus 000002AC

Symbol: InitGetTubeStatus
   Definitions
      At line 467 in file mdb.s
   Uses
      At line 473 in file mdb.s
Comment: InitGetTubeStatus used once
InitResetLoop 000001F8

Symbol: InitResetLoop
   Definitions
      At line 385 in file mdb.s
   Uses
      At line 386 in file mdb.s
Comment: InitResetLoop used once
InitSendBusReset 000001EE

Symbol: InitSendBusReset
   Definitions
      At line 380 in file mdb.s
   Uses
      At line 396 in file mdb.s
      At line 401 in file mdb.s

InitSendCoinType 000002C0

Symbol: InitSendCoinType
   Definitions
      At line 477 in file mdb.s
   Uses
      At line 492 in file mdb.s
Comment: InitSendCoinType used once
InitSendExpFeatureEnable 00000254

Symbol: InitSendExpFeatureEnable
   Definitions
      At line 430 in file mdb.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 446 in file mdb.s
Comment: InitSendExpFeatureEnable used once
InitSendExpIdentification 00000238

Symbol: InitSendExpIdentification
   Definitions
      At line 417 in file mdb.s
   Uses
      None
Comment: InitSendExpIdentification unused
InitSendExpSendDiagStatus 00000280

Symbol: InitSendExpSendDiagStatus
   Definitions
      At line 448 in file mdb.s
   Uses
      None
Comment: InitSendExpSendDiagStatus unused
InitSendPool 000001FA

Symbol: InitSendPool
   Definitions
      At line 389 in file mdb.s
   Uses
      None
Comment: InitSendPool unused
InitSendSetup 0000021C

Symbol: InitSendSetup
   Definitions
      At line 404 in file mdb.s
   Uses
      None
Comment: InitSendSetup unused
InitSendTubeStatus 000002A4

Symbol: InitSendTubeStatus
   Definitions
      At line 464 in file mdb.s
   Uses
      None
Comment: InitSendTubeStatus unused
InitSetupDone 00000234

Symbol: InitSetupDone
   Definitions
      At line 414 in file mdb.s
   Uses
      At line 411 in file mdb.s
Comment: InitSetupDone used once
InitTimerSetupDone 000001FA

Symbol: InitTimerSetupDone
   Definitions
      At line 387 in file mdb.s
   Uses
      At line 383 in file mdb.s
Comment: InitTimerSetupDone used once



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

InitTubeStatusDone 000002BC

Symbol: InitTubeStatusDone
   Definitions
      At line 474 in file mdb.s
   Uses
      At line 471 in file mdb.s
Comment: InitTubeStatusDone used once
MDB_DispenseValue 0000011A

Symbol: MDB_DispenseValue
   Definitions
      At line 287 in file mdb.s
   Uses
      At line 81 in file mdb.s
Comment: MDB_DispenseValue used once
MDB_GetAnswer 0000005E

Symbol: MDB_GetAnswer
   Definitions
      At line 166 in file mdb.s
   Uses
      At line 75 in file mdb.s
      At line 300 in file mdb.s
      At line 318 in file mdb.s
      At line 343 in file mdb.s
      At line 362 in file mdb.s
      At line 394 in file mdb.s
      At line 409 in file mdb.s
      At line 422 in file mdb.s
      At line 442 in file mdb.s
      At line 453 in file mdb.s
      At line 469 in file mdb.s
      At line 488 in file mdb.s

MDB_InitCoinChanger 000001EC

Symbol: MDB_InitCoinChanger
   Definitions
      At line 377 in file mdb.s
   Uses
      At line 77 in file mdb.s
Comment: MDB_InitCoinChanger used once
MDB_SendACK 0000003A

Symbol: MDB_SendACK
   Definitions
      At line 131 in file mdb.s
   Uses
      At line 72 in file mdb.s
      At line 324 in file mdb.s
      At line 351 in file mdb.s
      At line 368 in file mdb.s
      At line 402 in file mdb.s
      At line 415 in file mdb.s
      At line 428 in file mdb.s
      At line 459 in file mdb.s
      At line 475 in file mdb.s




ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

MDB_SendAddress 00000000

Symbol: MDB_SendAddress
   Definitions
      At line 92 in file mdb.s
   Uses
      At line 70 in file mdb.s
      At line 217 in file mdb.s
      At line 232 in file mdb.s
      At line 247 in file mdb.s
      At line 262 in file mdb.s
      At line 277 in file mdb.s
      At line 296 in file mdb.s
      At line 314 in file mdb.s
      At line 339 in file mdb.s
      At line 358 in file mdb.s

MDB_SendBusReset 00000090

Symbol: MDB_SendBusReset
   Definitions
      At line 196 in file mdb.s
   Uses
      At line 76 in file mdb.s
      At line 381 in file mdb.s

MDB_SendCommand 00000010

Symbol: MDB_SendCommand
   Definitions
      At line 104 in file mdb.s
   Uses
      At line 71 in file mdb.s
      At line 218 in file mdb.s
      At line 233 in file mdb.s
      At line 248 in file mdb.s
      At line 263 in file mdb.s
      At line 278 in file mdb.s
      At line 297 in file mdb.s
      At line 315 in file mdb.s
      At line 340 in file mdb.s
      At line 359 in file mdb.s
      At line 439 in file mdb.s
      At line 485 in file mdb.s

MDB_SendExpIdentification 000000D2

Symbol: MDB_SendExpIdentification
   Definitions
      At line 241 in file mdb.s
   Uses
      At line 80 in file mdb.s
      At line 419 in file mdb.s

MDB_SendExpSendDiagStatus 000000EA

Symbol: MDB_SendExpSendDiagStatus
   Definitions
      At line 256 in file mdb.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 450 in file mdb.s
Comment: MDB_SendExpSendDiagStatus used once
MDB_SendNAK 00000052

Symbol: MDB_SendNAK
   Definitions
      At line 153 in file mdb.s
   Uses
      At line 74 in file mdb.s
Comment: MDB_SendNAK used once
MDB_SendPool 000000A2

Symbol: MDB_SendPool
   Definitions
      At line 211 in file mdb.s
   Uses
      At line 78 in file mdb.s
      At line 391 in file mdb.s

MDB_SendRET 00000046

Symbol: MDB_SendRET
   Definitions
      At line 142 in file mdb.s
   Uses
      At line 73 in file mdb.s
      At line 320 in file mdb.s
      At line 345 in file mdb.s
      At line 364 in file mdb.s
      At line 412 in file mdb.s
      At line 425 in file mdb.s
      At line 456 in file mdb.s
      At line 472 in file mdb.s

MDB_SendSetup 000000BA

Symbol: MDB_SendSetup
   Definitions
      At line 226 in file mdb.s
   Uses
      At line 79 in file mdb.s
      At line 406 in file mdb.s

MDB_SendTubeStatus 00000102

Symbol: MDB_SendTubeStatus
   Definitions
      At line 271 in file mdb.s
   Uses
      At line 466 in file mdb.s
Comment: MDB_SendTubeStatus used once
getAnswerDone 0000008E

Symbol: getAnswerDone
   Definitions
      At line 187 in file mdb.s
   Uses
      At line 184 in file mdb.s



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

Comment: getAnswerDone used once
getAnswerEnd 00000080

Symbol: getAnswerEnd
   Definitions
      At line 180 in file mdb.s
   Uses
      At line 177 in file mdb.s
Comment: getAnswerEnd used once
getAnswerLoop 0000006E

Symbol: getAnswerLoop
   Definitions
      At line 172 in file mdb.s
   Uses
      At line 179 in file mdb.s
Comment: getAnswerLoop used once
init_dispense_value 0000011C

Symbol: init_dispense_value
   Definitions
      At line 289 in file mdb.s
   Uses
      At line 304 in file mdb.s
Comment: init_dispense_value used once
outCommandDone 00000032

Symbol: outCommandDone
   Definitions
      At line 119 in file mdb.s
   Uses
      At line 112 in file mdb.s
Comment: outCommandDone used once
outCommandLoop 0000001C

Symbol: outCommandLoop
   Definitions
      At line 110 in file mdb.s
   Uses
      At line 118 in file mdb.s
Comment: outCommandLoop used once
payout_status_get_answer 000001A2

Symbol: payout_status_get_answer
   Definitions
      At line 341 in file mdb.s
   Uses
      At line 347 in file mdb.s
Comment: payout_status_get_answer used once
payout_status_send_payout_status 0000018A

Symbol: payout_status_send_payout_status
   Definitions
      At line 333 in file mdb.s
   Uses
      At line 349 in file mdb.s
Comment: payout_status_send_payout_status used once
payout_status_send_tube_status 000001BC




ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

Symbol: payout_status_send_tube_status
   Definitions
      At line 352 in file mdb.s
   Uses
      None
Comment: payout_status_send_tube_status unused
payout_value_poll_get_answer 00000164

Symbol: payout_value_poll_get_answer
   Definitions
      At line 316 in file mdb.s
   Uses
      At line 322 in file mdb.s
Comment: payout_value_poll_get_answer used once
payout_value_pool_loop 00000144

Symbol: payout_value_pool_loop
   Definitions
      At line 306 in file mdb.s
   Uses
      At line 326 in file mdb.s
      At line 331 in file mdb.s

sendBusResetDone 0000009C

Symbol: sendBusResetDone
   Definitions
      At line 202 in file mdb.s
   Uses
      None
Comment: sendBusResetDone unused
sendBusResetLoop 0000009A

Symbol: sendBusResetLoop
   Definitions
      At line 200 in file mdb.s
   Uses
      At line 201 in file mdb.s
Comment: sendBusResetLoop used once
tube_status_get_answer 000001D4

Symbol: tube_status_get_answer
   Definitions
      At line 360 in file mdb.s
   Uses
      At line 366 in file mdb.s
Comment: tube_status_get_answer used once
51 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

CMDLEN 00000024

Symbol: CMDLEN
   Definitions
      At line 52 in file mdb.s
   Uses
      At line 53 in file mdb.s
      At line 54 in file mdb.s

COIN_CHANGER_ADDR 00000008

Symbol: COIN_CHANGER_ADDR
   Definitions
      At line 8 in file mdb.s
   Uses
      At line 295 in file mdb.s
      At line 313 in file mdb.s
      At line 338 in file mdb.s
      At line 357 in file mdb.s
      At line 390 in file mdb.s
      At line 405 in file mdb.s
      At line 418 in file mdb.s
      At line 437 in file mdb.s
      At line 449 in file mdb.s
      At line 465 in file mdb.s
      At line 483 in file mdb.s

COMMAND_COIN_TYPE 0000000C

Symbol: COMMAND_COIN_TYPE
   Definitions
      At line 13 in file mdb.s
   Uses
      At line 479 in file mdb.s
Comment: COMMAND_COIN_TYPE used once
COMMAND_DISPENSE 0000000D

Symbol: COMMAND_DISPENSE
   Definitions
      At line 14 in file mdb.s
   Uses
      None
Comment: COMMAND_DISPENSE unused
COMMAND_EXPANSION 0000000F

Symbol: COMMAND_EXPANSION
   Definitions
      At line 15 in file mdb.s
   Uses
      None
Comment: COMMAND_EXPANSION unused
COMMAND_EXP_FEATURE_ENEABLE 0000010F

Symbol: COMMAND_EXP_FEATURE_ENEABLE
   Definitions
      At line 17 in file mdb.s
   Uses
      At line 432 in file mdb.s
Comment: COMMAND_EXP_FEATURE_ENEABLE used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

COMMAND_EXP_IDENTIFICATION 0000000F

Symbol: COMMAND_EXP_IDENTIFICATION
   Definitions
      At line 16 in file mdb.s
   Uses
      At line 244 in file mdb.s
Comment: COMMAND_EXP_IDENTIFICATION used once
COMMAND_EXP_PAYOUT 0000020F

Symbol: COMMAND_EXP_PAYOUT
   Definitions
      At line 18 in file mdb.s
   Uses
      At line 291 in file mdb.s
Comment: COMMAND_EXP_PAYOUT used once
COMMAND_EXP_PAYOUT_STATUS 0000030F

Symbol: COMMAND_EXP_PAYOUT_STATUS
   Definitions
      At line 19 in file mdb.s
   Uses
      At line 335 in file mdb.s
Comment: COMMAND_EXP_PAYOUT_STATUS used once
COMMAND_EXP_PAYOUT_VALUE_POLL 0000040F

Symbol: COMMAND_EXP_PAYOUT_VALUE_POLL
   Definitions
      At line 20 in file mdb.s
   Uses
      At line 310 in file mdb.s
Comment: COMMAND_EXP_PAYOUT_VALUE_POLL used once
COMMAND_EXP_SEND_DIAGNOSTIC_STATUS 0000050F

Symbol: COMMAND_EXP_SEND_DIAGNOSTIC_STATUS
   Definitions
      At line 21 in file mdb.s
   Uses
      At line 259 in file mdb.s
Comment: COMMAND_EXP_SEND_DIAGNOSTIC_STATUS used once
COMMAND_POLL 0000000B

Symbol: COMMAND_POLL
   Definitions
      At line 12 in file mdb.s
   Uses
      At line 214 in file mdb.s
Comment: COMMAND_POLL used once
COMMAND_RESET 00000008

Symbol: COMMAND_RESET
   Definitions
      At line 9 in file mdb.s
   Uses
      None
Comment: COMMAND_RESET unused
COMMAND_SETUP 00000009

Symbol: COMMAND_SETUP



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 10 in file mdb.s
   Uses
      At line 229 in file mdb.s
Comment: COMMAND_SETUP used once
COMMAND_TUBE_STATUS 0000000A

Symbol: COMMAND_TUBE_STATUS
   Definitions
      At line 11 in file mdb.s
   Uses
      At line 274 in file mdb.s
      At line 354 in file mdb.s

15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

Timer_BreakTime 00000000

Symbol: Timer_BreakTime
   Definitions
      At line 42 in file mdb.s
   Uses
      At line 199 in file mdb.s
Comment: Timer_BreakTime used once
Timer_NoResponseTime 00000000

Symbol: Timer_NoResponseTime
   Definitions
      At line 45 in file mdb.s
   Uses
      None
Comment: Timer_NoResponseTime unused
Timer_NoResponseTime_stop 00000000

Symbol: Timer_NoResponseTime_stop
   Definitions
      At line 46 in file mdb.s
   Uses
      None
Comment: Timer_NoResponseTime_stop unused
Timer_PollingTime 00000000

Symbol: Timer_PollingTime
   Definitions
      At line 44 in file mdb.s
   Uses
      None
Comment: Timer_PollingTime unused
Timer_ResponseTime 00000000

Symbol: Timer_ResponseTime
   Definitions
      At line 40 in file mdb.s
   Uses
      None
Comment: Timer_ResponseTime unused
Timer_ResponseTime_stop 00000000

Symbol: Timer_ResponseTime_stop
   Definitions
      At line 41 in file mdb.s
   Uses
      None
Comment: Timer_ResponseTime_stop unused
Timer_SetupTime 00000000

Symbol: Timer_SetupTime
   Definitions
      At line 43 in file mdb.s
   Uses
      At line 384 in file mdb.s
Comment: Timer_SetupTime used once
UART0_Handler 00000000

Symbol: UART0_Handler



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Definitions
      At line 27 in file mdb.s
   Uses
      None
Comment: UART0_Handler unused
UART_HighStickParity 00000000

Symbol: UART_HighStickParity
   Definitions
      At line 34 in file mdb.s
   Uses
      At line 94 in file mdb.s
Comment: UART_HighStickParity used once
UART_InChar 00000000

Symbol: UART_InChar
   Definitions
      At line 25 in file mdb.s
   Uses
      At line 173 in file mdb.s
Comment: UART_InChar used once
UART_InString 00000000

Symbol: UART_InString
   Definitions
      At line 33 in file mdb.s
   Uses
      None
Comment: UART_InString unused
UART_InUDec 00000000

Symbol: UART_InUDec
   Definitions
      At line 29 in file mdb.s
   Uses
      None
Comment: UART_InUDec unused
UART_InUHex 00000000

Symbol: UART_InUHex
   Definitions
      At line 31 in file mdb.s
   Uses
      None
Comment: UART_InUHex unused
UART_Init 00000000

Symbol: UART_Init
   Definitions
      At line 24 in file mdb.s
   Uses
      None
Comment: UART_Init unused
UART_LowStickParity 00000000

Symbol: UART_LowStickParity
   Definitions
      At line 35 in file mdb.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
External symbols

      At line 96 in file mdb.s
Comment: UART_LowStickParity used once
UART_OutChar 00000000

Symbol: UART_OutChar
   Definitions
      At line 26 in file mdb.s
   Uses
      At line 95 in file mdb.s
      At line 115 in file mdb.s
      At line 121 in file mdb.s
      At line 134 in file mdb.s
      At line 145 in file mdb.s
      At line 156 in file mdb.s

UART_OutString 00000000

Symbol: UART_OutString
   Definitions
      At line 28 in file mdb.s
   Uses
      None
Comment: UART_OutString unused
UART_OutUDec 00000000

Symbol: UART_OutUDec
   Definitions
      At line 30 in file mdb.s
   Uses
      None
Comment: UART_OutUDec unused
UART_OutUHex 00000000

Symbol: UART_OutUHex
   Definitions
      At line 32 in file mdb.s
   Uses
      None
Comment: UART_OutUHex unused
UART_SendBreak 00000000

Symbol: UART_SendBreak
   Definitions
      At line 36 in file mdb.s
   Uses
      At line 198 in file mdb.s
Comment: UART_SendBreak used once
UART_SendBreak_Disable 00000000

Symbol: UART_SendBreak_Disable
   Definitions
      At line 37 in file mdb.s
   Uses
      At line 203 in file mdb.s
Comment: UART_SendBreak_Disable used once
delay 00000000

Symbol: delay
   Definitions



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
External symbols

      At line 49 in file mdb.s
   Uses
      At line 308 in file mdb.s
      At line 462 in file mdb.s

22 symbols
433 symbols in table
