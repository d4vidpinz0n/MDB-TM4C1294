


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000         
    3 00000000         ;functions from UARTInts.s
    4 00000000                 IMPORT           UART_Init
    5 00000000                 IMPORT           UART_InChar
    6 00000000                 IMPORT           UART_OutChar
    7 00000000                 IMPORT           UART0_Handler
    8 00000000                 IMPORT           UART_OutString
    9 00000000                 IMPORT           UART_InUDec
   10 00000000                 IMPORT           UART_OutUDec
   11 00000000                 IMPORT           UART_InUHex
   12 00000000                 IMPORT           UART_OutUHex
   13 00000000                 IMPORT           UART_InString
   14 00000000                 IMPORT           UART_HighStickParity
   15 00000000                 IMPORT           UART_LowStickParity
   16 00000000         
   17 00000000                 AREA             DATA, ALIGN=2
   18 00000000 00000024 
                       CMDLEN  EQU              36          ; max size of comma
                                                            nd
   19 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 Command SPACE            (CMDLEN)
   20 00000024 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 DataIn  SPACE            (CMDLEN)
   21 00000048                 EXPORT           Command
   22 00000048                 EXPORT           DataIn
   23 00000048         
   24 00000048                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   25 00000000                 THUMB
   26 00000000         
   27 00000000         ;-----------MDB_SendAddress-----------
   28 00000000         ; Envia la direccion de un periferico
   29 00000000         ; activa High Stick Parity bit to send adress
   30 00000000         ; activa Low Stick parity after send
   31 00000000         ; Input : R0 8-bit address
   32 00000000         ; Output: none
   33 00000000         MDB_SendAddress
   34 00000000 B503            PUSH             {R0, R1, LR} ; save current val



ARM Macro Assembler    Page 2 


                                                            ue of R0, R1 and LR
                                                            
   35 00000002 F7FF FFFE       BL               UART_HighStickParity ; set high
                                                             stick parity
   36 00000006 F7FF FFFE       BL               UART_OutChar ; note: modifies R
                                                            0 and R1
   37 0000000A F7FF FFFE       BL               UART_LowStickParity ; set to lo
                                                            w stick parity
   38 0000000E BD03            POP              {R0, R1, PC} ; restore previous
                                                             value of R0 into R
                                                            0, R1 into R1, and 
                                                            LR into PC (return)
                                                            
   39 00000010         
   40 00000010         ;-----------MDB_SendCommand-----------
   41 00000010         ; Envia un comando a un periferico
   42 00000010         ; Input : R0 address (for chkSum), R1 pointer to command
                       s, R2 number of command/data bytes to be send
   43 00000010         ; Output: none
   44 00000010         ; Modifies: none, all used Register are pushed and poped
                       
   45 00000010         MDB_SendCommand
   46 00000010 B53F            PUSH             {R0, R1, R2, R3, R4, R5, LR} ; 
                                                            save current value 
                                                            of R0, R1, R2, R3, 
                                                            R4, R5 and LR
   47 00000012 4605            MOV              R5, R0      ; R5 = R0 save init
                                                            ial value of ChkSum
                                                            
   48 00000014 460C            MOV              R4, R1      ; R4 = R1 (save the
                                                             command pointer)
   49 00000016 4613            MOV              R3, R2      ; R3 = R2 (save num
                                                            ber of command/data
                                                             bytes)
   50 00000018 F04F 0200       MOV              R2, #0      ; initialize counte
                                                            r, contador de dato
                                                            s enviados
   51 0000001C         outCommandLoop
   52 0000001C 429A            CMP              R2, R3      ; is counter = numb
                                                            er of commands to s
                                                            end ?
   53 0000001E D008            BEQ              outCommandDone ; if so, its don
                                                            e, skip to 'outComm
                                                            andDone'
   54 00000020 6820            LDR              R0, [R4]    ; R0 = [R4] carga e
                                                            l byte a ser enviad
                                                            o
   55 00000022 4405            ADD              R5, R5, R0  ; actualiza chksum 
                                                            byte
   56 00000024 F7FF FFFE       BL               UART_OutChar ; envia el byte en
                                                             R0, note: modifies
                                                             R0 and R1
   57 00000028 F104 0401       ADD              R4, R4, #1  ; R4 = R4 + 1 incre
                                                            menta el command po
                                                            inter
   58 0000002C F102 0201       ADD              R2, R2, #1  ; R2 = R2 + 1 incre
                                                            menta el contador
   59 00000030 E7F4            B                outCommandLoop
   60 00000032         outCommandDone



ARM Macro Assembler    Page 3 


   61 00000032 4628            MOV              R0, R5      ; R0 = R5 Copy chks
                                                            um to R0
   62 00000034 F7FF FFFE       BL               UART_OutChar ; send chksum byte
                                                            
   63 00000038         ; restore previous value of R0 into R0, R1 into R1, R2 i
                       nto R2
   64 00000038 BD3F            POP              {R0, R1, R2, R3, R4, R5, PC} ; 
                                                            R3 into R3, R4 into
                                                             R4, R5, into R5 an
                                                            d LR into PC (retur
                                                            n)
   65 0000003A         
   66 0000003A         
   67 0000003A         ;-----------MDB_SendACK-----------
   68 0000003A         ; Envia el ACK byte
   69 0000003A         ; Input : none
   70 0000003A         ; Output: none
   71 0000003A         ; Modifies: none, all used Register are pushed and poped
                       
   72 0000003A         MDB_SendACK
   73 0000003A B503            PUSH             {R0, R1, LR}
   74 0000003C F04F 0000       MOV              R0, #0      ; R0 = 0x00H (ACK)
   75 00000040 F7FF FFFE       BL               UART_OutChar ; envia ACK, note:
                                                             modifies R0 and R1
                                                            
   76 00000044 BD03            POP              {R0, R1, PC}
   77 00000046         
   78 00000046         ;-----------MDB_SendRET-----------
   79 00000046         ; Envia el RET byte
   80 00000046         ; Input : none
   81 00000046         ; Output: none
   82 00000046         ; Modifies: none, all used Register are pushed and poped
                       
   83 00000046         MDB_SendRET
   84 00000046 B503            PUSH             {R0, R1, LR}
   85 00000048 F04F 00AA       MOV              R0, #170    ; R0 = 0xAAH (RET)
   86 0000004C F7FF FFFE       BL               UART_OutChar ; envia RET, note:
                                                             modifies R0 and R1
                                                            
   87 00000050 BD03            POP              {R0, R1, PC}
   88 00000052         
   89 00000052         ;-----------MDB_SendNAK-----------
   90 00000052         ; Envia el NAK byte
   91 00000052         ; Input : none
   92 00000052         ; Output: none
   93 00000052         ; Modifies: none, all used Register are pushed and poped
                       
   94 00000052         MDB_SendNAK
   95 00000052 B503            PUSH             {R0, R1, LR}
   96 00000054 F04F 00FF       MOV              R0, #255    ; R0 = 0xFFH (NAK)
   97 00000058 F7FF FFFE       BL               UART_OutChar ; envia NAK, note:
                                                             modifies R0 and R1
                                                            
   98 0000005C BD03            POP              {R0, R1, PC}
   99 0000005E         
  100 0000005E         ;-----------MDB_GetData-----------
  101 0000005E         ; Recibe datos o respuesta del periferico
  102 0000005E         ; se debe tener activado LOW Stick Parity, o se cicla la
                        funcion



ARM Macro Assembler    Page 4 


  103 0000005E         ; Input : R0 pointer to DataIn buffer
  104 0000005E         ; Output: R0 number of data bytes getted. DataIn buffer 
                       upgraded.
  105 0000005E         ; Modifies: R0, all used Register are pushed and poped
  106 0000005E         MDB_GetData
  107 0000005E B53F            PUSH             {R0, R1, R2, R3, R4, R5, LR} ; 
                                                            save current value 
                                                            of R0, R1, R2, R3, 
                                                            R4, R5 and LR
  108 00000060 4603            MOV              R3, R0      ; R4 = R1 (save the
                                                             DataIn pointer) 
  109 00000062 F04F 0200       MOV              R2, #0      ; initialize counte
                                                            r, contador de dato
                                                            s recibidos
  110 00000066         inDataLoop                           ; stay in loop util
                                                             interruption by st
                                                            ick parity detected
                                                            
  111 00000066         
  112 00000066         ;Se necesita implementar el time-out en InChar
  113 00000066 F7FF FFFE       BL               UART_InChar
  114 0000006A         
  115 0000006A E7FC            B                inDataLoop
  116 0000006C         inDataDone
  117 0000006C         ; restore previous value of R0 into R0, R1 into R1, R2 i
                       nto R2
  118 0000006C BD3F            POP              {R0, R1, R2, R3, R4, R5, PC} ; 
                                                            R3 into R3, R4 into
                                                             R4, R5, into R5 an
                                                            d LR into PC (retur
                                                            n)
  119 0000006E         
  120 0000006E 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  121 00000070                 END                          ; end of file
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\mdb.d -o.\objects\mdb.o -IC:\Users\mode_\Documents\Fm
at\MicroControladores\KeilProjects\Cash_flow\RTE\_Target_1 -IC:\Keil_v5\ARM\PAC
K\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 -IC:\Keil_v5\ARM\CMSIS\Include --p
redefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 522" --predefine="
TM4C1294NCPDT SETA 1" --list=.\listings\mdb.lst mdb.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Command 00000000

Symbol: Command
   Definitions
      At line 19 in file mdb.s
   Uses
      At line 21 in file mdb.s
Comment: Command used once
DATA 00000000

Symbol: DATA
   Definitions
      At line 17 in file mdb.s
   Uses
      None
Comment: DATA unused
DataIn 00000024

Symbol: DataIn
   Definitions
      At line 20 in file mdb.s
   Uses
      At line 22 in file mdb.s
Comment: DataIn used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 24 in file mdb.s
   Uses
      None
Comment: .text unused
MDB_GetData 0000005E

Symbol: MDB_GetData
   Definitions
      At line 106 in file mdb.s
   Uses
      None
Comment: MDB_GetData unused
MDB_SendACK 0000003A

Symbol: MDB_SendACK
   Definitions
      At line 72 in file mdb.s
   Uses
      None
Comment: MDB_SendACK unused
MDB_SendAddress 00000000

Symbol: MDB_SendAddress
   Definitions
      At line 33 in file mdb.s
   Uses
      None
Comment: MDB_SendAddress unused
MDB_SendCommand 00000010

Symbol: MDB_SendCommand
   Definitions
      At line 45 in file mdb.s
   Uses
      None
Comment: MDB_SendCommand unused
MDB_SendNAK 00000052

Symbol: MDB_SendNAK
   Definitions
      At line 94 in file mdb.s
   Uses
      None
Comment: MDB_SendNAK unused
MDB_SendRET 00000046

Symbol: MDB_SendRET
   Definitions
      At line 83 in file mdb.s
   Uses
      None
Comment: MDB_SendRET unused
inDataDone 0000006C

Symbol: inDataDone



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 116 in file mdb.s
   Uses
      None
Comment: inDataDone unused
inDataLoop 00000066

Symbol: inDataLoop
   Definitions
      At line 110 in file mdb.s
   Uses
      At line 115 in file mdb.s
Comment: inDataLoop used once
outCommandDone 00000032

Symbol: outCommandDone
   Definitions
      At line 60 in file mdb.s
   Uses
      At line 53 in file mdb.s
Comment: outCommandDone used once
outCommandLoop 0000001C

Symbol: outCommandLoop
   Definitions
      At line 51 in file mdb.s
   Uses
      At line 59 in file mdb.s
Comment: outCommandLoop used once
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

CMDLEN 00000024

Symbol: CMDLEN
   Definitions
      At line 18 in file mdb.s
   Uses
      At line 19 in file mdb.s
      At line 20 in file mdb.s

1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

UART0_Handler 00000000

Symbol: UART0_Handler
   Definitions
      At line 7 in file mdb.s
   Uses
      None
Comment: UART0_Handler unused
UART_HighStickParity 00000000

Symbol: UART_HighStickParity
   Definitions
      At line 14 in file mdb.s
   Uses
      At line 35 in file mdb.s
Comment: UART_HighStickParity used once
UART_InChar 00000000

Symbol: UART_InChar
   Definitions
      At line 5 in file mdb.s
   Uses
      At line 113 in file mdb.s
Comment: UART_InChar used once
UART_InString 00000000

Symbol: UART_InString
   Definitions
      At line 13 in file mdb.s
   Uses
      None
Comment: UART_InString unused
UART_InUDec 00000000

Symbol: UART_InUDec
   Definitions
      At line 9 in file mdb.s
   Uses
      None
Comment: UART_InUDec unused
UART_InUHex 00000000

Symbol: UART_InUHex
   Definitions
      At line 11 in file mdb.s
   Uses
      None
Comment: UART_InUHex unused
UART_Init 00000000

Symbol: UART_Init
   Definitions
      At line 4 in file mdb.s
   Uses
      None
Comment: UART_Init unused
UART_LowStickParity 00000000

Symbol: UART_LowStickParity



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Definitions
      At line 15 in file mdb.s
   Uses
      At line 37 in file mdb.s
Comment: UART_LowStickParity used once
UART_OutChar 00000000

Symbol: UART_OutChar
   Definitions
      At line 6 in file mdb.s
   Uses
      At line 36 in file mdb.s
      At line 56 in file mdb.s
      At line 62 in file mdb.s
      At line 75 in file mdb.s
      At line 86 in file mdb.s
      At line 97 in file mdb.s

UART_OutString 00000000

Symbol: UART_OutString
   Definitions
      At line 8 in file mdb.s
   Uses
      None
Comment: UART_OutString unused
UART_OutUDec 00000000

Symbol: UART_OutUDec
   Definitions
      At line 10 in file mdb.s
   Uses
      None
Comment: UART_OutUDec unused
UART_OutUHex 00000000

Symbol: UART_OutUHex
   Definitions
      At line 12 in file mdb.s
   Uses
      None
Comment: UART_OutUHex unused
12 symbols
361 symbols in table
