


ARM Macro Assembler    Page 1 


    1 00000000         ; mdb.s
    2 00000000         ; Runs on TM4C1294
    3 00000000         ; Modulo de funciones del protocolo MDB
    4 00000000         ; usando funciones del modulo de UARTInts.s
    5 00000000         ; David Pinzon & Alberto Lopez
    6 00000000         ; May 27, 2017
    7 00000000         
    8 00000000 00000008 
                       COIN_CHANGER_ADDR
                               EQU              0x0008
    9 00000000 00000008 
                       COMMAND_RESET
                               EQU              0x0008
   10 00000000 00000009 
                       COMMAND_SETUP
                               EQU              0x0009
   11 00000000 0000000A 
                       COMMAND_TUBE_STATUS
                               EQU              0x000A
   12 00000000 0000000B 
                       COMMAND_POLL
                               EQU              0x000B
   13 00000000 0000000C 
                       COMMAND_COIN_TYPE
                               EQU              0x000C
   14 00000000 0000000D 
                       COMMAND_DISPENSE
                               EQU              0x000D
   15 00000000 0000000F 
                       COMMAND_EXPANSION
                               EQU              0x000F
   16 00000000 00000F00 
                       COMMAND_EXP_IDENTIFICATION
                               EQU              0x0F00
   17 00000000 00000F01 
                       COMMAND_EXP_FEATURE_ENEABLE
                               EQU              0x0F01
   18 00000000 00000F02 
                       COMMAND_EXP_PAYOUT
                               EQU              0x0F02
   19 00000000 00000F03 
                       COMMAND_EXP_PAYOUT_STATUS
                               EQU              0x0F03
   20 00000000 00000F04 
                       COMMAND_EXP_PAYOUT_VALUE_POLL
                               EQU              0x0F04
   21 00000000 00000F05 
                       COMMAND_EXP_SEND_DIAGNOSTIC_STATUS
                               EQU              0x0F05
   22 00000000         
   23 00000000         ;functions from UARTInts.s
   24 00000000                 IMPORT           UART_Init
   25 00000000                 IMPORT           UART_InChar
   26 00000000                 IMPORT           UART_OutChar
   27 00000000                 IMPORT           UART0_Handler
   28 00000000                 IMPORT           UART_OutString
   29 00000000                 IMPORT           UART_InUDec
   30 00000000                 IMPORT           UART_OutUDec
   31 00000000                 IMPORT           UART_InUHex



ARM Macro Assembler    Page 2 


   32 00000000                 IMPORT           UART_OutUHex
   33 00000000                 IMPORT           UART_InString
   34 00000000                 IMPORT           UART_HighStickParity
   35 00000000                 IMPORT           UART_LowStickParity
   36 00000000                 IMPORT           UART_SendBreak
   37 00000000                 IMPORT           UART_SendBreak_Disable
   38 00000000         
   39 00000000         ;functions from GPTimer.s
   40 00000000                 IMPORT           Timer_ResponseTime
   41 00000000                 IMPORT           Timer_ResponseTime_stop
   42 00000000                 IMPORT           Timer_BreakTime
   43 00000000                 IMPORT           Timer_SetupTime
   44 00000000                 IMPORT           Timer_PollingTime
   45 00000000                 IMPORT           Timer_NoResponseTime
   46 00000000                 IMPORT           Timer_NoResponseTime_stop
   47 00000000         
   48 00000000         ;functions from Systick.s
   49 00000000                 IMPORT           delay
   50 00000000         
   51 00000000                 AREA             DATA, ALIGN=2
   52 00000000 00000024 
                       CMDLEN  EQU              36          ; max size of comma
                                                            nd
   53 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 Command SPACE            (CMDLEN)
   54 00000024 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 DataIn  SPACE            (CMDLEN)
   55 00000048 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 Setup_buf
                               SPACE            24
   56 00000060 00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 3 


              00 00 00 
              00 00 00 
              00 00 00 
              00       Tube_status_buf
                               SPACE            19
   57 00000073 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    Pool_buf
                               SPACE            17
   58 00000084 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       Identification_buf
                               SPACE            34
   59 000000A6 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    Payout_status_buf
                               SPACE            17
   60 000000B7 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    Send_diag_status_buf
                               SPACE            17
   61 000000C8                 EXPORT           Command
   62 000000C8                 EXPORT           DataIn
   63 000000C8                 EXPORT           Setup_buf
   64 000000C8                 EXPORT           Tube_status_buf
   65 000000C8                 EXPORT           Pool_buf
   66 000000C8                 EXPORT           Identification_buf
   67 000000C8                 EXPORT           Payout_status_buf
   68 000000C8                 EXPORT           Send_diag_status_buf
   69 000000C8         ;functions to export
   70 000000C8                 EXPORT           MDB_SendAddress
   71 000000C8                 EXPORT           MDB_SendCommand
   72 000000C8                 EXPORT           MDB_SendACK
   73 000000C8                 EXPORT           MDB_SendRET
   74 000000C8                 EXPORT           MDB_SendNAK
   75 000000C8                 EXPORT           MDB_GetAnswer
   76 000000C8                 EXPORT           MDB_SendBusReset
   77 000000C8                 EXPORT           MDB_InitCoinChanger
   78 000000C8                 EXPORT           MDB_SendPool
   79 000000C8                 EXPORT           MDB_SendSetup
   80 000000C8                 EXPORT           MDB_SendExpIdentification



ARM Macro Assembler    Page 4 


   81 000000C8         
   82 000000C8                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   83 00000000                 THUMB
   84 00000000         
   85 00000000         ;-----------MDB_SendAddress-----------
   86 00000000         ; Envia la direccion de un periferico
   87 00000000         ; activa High Stick Parity bit to send adress
   88 00000000         ; activa Low Stick parity after send
   89 00000000         ; Input : R0 8-bit address
   90 00000000         ; Output: none
   91 00000000         MDB_SendAddress
   92 00000000 B503            PUSH             {R0, R1, LR} ; save current val
                                                            ue of R0, R1 and LR
                                                            
   93 00000002 F7FF FFFE       BL               UART_HighStickParity ; set high
                                                             stick parity
   94 00000006 F7FF FFFE       BL               UART_OutChar ; note: modifies R
                                                            0 and R1
   95 0000000A F7FF FFFE       BL               UART_LowStickParity ; set to lo
                                                            w stick parity
   96 0000000E BD03            POP              {R0, R1, PC} ; restore previous
                                                             value of R0 into R
                                                            0, R1 into R1, and 
                                                            LR into PC (return)
                                                            
   97 00000010         
   98 00000010         ;-----------MDB_SendCommand-----------
   99 00000010         ; Envia comando/datos a un periferico
  100 00000010         ; Input : R0 address (for chkSum), R1 pointer to command
                       s, R2 number of command/data bytes to be send
  101 00000010         ; Output: none
  102 00000010         ; Modifies: none, all used Register are pushed and poped
                       
  103 00000010         MDB_SendCommand
  104 00000010 B53F            PUSH             {R0, R1, R2, R3, R4, R5, LR} ; 
                                                            save current value 
                                                            of R0, R1, R2, R3, 
                                                            R4, R5 and LR
  105 00000012 4605            MOV              R5, R0      ; R5 = R0 save init
                                                            ial value of ChkSum
                                                            
  106 00000014 460C            MOV              R4, R1      ; R4 = R1 (save the
                                                             command pointer)
  107 00000016 4613            MOV              R3, R2      ; R3 = R2 (save num
                                                            ber of command/data
                                                             bytes)
  108 00000018 F04F 0200       MOV              R2, #0      ; initialize counte
                                                            r, contador de dato
                                                            s enviados
  109 0000001C         outCommandLoop
  110 0000001C 429A            CMP              R2, R3      ; is counter = numb
                                                            er of commands to s
                                                            end ?
  111 0000001E D008            BEQ              outCommandDone ; if so, its don
                                                            e, skip to 'outComm
                                                            andDone'
  112 00000020 6820            LDR              R0, [R4]    ; R0 = [R4] carga e
                                                            l byte a ser enviad



ARM Macro Assembler    Page 5 


                                                            o
  113 00000022 4405            ADD              R5, R5, R0  ; actualiza chksum 
                                                            byte
  114 00000024 F7FF FFFE       BL               UART_OutChar ; envia el byte en
                                                             R0, note: modifies
                                                             R0 and R1
  115 00000028 F104 0401       ADD              R4, R4, #1  ; R4 = R4 + 1 incre
                                                            menta el command po
                                                            inter
  116 0000002C F102 0201       ADD              R2, R2, #1  ; R2 = R2 + 1 incre
                                                            menta el contador
  117 00000030 E7F4            B                outCommandLoop
  118 00000032         outCommandDone
  119 00000032 4628            MOV              R0, R5      ; R0 = R5 Copy chks
                                                            um to R0
  120 00000034 F7FF FFFE       BL               UART_OutChar ; send chksum byte
                                                            
  121 00000038         ; restore previous value of R0 into R0, R1 into R1, R2 i
                       nto R2
  122 00000038 BD3F            POP              {R0, R1, R2, R3, R4, R5, PC} ; 
                                                            R3 into R3, R4 into
                                                             R4, R5, into R5 an
                                                            d LR into PC (retur
                                                            n)
  123 0000003A         
  124 0000003A         
  125 0000003A         ;-----------MDB_SendACK-----------
  126 0000003A         ; Envia el ACK byte
  127 0000003A         ; Input : none
  128 0000003A         ; Output: none
  129 0000003A         ; Modifies: none, all used Register are pushed and poped
                       
  130 0000003A         MDB_SendACK
  131 0000003A B503            PUSH             {R0, R1, LR} ; save current val
                                                            ue of R0, R1 and LR
                                                            
  132 0000003C F04F 0000       MOV              R0, #0      ; R0 = 0x00H (ACK)
  133 00000040 F7FF FFFE       BL               UART_OutChar ; envia ACK, note:
                                                             modifies R0 and R1
                                                            
  134 00000044 BD03            POP              {R0, R1, PC} ; restore previous
                                                             value of R0 into R
                                                            0, R1 into R1, and 
                                                            LR into PC (return)
                                                            
  135 00000046         
  136 00000046         ;-----------MDB_SendRET-----------
  137 00000046         ; Envia el RET byte
  138 00000046         ; Input : none
  139 00000046         ; Output: none
  140 00000046         ; Modifies: none, all used Register are pushed and poped
                       
  141 00000046         MDB_SendRET
  142 00000046 B503            PUSH             {R0, R1, LR} ; save current val
                                                            ue of R0, R1 and LR
                                                            
  143 00000048 F04F 00AA       MOV              R0, #170    ; R0 = 0xAAH (RET)
  144 0000004C F7FF FFFE       BL               UART_OutChar ; envia RET, note:
                                                             modifies R0 and R1



ARM Macro Assembler    Page 6 


                                                            
  145 00000050 BD03            POP              {R0, R1, PC} ; restore previous
                                                             value of R0 into R
                                                            0, R1 into R1, and 
                                                            LR into PC (return)
                                                            
  146 00000052         
  147 00000052         ;-----------MDB_SendNAK-----------
  148 00000052         ; Envia el NAK byte
  149 00000052         ; Input : none
  150 00000052         ; Output: none
  151 00000052         ; Modifies: none, all used Register are pushed and poped
                       
  152 00000052         MDB_SendNAK
  153 00000052 B503            PUSH             {R0, R1, LR} ; save current val
                                                            ue of R0, R1 and LR
                                                            
  154 00000054 F04F 00FF       MOV              R0, #255    ; R0 = 0xFFH (NAK)
  155 00000058 F7FF FFFE       BL               UART_OutChar ; envia NAK, note:
                                                             modifies R0 and R1
                                                            
  156 0000005C BD03            POP              {R0, R1, PC} ; restore previous
                                                             value of R0 into R
                                                            0, R1 into R1, and 
                                                            LR into PC (return)
                                                            
  157 0000005E         
  158 0000005E         ;-----------MDB_GetAnswer-----------
  159 0000005E         ; Recibe datos/respuesta del periferico
  160 0000005E         ; se debe tener activado LOW Stick Parity, o se cicla la
                        funcion
  161 0000005E         ; Input : R0 pointer to DataIn buffer
  162 0000005E         ; Output: R0 number of data bytes getted, included chk(i
                       f apply), 0 if chksum failed
  163 0000005E         ; Modifies: R0, all used Register are pushed and poped
  164 0000005E         ; DataIn buffer upgraded.
  165 0000005E         MDB_GetAnswer
  166 0000005E B53E            PUSH             {R1, R2, R3, R4, R5, LR} ; save
                                                             current value of R
                                                            0, R1, R2, R3, R4, 
                                                            R5 and LR
  167 00000060 4603            MOV              R3, R0      ; R3 = R0 (save the
                                                             DataIn pointer buf
                                                            fer) 
  168 00000062 F04F 0200       MOV              R2, #0      ; initialize counte
                                                            r, contador de dato
                                                            s recibidos
  169 00000066 F04F 0400       MOV              R4, #0      ; initialize chksum
                                                            
  170 0000006A F04F 0500       MOV              R5, #0      ; personal flag for
                                                             Stick Parity Inter
                                                            rup
  171 0000006E         getAnswerLoop                        ; stay in loop util
                                                             interruption by st
                                                            ick parity detected
                                                             
  172 0000006E F7FF FFFE       BL               UART_InChar ; get byte from UAR
                                                            T
  173 00000072 7018            STRB             R0, [R3]    ; [R3] = R0 (store 



ARM Macro Assembler    Page 7 


                                                            8 least significant
                                                             bits of R0 into lo
                                                            cation pointed to b
                                                            y R4)
  174 00000074 F103 0301       ADD              R3, R3, #1  ; R4 = R4 + 1 (buff
                                                            erPt = bufferPt + 1
                                                            )
  175 00000078 2D01            CMP              R5, #1      ; R5 = 1 ? (R5 modi
                                                            fied by Stick Parit
                                                            y Interrupt Handler
                                                            )
  176 0000007A D001            BEQ              getAnswerEnd ; if so, answer of
                                                             peripheral MDB is 
                                                            finished
  177 0000007C 4404            ADD              R4, R4, R0  ; actualize chksum 
                                                            
  178 0000007E E7F6            B                getAnswerLoop ; unconditional b
                                                            ranch to 'inDataLoo
                                                            p'
  179 00000080         getAnswerEnd
  180 00000080 4601            MOV              R1, R0      ; R1 = R0 (chk byte
                                                            )
  181 00000082 4610            MOV              R0, R2      ; R0 = R2 number of
                                                             bytes received
  182 00000084 2801            CMP              R0, #1      ; R0 = 1 ? (if no n
                                                            eeded check sum)
  183 00000086 D002            BEQ              getAnswerDone ; if so, answer d
                                                            one
  184 00000088 428C            CMP              R4, R1      ; R4 = R0 (chksum =
                                                             chk)?
  185 0000008A BF18 2000       MOVNE            R0, #0      ; R0 = 0 (chksum fa
                                                            iled)
  186 0000008E         getAnswerDone
  187 0000008E         ; restore previous value of R0 into R0, R1 into R1, R2 i
                       nto R2
  188 0000008E BD3E            POP              {R1, R2, R3, R4, R5, PC} ; R3 i
                                                            nto R3, R4 into R4,
                                                             R5, into R5 and LR
                                                             into PC (return)
  189 00000090         
  190 00000090         ;---------MDB_SendBusReset---------
  191 00000090         ; Manda un bus reset a los perifericos
  192 00000090         ; Input : none
  193 00000090         ; Output: none
  194 00000090         ; Modifies: none, all used Register are pushed and poped
                       
  195 00000090         MDB_SendBusReset
  196 00000090 B503            PUSH             {R0, R1, LR} ; save current val
                                                            ues of R0, R1, LR
  197 00000092 F7FF FFFE       BL               UART_SendBreak ; send break
  198 00000096 F7FF FFFE       BL               Timer_BreakTime ; start Timer_B
                                                            reakTime (100ms)
  199 0000009A         sendBusResetLoop
  200 0000009A E7FE            B                sendBusResetLoop
  201 0000009C         sendBusResetDone
  202 0000009C F7FF FFFE       BL               UART_SendBreak_Disable 
                                                            ; stop break
  203 000000A0 BD03            POP              {R0, R1, PC} ; restore previous
                                                             value of R0 into R



ARM Macro Assembler    Page 8 


                                                            0, R1 into R1, and 
                                                            LR into PC (return)
                                                            
  204 000000A2         
  205 000000A2         ;---------MDB_SendPool---------
  206 000000A2         ; Manda un el comando POOL
  207 000000A2         ; Input : R0, peripheral addres to send the pool command
                       
  208 000000A2         ; Output: none
  209 000000A2         ; Modifies: none, all used Register are pushed and poped
                       
  210 000000A2         MDB_SendPool
  211 000000A2 B507            PUSH             {R0, R1, R2, LR} ; save current
                                                             values of R0, R1, 
                                                            R2, LR
  212 000000A4 495B            LDR              R1,=Command ; R1 = &Command (po
                                                            inter)
  213 000000A6 F04F 020B       MOV              R2,#COMMAND_POLL 
                                                            ; R2 = COMMAND_POLL
                                                            
  214 000000AA 700A            STRB             R2,[R1]     ; [R1] = R2 (COMMAN
                                                            D_POLL)
  215 000000AC F04F 0201       MOV              R2,#1       ; R2 = 1 (number of
                                                             command bytes to s
                                                            end)
  216 000000B0 F7FF FFFE       BL               MDB_SendAddress ; send the peri
                                                            pheral address
  217 000000B4 F7FF FFFE       BL               MDB_SendCommand ; send pool com
                                                            mand with chk byte
  218 000000B8 BD07            POP              {R0, R1, R2, PC} ; restore prev
                                                            ious value of R0 in
                                                            to R0, R1 into R1, 
                                                            and LR into PC (ret
                                                            urn)
  219 000000BA         
  220 000000BA         ;---------MDB_SendSetup---------
  221 000000BA         ; Manda un el comando SETUP
  222 000000BA         ; Input : R0, peripheral addres to send the Setup comman
                       d
  223 000000BA         ; Output: none
  224 000000BA         ; Modifies: none, all used Register are pushed and poped
                       
  225 000000BA         MDB_SendSetup
  226 000000BA B507            PUSH             {R0, R1, R2, LR} ; save current
                                                             values of R0, R1, 
                                                            R2, LR
  227 000000BC 4955            LDR              R1,=Command ; R1 = &Command (po
                                                            inter)
  228 000000BE F04F 0209       MOV              R2,#COMMAND_SETUP ; R2 = COMMAN
                                                            D_SETUP
  229 000000C2 700A            STRB             R2,[R1]     ; [R1] = R2 (COMMAN
                                                            D_SETUP)
  230 000000C4 F04F 0201       MOV              R2,#1       ; R2 = 1 (number of
                                                             command bytes to s
                                                            end)
  231 000000C8 F7FF FFFE       BL               MDB_SendAddress ; send the peri
                                                            pheral address
  232 000000CC F7FF FFFE       BL               MDB_SendCommand ; send pool com
                                                            mand with chk byte



ARM Macro Assembler    Page 9 


  233 000000D0 BD07            POP              {R0, R1, R2, PC} ; restore prev
                                                            ious value of R0 in
                                                            to R0, R1 into R1, 
                                                            and LR into PC (ret
                                                            urn)
  234 000000D2         
  235 000000D2         ;---------MDB_SendExpIdentification---------
  236 000000D2         ; Manda un el comando-exp  Identification
  237 000000D2         ; Input : R0, peripheral addres to send the Identificati
                       on command
  238 000000D2         ; Output: none
  239 000000D2         ; Modifies: none, all used Register are pushed and poped
                       
  240 000000D2         MDB_SendExpIdentification
  241 000000D2 B507            PUSH             {R0, R1, R2, LR} ; save current
                                                             values of R0, R1, 
                                                            R2, LR
  242 000000D4 494F            LDR              R1,=Command ; R1 = &Command (po
                                                            inter)
  243 000000D6 F44F 6270       MOV              R2,#COMMAND_EXP_IDENTIFICATION 
                                                            ; R2 = COMMAND_EXP_
                                                            IDENTIFICATION
  244 000000DA 700A            STRB             R2,[R1]     ; [R1] = R2 (COMMAN
                                                            D_EXP_IDENTIFICATIO
                                                            N)
  245 000000DC F04F 0201       MOV              R2,#1       ; R2 = 1 (number of
                                                             command bytes to s
                                                            end)
  246 000000E0 F7FF FFFE       BL               MDB_SendAddress ; send the peri
                                                            pheral address
  247 000000E4 F7FF FFFE       BL               MDB_SendCommand ; send pool com
                                                            mand with chk byte
  248 000000E8 BD07            POP              {R0, R1, R2, PC} ; restore prev
                                                            ious value of R0 in
                                                            to R0, R1 into R1, 
                                                            and LR into PC (ret
                                                            urn)
  249 000000EA         
  250 000000EA         ;---------MDB_SendExpSendDiagStatus---------
  251 000000EA         ; Manda el comando-exp Send Diagnostic status
  252 000000EA         ; Input : R0, peripheral addres to send the SendDiagStat
                       us comand
  253 000000EA         ; Output: none
  254 000000EA         ; Modifies: none, all used Register are pushed and poped
                       
  255 000000EA         MDB_SendExpSendDiagStatus
  256 000000EA B507            PUSH             {R0, R1, R2, LR} ; save current
                                                             values of R0, R1, 
                                                            R2, LR
  257 000000EC 4949            LDR              R1,=Command ; R1 = &Command (po
                                                            inter)
  258 000000EE F640 7205       MOV              R2,#COMMAND_EXP_SEND_DIAGNOSTIC
_STATUS 
                                                            ; R2 = COMMAND_EXP_
                                                            SEND_DIAGNOSTIC_STA
                                                            TUS
  259 000000F2 700A            STRB             R2,[R1]     ; [R1] = R2 (COMMAN
                                                            D_EXP_SEND_DIAGNOST
                                                            IC_STATUS)



ARM Macro Assembler    Page 10 


  260 000000F4 F04F 0201       MOV              R2,#1       ; R2 = 1 (number of
                                                             command bytes to s
                                                            end)
  261 000000F8 F7FF FFFE       BL               MDB_SendAddress ; send the peri
                                                            pheral address
  262 000000FC F7FF FFFE       BL               MDB_SendCommand ; send pool com
                                                            mand with chk byte
  263 00000100 BD07            POP              {R0, R1, R2, PC} ; restore prev
                                                            ious value of R0 in
                                                            to R0, R1 into R1, 
                                                            and LR into PC (ret
                                                            urn)
  264 00000102         
  265 00000102         ;---------MDB_SendTubeStatus---------
  266 00000102         ; Manda el comando Tube Status
  267 00000102         ; Input : R0, peripheral addres to send the Tube Status 
                       comand
  268 00000102         ; Output: none
  269 00000102         ; Modifies: none, all used Register are pushed and poped
                       
  270 00000102         MDB_SendTubeStatus
  271 00000102 B507            PUSH             {R0, R1, R2, LR} ; save current
                                                             values of R0, R1, 
                                                            R2, LR
  272 00000104 4943            LDR              R1,=Command ; R1 = &Command (po
                                                            inter)
  273 00000106 F04F 020A       MOV              R2,#COMMAND_TUBE_STATUS ; R2 = 
                                                            COMMAND_TUBE_STATUS
                                                            
  274 0000010A 700A            STRB             R2,[R1]     ; [R1] = R2 (COMMAN
                                                            D_TUBE_STATUS)
  275 0000010C F04F 0201       MOV              R2,#1       ; R2 = 1 (number of
                                                             command bytes to s
                                                            end)
  276 00000110 F7FF FFFE       BL               MDB_SendAddress ; send the peri
                                                            pheral address
  277 00000114 F7FF FFFE       BL               MDB_SendCommand ; send pool com
                                                            mand with chk byte
  278 00000118 BD07            POP              {R0, R1, R2, PC} ; restore prev
                                                            ious value of R0 in
                                                            to R0, R1 into R1, 
                                                            and LR into PC (ret
                                                            urn)
  279 0000011A         
  280 0000011A         ;---------MDB_InitCoinChanger---------
  281 0000011A         ; Secuencia de inicializacion requerida para el Coin Cha
                       nger
  282 0000011A         ; Input : none
  283 0000011A         ; Output: none
  284 0000011A         ; Modifies: none, all used Register are pushed and poped
                       
  285 0000011A         MDB_InitCoinChanger
  286 0000011A B507            PUSH             {R0, R1, R2, LR} ; save current
                                                             values of R0, R1, 
                                                            R2, LR
  287 0000011C         ;reset all
  288 0000011C         InitSendBusReset
  289 0000011C F7FF FFFE       BL               MDB_SendBusReset
  290 00000120         ;wait after first pool



ARM Macro Assembler    Page 11 


  291 00000120 483D            LDR              R0,=InitTimerSetupDone ; Addres
                                                             to jump after Time
                                                            r_SetupTime
  292 00000122 F7FF FFFE       BL               Timer_SetupTime ; Timer 200ms, 
                                                            in: R0
  293 00000126         InitResetLoop
  294 00000126 E7FE            B                InitResetLoop ; loop for wait T
                                                            imer_SetupTime inte
                                                            rrupt
  295 00000128         InitTimerSetupDone
  296 00000128         ;send first pool to obtain "just reset" response
  297 00000128         InitSendPool
  298 00000128 F04F 0008       MOV              R0, #COIN_CHANGER_ADDR ; R0 = C
                                                            OIN_CHANGER_ADDR
  299 0000012C F7FF FFFE       BL               MDB_SendPool ; Send command poo
                                                            l to R0 (coin chang
                                                            er)
  300 00000130         InitGetPool
  301 00000130 483A            LDR              R0, =Pool_buf ; R0 = &Pool_buf 
                                                            (pointer)
  302 00000132 F7FF FFFE       BL               MDB_GetAnswer ; Get answer from
                                                             peripheral
  303 00000136 2802            CMP              R0,#2       ; R0 == 2? (receive
                                                            d 2 bytes - JustRes
                                                            et & Chk)
  304 00000138 D1F0            BNE              InitSendBusReset ; if not, go t
                                                            o InitNoResponsePoo
                                                            lLoop
  305 0000013A 4839            LDR              R0, =DataIn ; R0 = &DataIn (poi
                                                            nter)
  306 0000013C 6801            LDR              R1, [R0]    ; R1 = [R0]
  307 0000013E 290B            CMP              R1,#2_00001011 ; R1 == 00001011
                                                            B (Changer was Rese
                                                            t)
  308 00000140 D1EC            BNE              InitSendBusReset ; if not, go t
                                                            o InitSendBusReset
  309 00000142 F7FF FFFE       BL               MDB_SendACK ; Sending ACK
  310 00000146         ;send first setup, to obtain changer level and configura
                       tion information
  311 00000146         InitSendSetup
  312 00000146 F04F 0008       MOV              R0, #COIN_CHANGER_ADDR ; R0 = C
                                                            OIN_CHANGER_ADDR
  313 0000014A F7FF FFFE       BL               MDB_SendSetup ; Send command se
                                                            tup to R0
  314 0000014E         InitGetSetup
  315 0000014E 4835            LDR              R0, =Setup_buf ; R0 = &Setup_bu
                                                            f (pointer)
  316 00000150 F7FF FFFE       BL               MDB_GetAnswer ; Get answer from
                                                             peripheral
  317 00000154 2800            CMP              R0, #0      ; R0 == 0? (Chksum 
                                                            Failed)
  318 00000156 D102            BNE              InitSetupDone ; if not, go to I
                                                            nitSetupDone
  319 00000158 F7FF FFFE       BL               MDB_SendRET ; Sending RET
  320 0000015C E7F7            B                InitGetSetup ; go to InitGetSet
                                                            up, for getting ans
                                                            wer again
  321 0000015E         InitSetupDone
  322 0000015E F7FF FFFE       BL               MDB_SendACK ; Sending ACK



ARM Macro Assembler    Page 12 


  323 00000162         ;send expansion indentification, to obtain additional ch
                       anger information and options
  324 00000162         InitSendExpIdentification
  325 00000162 F04F 0008       MOV              R0, #COIN_CHANGER_ADDR ; R0 = C
                                                            OIN_CHANGER_ADDR
  326 00000166 F7FF FFFE       BL               MDB_SendExpIdentification ; Sen
                                                            d expansion command
                                                             Identification to 
                                                            R0
  327 0000016A         InitGetExpIdentification
  328 0000016A 482F            LDR              R0, =Identification_buf ; R0 = 
                                                            &Identification_buf
                                                             (pointer)
  329 0000016C F7FF FFFE       BL               MDB_GetAnswer ; Get answer from
                                                             peripheral
  330 00000170 2800            CMP              R0, #0      ; R0 == 0? (Chksum 
                                                            Failed)
  331 00000172 D102            BNE              InitExpIdentificationDone ; if 
                                                            not, go to InitExpI
                                                            dentificationDone
  332 00000174 F7FF FFFE       BL               MDB_SendRET ; Sending RET
  333 00000178 E7F7            B                InitGetExpIdentification ; go t
                                                            o InitGetIdentifica
                                                            tion, for getting a
                                                            nswer again
  334 0000017A         InitExpIdentificationDone
  335 0000017A F7FF FFFE       BL               MDB_SendACK ; Sending ACK
  336 0000017E         ;send Feature Enable, To enable desired options
  337 0000017E         InitSendExpFeatureEnable
  338 0000017E 4925            LDR              R1, =Command ; R1 = &Command (p
                                                            ointer)
  339 00000180 F640 7001       MOV              R0, #COMMAND_EXP_FEATURE_ENEABL
E 
                                                            ; R0 = COMMAND_EXP_
                                                            FEATURE_ENEABLE
  340 00000184 7008            STRB             R0, [R1]    ; [R1] = R0 (upgrad
                                                            e command buffer)
  341 00000186 4A28            LDR              R2, =Identification_buf ; R2 = 
                                                            &Identification_buf
                                                             (pointer)
  342 00000188 F8D2 001D       LDR              R0, [R2,#29] ; R0 = [R2+29] (fe
                                                            atures availables)
  343 0000018C F8C1 0001       STR              R0, [R1,#1] ; [R1+1] = R0 (acti
                                                            vate all features)
  344 00000190 F04F 0008       MOV              R0, #COIN_CHANGER_ADDR ; R0 = C
                                                            OIN_CHANGER_ADDR
  345 00000194 F04F 0205       MOV              R2, #5      ; R2 = 5 (number of
                                                             command/data bytes
                                                             to send)
  346 00000198 F7FF FFFE       BL               MDB_SendCommand ; envia a R0, R
                                                            2 comandos en &R1
  347 0000019C         InitGetExpFeatureEnable
  348 0000019C 4820            LDR              R0, =DataIn ; R0 = &DataIn (poi
                                                            nter)
  349 0000019E F7FF FFFE       BL               MDB_GetAnswer ; Get answer from
                                                             peripheral
  350 000001A2 481F            LDR              R0, =DataIn ; R0 = &DataIn (poi
                                                            nter)
  351 000001A4 6801            LDR              R1, [R0]    ; R1 = [R0] (answer



ARM Macro Assembler    Page 13 


                                                            )
  352 000001A6 2900            CMP              R1, #0      ; R1 == 00H ? (R1 =
                                                            = ACK?)
  353 000001A8 D1E9            BNE              InitSendExpFeatureEnable ; if n
                                                            ot, go to InitSendE
                                                            xpFeatureEnable
  354 000001AA         ;send expansion SEND DIAGNOSTIC STATUS, to request the c
                       hanger to report its current state of operation
  355 000001AA         InitSendExpSendDiagStatus
  356 000001AA F04F 0008       MOV              R0, #COIN_CHANGER_ADDR ; R0 = C
                                                            OIN_CHANGER_ADDR
  357 000001AE F7FF FF9C       BL               MDB_SendExpSendDiagStatus ; Sen
                                                            d expansion command
                                                             send diagnostic st
                                                            atus to R0
  358 000001B2         InitGetExpSendDiagStatus
  359 000001B2 481E            LDR              R0, =Send_diag_status_buf ; R0 
                                                            = &Send_diag_status
                                                            _buf (pointer)
  360 000001B4 F7FF FFFE       BL               MDB_GetAnswer ; Get answer from
                                                             peripheral
  361 000001B8 2800            CMP              R0, #0      ; R0 == 0? (Chksum 
                                                            Failed)
  362 000001BA D102            BNE              InitExpSendDiagStatusDone ; if 
                                                            not, go to InitExpS
                                                            endDiagStatusDone
  363 000001BC F7FF FFFE       BL               MDB_SendRET ; Sending RET
  364 000001C0 E7F7            B                InitGetExpSendDiagStatus ; go t
                                                            o InitGetExpSendDia
                                                            gStatus, for gettin
                                                            g answer again
  365 000001C2         InitExpSendDiagStatusDone
  366 000001C2 F7FF FFFE       BL               MDB_SendACK ; Sending ACK
  367 000001C6         ;wait before first TUBE STATUS
  368 000001C6 F04F 00FA       MOV              R0, #250
  369 000001CA F7FF FFFE       BL               delay
  370 000001CE         ;send TUBE STATUS, to obtain tube status / change inform
                       ation
  371 000001CE         InitSendTubeStatus
  372 000001CE F04F 0008       MOV              R0, #COIN_CHANGER_ADDR ; R0 = C
                                                            OIN_CHANGER_ADDR
  373 000001D2 F7FF FF96       BL               MDB_SendTubeStatus ; Send comma
                                                            nd Send Tube Status
                                                             to R0
  374 000001D6         InitGetTubeStatus
  375 000001D6 4816            LDR              R0, =Tube_status_buf ; R0 = &Tu
                                                            be_status_buf (poin
                                                            ter)
  376 000001D8 F7FF FFFE       BL               MDB_GetAnswer ; Get answer from
                                                             peripheral
  377 000001DC 2800            CMP              R0, #0      ; R0 == 0? (Chksum 
                                                            Failed)
  378 000001DE D102            BNE              InitTubeStatusDone ; if not, go
                                                             to InitTubeStatusD
                                                            one
  379 000001E0 F7FF FFFE       BL               MDB_SendRET ; Sending RET
  380 000001E4 E7F7            B                InitGetTubeStatus ; go to InitG
                                                            etTubeStatus, for g
                                                            etting answer again



ARM Macro Assembler    Page 14 


                                                            
  381 000001E6         InitTubeStatusDone
  382 000001E6 F7FF FFFE       BL               MDB_SendACK ; Sending ACK
  383 000001EA         ;send Coin type, to enable desired coin acceptance and d
                       isable manual coin payout if desired
  384 000001EA         InitSendCoinType
  385 000001EA 490A            LDR              R1, =Command ; R1 = &Command (p
                                                            ointer)
  386 000001EC F04F 000C       MOV              R0, #COMMAND_COIN_TYPE ; R0 = C
                                                            OMMAND_COIN_TYPE
  387 000001F0 7008            STRB             R0, [R1]    ; [R1] = R0 (upgrad
                                                            e command buffer)
  388 000001F2 4810            LDR              R0,=0x000FFFFF ; enable b0-b4 a
                                                            cepted coins, and a
                                                            ll coins to manual 
                                                            dispense
  389 000001F4 F8C1 0001       STR              R0, [R1,#1] ; [R1+1] = R0 (upgr
                                                            ade command buffer)
                                                            
  390 000001F8 F04F 0008       MOV              R0, #COIN_CHANGER_ADDR ; R0 = C
                                                            OIN_CHANGER_ADDR
  391 000001FC F04F 0205       MOV              R2, #5      ; R2 = 5 (number of
                                                             command/data bytes
                                                             to send)
  392 00000200 F7FF FFFE       BL               MDB_SendCommand ; envia a R0, R
                                                            2 comandos en &R1
  393 00000204         InitGetCoinType
  394 00000204 4806            LDR              R0, =DataIn ; R0 = &DataIn (poi
                                                            nter)
  395 00000206 F7FF FFFE       BL               MDB_GetAnswer ; Get answer from
                                                             peripheral
  396 0000020A 4805            LDR              R0, =DataIn ; R0 = &DataIn (poi
                                                            nter)
  397 0000020C 6801            LDR              R1, [R0]    ; R1 = [R0] (answer
                                                            )
  398 0000020E 2900            CMP              R1, #0      ; R1 == 00H ? (R1 =
                                                            = ACK?)
  399 00000210 D1EB            BNE              InitSendCoinType ; if not, go t
                                                            o InitSendExpFeatur
                                                            eEnable
  400 00000212         
  401 00000212 BD07            POP              {R0, R1, R2, PC} ; restore prev
                                                            ious value of R0 in
                                                            to R0, R1 into R1, 
                                                            R2 into R2 and LR i
                                                            nto PC (return)
  402 00000214         
  403 00000214                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  404 00000214                 END                          ; end of file
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 15 


              000FFFFF 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\mdb.d -o.\objects\mdb.o -IC:\Users\mode_\Documents\Fm
at\MicroControladores\KeilProjects\Cash_flow\RTE\_Target_1 -IC:\Keil_v5\ARM\PAC
K\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 -IC:\Keil_v5\ARM\CMSIS\Include --p
redefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 522" --predefine="
TM4C1294NCPDT SETA 1" --list=.\listings\mdb.lst mdb.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Command 00000000

Symbol: Command
   Definitions
      At line 53 in file mdb.s
   Uses
      At line 61 in file mdb.s
      At line 212 in file mdb.s
      At line 227 in file mdb.s
      At line 242 in file mdb.s
      At line 257 in file mdb.s
      At line 272 in file mdb.s
      At line 338 in file mdb.s
      At line 385 in file mdb.s

DATA 00000000

Symbol: DATA
   Definitions
      At line 51 in file mdb.s
   Uses
      None
Comment: DATA unused
DataIn 00000024

Symbol: DataIn
   Definitions
      At line 54 in file mdb.s
   Uses
      At line 62 in file mdb.s
      At line 305 in file mdb.s
      At line 348 in file mdb.s
      At line 350 in file mdb.s
      At line 394 in file mdb.s
      At line 396 in file mdb.s

Identification_buf 00000084

Symbol: Identification_buf
   Definitions
      At line 58 in file mdb.s
   Uses
      At line 66 in file mdb.s
      At line 328 in file mdb.s
      At line 341 in file mdb.s

Payout_status_buf 000000A6

Symbol: Payout_status_buf
   Definitions
      At line 59 in file mdb.s
   Uses
      At line 67 in file mdb.s
Comment: Payout_status_buf used once
Pool_buf 00000073

Symbol: Pool_buf
   Definitions
      At line 57 in file mdb.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 65 in file mdb.s
      At line 301 in file mdb.s

Send_diag_status_buf 000000B7

Symbol: Send_diag_status_buf
   Definitions
      At line 60 in file mdb.s
   Uses
      At line 68 in file mdb.s
      At line 359 in file mdb.s

Setup_buf 00000048

Symbol: Setup_buf
   Definitions
      At line 55 in file mdb.s
   Uses
      At line 63 in file mdb.s
      At line 315 in file mdb.s

Tube_status_buf 00000060

Symbol: Tube_status_buf
   Definitions
      At line 56 in file mdb.s
   Uses
      At line 64 in file mdb.s
      At line 375 in file mdb.s

9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 82 in file mdb.s
   Uses
      None
Comment: .text unused
InitExpIdentificationDone 0000017A

Symbol: InitExpIdentificationDone
   Definitions
      At line 334 in file mdb.s
   Uses
      At line 331 in file mdb.s
Comment: InitExpIdentificationDone used once
InitExpSendDiagStatusDone 000001C2

Symbol: InitExpSendDiagStatusDone
   Definitions
      At line 365 in file mdb.s
   Uses
      At line 362 in file mdb.s
Comment: InitExpSendDiagStatusDone used once
InitGetCoinType 00000204

Symbol: InitGetCoinType
   Definitions
      At line 393 in file mdb.s
   Uses
      None
Comment: InitGetCoinType unused
InitGetExpFeatureEnable 0000019C

Symbol: InitGetExpFeatureEnable
   Definitions
      At line 347 in file mdb.s
   Uses
      None
Comment: InitGetExpFeatureEnable unused
InitGetExpIdentification 0000016A

Symbol: InitGetExpIdentification
   Definitions
      At line 327 in file mdb.s
   Uses
      At line 333 in file mdb.s
Comment: InitGetExpIdentification used once
InitGetExpSendDiagStatus 000001B2

Symbol: InitGetExpSendDiagStatus
   Definitions
      At line 358 in file mdb.s
   Uses
      At line 364 in file mdb.s
Comment: InitGetExpSendDiagStatus used once
InitGetPool 00000130

Symbol: InitGetPool



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 300 in file mdb.s
   Uses
      None
Comment: InitGetPool unused
InitGetSetup 0000014E

Symbol: InitGetSetup
   Definitions
      At line 314 in file mdb.s
   Uses
      At line 320 in file mdb.s
Comment: InitGetSetup used once
InitGetTubeStatus 000001D6

Symbol: InitGetTubeStatus
   Definitions
      At line 374 in file mdb.s
   Uses
      At line 380 in file mdb.s
Comment: InitGetTubeStatus used once
InitResetLoop 00000126

Symbol: InitResetLoop
   Definitions
      At line 293 in file mdb.s
   Uses
      At line 294 in file mdb.s
Comment: InitResetLoop used once
InitSendBusReset 0000011C

Symbol: InitSendBusReset
   Definitions
      At line 288 in file mdb.s
   Uses
      At line 304 in file mdb.s
      At line 308 in file mdb.s

InitSendCoinType 000001EA

Symbol: InitSendCoinType
   Definitions
      At line 384 in file mdb.s
   Uses
      At line 399 in file mdb.s
Comment: InitSendCoinType used once
InitSendExpFeatureEnable 0000017E

Symbol: InitSendExpFeatureEnable
   Definitions
      At line 337 in file mdb.s
   Uses
      At line 353 in file mdb.s
Comment: InitSendExpFeatureEnable used once
InitSendExpIdentification 00000162

Symbol: InitSendExpIdentification
   Definitions
      At line 324 in file mdb.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      None
Comment: InitSendExpIdentification unused
InitSendExpSendDiagStatus 000001AA

Symbol: InitSendExpSendDiagStatus
   Definitions
      At line 355 in file mdb.s
   Uses
      None
Comment: InitSendExpSendDiagStatus unused
InitSendPool 00000128

Symbol: InitSendPool
   Definitions
      At line 297 in file mdb.s
   Uses
      None
Comment: InitSendPool unused
InitSendSetup 00000146

Symbol: InitSendSetup
   Definitions
      At line 311 in file mdb.s
   Uses
      None
Comment: InitSendSetup unused
InitSendTubeStatus 000001CE

Symbol: InitSendTubeStatus
   Definitions
      At line 371 in file mdb.s
   Uses
      None
Comment: InitSendTubeStatus unused
InitSetupDone 0000015E

Symbol: InitSetupDone
   Definitions
      At line 321 in file mdb.s
   Uses
      At line 318 in file mdb.s
Comment: InitSetupDone used once
InitTimerSetupDone 00000128

Symbol: InitTimerSetupDone
   Definitions
      At line 295 in file mdb.s
   Uses
      At line 291 in file mdb.s
Comment: InitTimerSetupDone used once
InitTubeStatusDone 000001E6

Symbol: InitTubeStatusDone
   Definitions
      At line 381 in file mdb.s
   Uses
      At line 378 in file mdb.s
Comment: InitTubeStatusDone used once



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

MDB_GetAnswer 0000005E

Symbol: MDB_GetAnswer
   Definitions
      At line 165 in file mdb.s
   Uses
      At line 75 in file mdb.s
      At line 302 in file mdb.s
      At line 316 in file mdb.s
      At line 329 in file mdb.s
      At line 349 in file mdb.s
      At line 360 in file mdb.s
      At line 376 in file mdb.s
      At line 395 in file mdb.s

MDB_InitCoinChanger 0000011A

Symbol: MDB_InitCoinChanger
   Definitions
      At line 285 in file mdb.s
   Uses
      At line 77 in file mdb.s
Comment: MDB_InitCoinChanger used once
MDB_SendACK 0000003A

Symbol: MDB_SendACK
   Definitions
      At line 130 in file mdb.s
   Uses
      At line 72 in file mdb.s
      At line 309 in file mdb.s
      At line 322 in file mdb.s
      At line 335 in file mdb.s
      At line 366 in file mdb.s
      At line 382 in file mdb.s

MDB_SendAddress 00000000

Symbol: MDB_SendAddress
   Definitions
      At line 91 in file mdb.s
   Uses
      At line 70 in file mdb.s
      At line 216 in file mdb.s
      At line 231 in file mdb.s
      At line 246 in file mdb.s
      At line 261 in file mdb.s
      At line 276 in file mdb.s

MDB_SendBusReset 00000090

Symbol: MDB_SendBusReset
   Definitions
      At line 195 in file mdb.s
   Uses
      At line 76 in file mdb.s
      At line 289 in file mdb.s

MDB_SendCommand 00000010



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols


Symbol: MDB_SendCommand
   Definitions
      At line 103 in file mdb.s
   Uses
      At line 71 in file mdb.s
      At line 217 in file mdb.s
      At line 232 in file mdb.s
      At line 247 in file mdb.s
      At line 262 in file mdb.s
      At line 277 in file mdb.s
      At line 346 in file mdb.s
      At line 392 in file mdb.s

MDB_SendExpIdentification 000000D2

Symbol: MDB_SendExpIdentification
   Definitions
      At line 240 in file mdb.s
   Uses
      At line 80 in file mdb.s
      At line 326 in file mdb.s

MDB_SendExpSendDiagStatus 000000EA

Symbol: MDB_SendExpSendDiagStatus
   Definitions
      At line 255 in file mdb.s
   Uses
      At line 357 in file mdb.s
Comment: MDB_SendExpSendDiagStatus used once
MDB_SendNAK 00000052

Symbol: MDB_SendNAK
   Definitions
      At line 152 in file mdb.s
   Uses
      At line 74 in file mdb.s
Comment: MDB_SendNAK used once
MDB_SendPool 000000A2

Symbol: MDB_SendPool
   Definitions
      At line 210 in file mdb.s
   Uses
      At line 78 in file mdb.s
      At line 299 in file mdb.s

MDB_SendRET 00000046

Symbol: MDB_SendRET
   Definitions
      At line 141 in file mdb.s
   Uses
      At line 73 in file mdb.s
      At line 319 in file mdb.s
      At line 332 in file mdb.s
      At line 363 in file mdb.s
      At line 379 in file mdb.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols


MDB_SendSetup 000000BA

Symbol: MDB_SendSetup
   Definitions
      At line 225 in file mdb.s
   Uses
      At line 79 in file mdb.s
      At line 313 in file mdb.s

MDB_SendTubeStatus 00000102

Symbol: MDB_SendTubeStatus
   Definitions
      At line 270 in file mdb.s
   Uses
      At line 373 in file mdb.s
Comment: MDB_SendTubeStatus used once
getAnswerDone 0000008E

Symbol: getAnswerDone
   Definitions
      At line 186 in file mdb.s
   Uses
      At line 183 in file mdb.s
Comment: getAnswerDone used once
getAnswerEnd 00000080

Symbol: getAnswerEnd
   Definitions
      At line 179 in file mdb.s
   Uses
      At line 176 in file mdb.s
Comment: getAnswerEnd used once
getAnswerLoop 0000006E

Symbol: getAnswerLoop
   Definitions
      At line 171 in file mdb.s
   Uses
      At line 178 in file mdb.s
Comment: getAnswerLoop used once
outCommandDone 00000032

Symbol: outCommandDone
   Definitions
      At line 118 in file mdb.s
   Uses
      At line 111 in file mdb.s
Comment: outCommandDone used once
outCommandLoop 0000001C

Symbol: outCommandLoop
   Definitions
      At line 109 in file mdb.s
   Uses
      At line 117 in file mdb.s
Comment: outCommandLoop used once
sendBusResetDone 0000009C



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols


Symbol: sendBusResetDone
   Definitions
      At line 201 in file mdb.s
   Uses
      None
Comment: sendBusResetDone unused
sendBusResetLoop 0000009A

Symbol: sendBusResetLoop
   Definitions
      At line 199 in file mdb.s
   Uses
      At line 200 in file mdb.s
Comment: sendBusResetLoop used once
42 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

CMDLEN 00000024

Symbol: CMDLEN
   Definitions
      At line 52 in file mdb.s
   Uses
      At line 53 in file mdb.s
      At line 54 in file mdb.s

COIN_CHANGER_ADDR 00000008

Symbol: COIN_CHANGER_ADDR
   Definitions
      At line 8 in file mdb.s
   Uses
      At line 298 in file mdb.s
      At line 312 in file mdb.s
      At line 325 in file mdb.s
      At line 344 in file mdb.s
      At line 356 in file mdb.s
      At line 372 in file mdb.s
      At line 390 in file mdb.s

COMMAND_COIN_TYPE 0000000C

Symbol: COMMAND_COIN_TYPE
   Definitions
      At line 13 in file mdb.s
   Uses
      At line 386 in file mdb.s
Comment: COMMAND_COIN_TYPE used once
COMMAND_DISPENSE 0000000D

Symbol: COMMAND_DISPENSE
   Definitions
      At line 14 in file mdb.s
   Uses
      None
Comment: COMMAND_DISPENSE unused
COMMAND_EXPANSION 0000000F

Symbol: COMMAND_EXPANSION
   Definitions
      At line 15 in file mdb.s
   Uses
      None
Comment: COMMAND_EXPANSION unused
COMMAND_EXP_FEATURE_ENEABLE 00000F01

Symbol: COMMAND_EXP_FEATURE_ENEABLE
   Definitions
      At line 17 in file mdb.s
   Uses
      At line 339 in file mdb.s
Comment: COMMAND_EXP_FEATURE_ENEABLE used once
COMMAND_EXP_IDENTIFICATION 00000F00

Symbol: COMMAND_EXP_IDENTIFICATION
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 16 in file mdb.s
   Uses
      At line 243 in file mdb.s
Comment: COMMAND_EXP_IDENTIFICATION used once
COMMAND_EXP_PAYOUT 00000F02

Symbol: COMMAND_EXP_PAYOUT
   Definitions
      At line 18 in file mdb.s
   Uses
      None
Comment: COMMAND_EXP_PAYOUT unused
COMMAND_EXP_PAYOUT_STATUS 00000F03

Symbol: COMMAND_EXP_PAYOUT_STATUS
   Definitions
      At line 19 in file mdb.s
   Uses
      None
Comment: COMMAND_EXP_PAYOUT_STATUS unused
COMMAND_EXP_PAYOUT_VALUE_POLL 00000F04

Symbol: COMMAND_EXP_PAYOUT_VALUE_POLL
   Definitions
      At line 20 in file mdb.s
   Uses
      None
Comment: COMMAND_EXP_PAYOUT_VALUE_POLL unused
COMMAND_EXP_SEND_DIAGNOSTIC_STATUS 00000F05

Symbol: COMMAND_EXP_SEND_DIAGNOSTIC_STATUS
   Definitions
      At line 21 in file mdb.s
   Uses
      At line 258 in file mdb.s
Comment: COMMAND_EXP_SEND_DIAGNOSTIC_STATUS used once
COMMAND_POLL 0000000B

Symbol: COMMAND_POLL
   Definitions
      At line 12 in file mdb.s
   Uses
      At line 213 in file mdb.s
Comment: COMMAND_POLL used once
COMMAND_RESET 00000008

Symbol: COMMAND_RESET
   Definitions
      At line 9 in file mdb.s
   Uses
      None
Comment: COMMAND_RESET unused
COMMAND_SETUP 00000009

Symbol: COMMAND_SETUP
   Definitions
      At line 10 in file mdb.s
   Uses
      At line 228 in file mdb.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

Comment: COMMAND_SETUP used once
COMMAND_TUBE_STATUS 0000000A

Symbol: COMMAND_TUBE_STATUS
   Definitions
      At line 11 in file mdb.s
   Uses
      At line 273 in file mdb.s
Comment: COMMAND_TUBE_STATUS used once
15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

Timer_BreakTime 00000000

Symbol: Timer_BreakTime
   Definitions
      At line 42 in file mdb.s
   Uses
      At line 198 in file mdb.s
Comment: Timer_BreakTime used once
Timer_NoResponseTime 00000000

Symbol: Timer_NoResponseTime
   Definitions
      At line 45 in file mdb.s
   Uses
      None
Comment: Timer_NoResponseTime unused
Timer_NoResponseTime_stop 00000000

Symbol: Timer_NoResponseTime_stop
   Definitions
      At line 46 in file mdb.s
   Uses
      None
Comment: Timer_NoResponseTime_stop unused
Timer_PollingTime 00000000

Symbol: Timer_PollingTime
   Definitions
      At line 44 in file mdb.s
   Uses
      None
Comment: Timer_PollingTime unused
Timer_ResponseTime 00000000

Symbol: Timer_ResponseTime
   Definitions
      At line 40 in file mdb.s
   Uses
      None
Comment: Timer_ResponseTime unused
Timer_ResponseTime_stop 00000000

Symbol: Timer_ResponseTime_stop
   Definitions
      At line 41 in file mdb.s
   Uses
      None
Comment: Timer_ResponseTime_stop unused
Timer_SetupTime 00000000

Symbol: Timer_SetupTime
   Definitions
      At line 43 in file mdb.s
   Uses
      At line 292 in file mdb.s
Comment: Timer_SetupTime used once
UART0_Handler 00000000

Symbol: UART0_Handler



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Definitions
      At line 27 in file mdb.s
   Uses
      None
Comment: UART0_Handler unused
UART_HighStickParity 00000000

Symbol: UART_HighStickParity
   Definitions
      At line 34 in file mdb.s
   Uses
      At line 93 in file mdb.s
Comment: UART_HighStickParity used once
UART_InChar 00000000

Symbol: UART_InChar
   Definitions
      At line 25 in file mdb.s
   Uses
      At line 172 in file mdb.s
Comment: UART_InChar used once
UART_InString 00000000

Symbol: UART_InString
   Definitions
      At line 33 in file mdb.s
   Uses
      None
Comment: UART_InString unused
UART_InUDec 00000000

Symbol: UART_InUDec
   Definitions
      At line 29 in file mdb.s
   Uses
      None
Comment: UART_InUDec unused
UART_InUHex 00000000

Symbol: UART_InUHex
   Definitions
      At line 31 in file mdb.s
   Uses
      None
Comment: UART_InUHex unused
UART_Init 00000000

Symbol: UART_Init
   Definitions
      At line 24 in file mdb.s
   Uses
      None
Comment: UART_Init unused
UART_LowStickParity 00000000

Symbol: UART_LowStickParity
   Definitions
      At line 35 in file mdb.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
External symbols

      At line 95 in file mdb.s
Comment: UART_LowStickParity used once
UART_OutChar 00000000

Symbol: UART_OutChar
   Definitions
      At line 26 in file mdb.s
   Uses
      At line 94 in file mdb.s
      At line 114 in file mdb.s
      At line 120 in file mdb.s
      At line 133 in file mdb.s
      At line 144 in file mdb.s
      At line 155 in file mdb.s

UART_OutString 00000000

Symbol: UART_OutString
   Definitions
      At line 28 in file mdb.s
   Uses
      None
Comment: UART_OutString unused
UART_OutUDec 00000000

Symbol: UART_OutUDec
   Definitions
      At line 30 in file mdb.s
   Uses
      None
Comment: UART_OutUDec unused
UART_OutUHex 00000000

Symbol: UART_OutUHex
   Definitions
      At line 32 in file mdb.s
   Uses
      None
Comment: UART_OutUHex unused
UART_SendBreak 00000000

Symbol: UART_SendBreak
   Definitions
      At line 36 in file mdb.s
   Uses
      At line 197 in file mdb.s
Comment: UART_SendBreak used once
UART_SendBreak_Disable 00000000

Symbol: UART_SendBreak_Disable
   Definitions
      At line 37 in file mdb.s
   Uses
      At line 202 in file mdb.s
Comment: UART_SendBreak_Disable used once
delay 00000000

Symbol: delay
   Definitions



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
External symbols

      At line 49 in file mdb.s
   Uses
      At line 369 in file mdb.s
Comment: delay used once
22 symbols
424 symbols in table
