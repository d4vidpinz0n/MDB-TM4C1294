


ARM Macro Assembler    Page 1 


    1 00000000         ; PortD.s
    2 00000000         ; Runs on TM4C1294
    3 00000000         ; Configura el puertoD para funcionar con un teclado mat
                       ricial de 4x4
    4 00000000         ; Configura los pines D0-D3 como entrada y D4-D7 como sa
                       lida
    5 00000000         ; activa pull-up para los pines de entrada
    6 00000000         ; activa interrupciones por down_edge en pines D0-D3
    7 00000000         ; conexiones:
    8 00000000         ;  1 2 3 4 5 6 7 8
    9 00000000         ;  D2 D0 D1 D3 D6 D7 D4 D5
   10 00000000         ; David Pinzon
   11 00000000         ; May 28, 2017
   12 00000000         
   13 00000000         ;THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHET
                       HER EXPRESS, IMPLIED
   14 00000000         ;OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WA
                       RRANTIES OF
   15 00000000         ;MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE AP
                       PLY TO THIS SOFTWARE.
   16 00000000         ;VALVANO SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR 
                       SPECIAL, INCIDENTAL,
   17 00000000         ;OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
   18 00000000         
   19 00000000 4005B000 
                       GPIO_PORTD_DATA
                               EQU              0x4005B000  ;GPIO Data
   20 00000000         
   21 00000000 4005B03C 
                       GPIO_PORTD_0123
                               EQU              0x4005B03C  ;GPIO PORTD Mask D0
                                                            ,D1,D2,D3
   22 00000000 4005B3C0 
                       GPIO_PORTD_4567
                               EQU              0x4005B3C0  ;GPIO PORTD Mask D4
                                                            ,D5,D6,D7
   23 00000000         
   24 00000000 4005B400 
                       GPIO_PORTD_DIR
                               EQU              0x4005B400  ;GPIO Dir
   25 00000000 4005B404 
                       GPIO_PORTD_IS
                               EQU              0x4005B404  ;GPIO Interrupt Sen
                                                            se
   26 00000000 4005B408 
                       GPIO_PORTD_IBE
                               EQU              0x4005B408  ;GPIO Interrupt Bot
                                                            h Edges
   27 00000000 4005B40C 
                       GPIO_PORTD_IEV
                               EQU              0x4005B40C  ;GPIO Interrupt Eve
                                                            nt
   28 00000000 4005B410 
                       GPIO_PORTD_IM
                               EQU              0x4005B410  ;GPIO Interrupt Mas
                                                            k
   29 00000000 4005B414 
                       GPIO_PORTD_RIS
                               EQU              0x4005B414  ;GPIO Raw Interrupt



ARM Macro Assembler    Page 2 


                                                             Status
   30 00000000 4005B418 
                       GPIO_PORTD_MIS
                               EQU              0x4005B418  ;GPIO Masked Interr
                                                            upt Status
   31 00000000 4005B41C 
                       GPIO_PORTD_ICR
                               EQU              0x4005B41C  ;GPIO Interrupt Cle
                                                            ar
   32 00000000 4005B420 
                       GPIO_PORTD_AFSEL
                               EQU              0x4005B420  ;GPIO Alternate Fun
                                                            ction
   33 00000000 4005B510 
                       GPIO_PORTD_PUR
                               EQU              0x4005B510  ;GPIO Pull-Up Selec
                                                            t
   34 00000000 4005B514 
                       GPIO_PORTD_PDR
                               EQU              0x4005B514  ;GPIO Pull-Down Sel
                                                            ect
   35 00000000 4005B51C 
                       GPIO_PORTD_DEN
                               EQU              0x4005B51C  ;GPIO Digital Enabl
                                                            e
   36 00000000 4005B528 
                       GPIO_PORTD_AMSEL
                               EQU              0x4005B528  ;GPIO Analog Mode S
                                                            elect
   37 00000000 4005B52C 
                       GPIO_PORTD_PCTL
                               EQU              0x4005B52C  ;GPIO Port Control
   38 00000000 4005B538 
                       GPIO_PORTD_SI
                               EQU              0x4005B538  ;GPIO Select Interr
                                                            upt
   39 00000000         
   40 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608  ;General-Purpose In
                                                            put/Output Run Mode
                                                             Clock Gating Contr
                                                            ol
   41 00000000 400FEA08 
                       SYSCTL_PRGPIO_R
                               EQU              0x400FEA08  ;General-Purpose In
                                                            put/Output Peripher
                                                            al Ready
   42 00000000         
   43 00000000 00000008 
                       SYSCTL_RCGCGPIO_R3
                               EQU              0x00000008  ;GPIO Port D Run Mo
                                                            de Clock Gating Con
                                                            trol
   44 00000000 00000008 
                       SYSCTL_PRGPIO_R3
                               EQU              0x00000008  ;GPIO Port D Periph
                                                            eral Ready
   45 00000000         



ARM Macro Assembler    Page 3 


   46 00000000 E000E100 
                       NVIC_EN1_R
                               EQU              0xE000E100  ; Interrupt 0 to 31
                                                             Set Enable Registe
                                                            r
   47 00000000 00000008 
                       NVIC_EN0_INT3
                               EQU              0x00000008  ; Interrupt 3 enabl
                                                            e (GPIO PORT D)
   48 00000000         
   49 00000000         
   50 00000000                 AREA             DATA, ALIGN=2
   51 00000000 00      KeyInput
                               SPACE            1
   52 00000001         
   53 00000001                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   54 00000000                 THUMB
   55 00000000                 EXPORT           KeyInput
   56 00000000         ;functions to export
   57 00000000                 EXPORT           InitPortD
   58 00000000                 EXPORT           PORTD_Handler
   59 00000000                 EXPORT           PortD_clearInterrupt
   60 00000000                 EXPORT           PortD_detectInterrupt
   61 00000000         
   62 00000000         ;---------InitPortD---------
   63 00000000         ; Rutina de inicializacion del puerto D
   64 00000000         ; Input : none
   65 00000000         ; Output: none
   66 00000000         ; Modifies: none, all used Register are pushed and poped
                       
   67 00000000         InitPortD
   68 00000000 B503            PUSH             {R0,R1,LR}  ; save current valu
                                                            es of R0,R1,LR
   69 00000002         ; activate clock for Port D
   70 00000002 4970            LDR              R1, =SYSCTL_RCGCGPIO_R ; R1 = S
                                                            YSCTL_RCGCGPIO_R (p
                                                            ointer)
   71 00000004 6808            LDR              R0, [R1]    ; R0 = [R1] (value)
                                                            
   72 00000006 F040 0008       ORR              R0, R0, #SYSCTL_RCGCGPIO_R3 ; R
                                                            0 = R0|SYSCTL_RCGCG
                                                            PIO_R3
   73 0000000A 6008            STR              R0, [R1]    ; [R1] = R0
   74 0000000C         
   75 0000000C         ; allow time for clock to stabilize
   76 0000000C 496E            LDR              R1, =SYSCTL_PRGPIO_R ; R1 = SYS
                                                            CTL_PRGPIO_R (point
                                                            er)
   77 0000000E         GPIOJinitloop
   78 0000000E 6808            LDR              R0, [R1]    ; R0 = [R1] (value)
                                                            
   79 00000010 F010 0008       ANDS             R0, R0, #SYSCTL_PRGPIO_R3 ; R0 
                                                            = R0&SYSCTL_PRGPIO_
                                                            R3
   80 00000014 D0FB            BEQ              GPIOJinitloop ; if(R0 == 0), ke
                                                            ep polling
   81 00000016         
   82 00000016         ; set direction register



ARM Macro Assembler    Page 4 


   83 00000016 496D            LDR              R1, =GPIO_PORTD_DIR ; R1 = GPIO
                                                            _PORTD_DIR (pointer
                                                            )
   84 00000018 6808            LDR              R0, [R1]    ; R0 = [R1] (value)
                                                            
   85 0000001A F020 000F       BIC              R0, R0, #0x000F ; R0 = R0&~0x0F
                                                             (make D0-D3 in)
   86 0000001E F040 00F0       ORR              R0, R0, #0x00F0 ; R0 = R0&0xF0 
                                                            (make D4-D7 out)
   87 00000022 6008            STR              R0, [R1]    ; [R1] = R0
   88 00000024         
   89 00000024         ;alternative functions select
   90 00000024 496A            LDR              R1, =GPIO_PORTD_AFSEL ; R1 = GP
                                                            IO_PORTD_AFSEL (poi
                                                            nter)
   91 00000026 6808            LDR              R0, [R1]    ; R0 = [R1] (value)
                                                            
   92 00000028 F020 00FF       BIC              R0, R0, #0x00FF ; R0 = R0&~0x00
                                                            FF (disable alterna
                                                            tive functions D0-D
                                                            7)
   93 0000002C 6008            STR              R0, [R1]    ; [R1] = R0
   94 0000002E         
   95 0000002E         ; set pull-up register
   96 0000002E 4969            LDR              R1, =GPIO_PORTD_PUR ; R1 = GPIO
                                                            _PORTD_PUR (pointer
                                                            )
   97 00000030 6808            LDR              R0, [R1]    ; R0 = [R1] (value)
                                                            
   98 00000032 F040 000F       ORR              R0, R0, #0x000F ; R0 = R0|0x0F 
                                                            (enable pull-up on 
                                                            D0-D3)
   99 00000036 6008            STR              R0, [R1]    ; [R1] = R0
  100 00000038         
  101 00000038         ; set digital enable register
  102 00000038 4967            LDR              R1, =GPIO_PORTD_DEN ; R1 = GPIO
                                                            _PORTD_DEN (pointer
                                                            )
  103 0000003A 6808            LDR              R0, [R1]    ; R0 = [R1] (value)
                                                            
  104 0000003C F040 00FF       ORR              R0, R0, #0x00FF ; R0 = R0|0xFF 
                                                            (enable digital I/O
                                                             on D0-D7)
  105 00000040 6008            STR              R0, [R1]    ; [R1] = R0
  106 00000042         
  107 00000042         ; analog mode select register
  108 00000042 4966            LDR              R1, =GPIO_PORTD_AMSEL ; R1 = GP
                                                            IO_PORTD_AMSEL (poi
                                                            nter)
  109 00000044 6808            LDR              R0, [R1]    ; R0 = [R1] (value)
                                                            
  110 00000046 F020 00FF       BIC              R0, R0, #0x00FF ; R0 = R0&~0xFF
                                                             (disable analog fu
                                                            nctionality on D0-D
                                                            7)
  111 0000004A 6008            STR              R0, [R1]    ; [R1] = R0
  112 0000004C         
  113 0000004C         ; interrupt sense
  114 0000004C 4964            LDR              R1,=GPIO_PORTD_IS ; R1 = GPIO_P



ARM Macro Assembler    Page 5 


                                                            ORTD_IS (pointer)
  115 0000004E 6808            LDR              R0,[R1]     ; R0 = [R1] (value)
                                                            
  116 00000050 F020 000F       BIC              R0, R0, #0x0F ; R0 = R0&~0x0F (
                                                            edge sensitive on D
                                                            0-D3)
  117 00000054 6008            STR              R0,[R1]     ; [R1] = R0
  118 00000056         
  119 00000056         ; interrupt event
  120 00000056 4963            LDR              R1,=GPIO_PORTD_IEV ; R1 = GPIO_
                                                            PORTD_IEV (pointer)
                                                            
  121 00000058 6808            LDR              R0,[R1]     ; R0 = [R1] (value)
                                                            
  122 0000005A F020 000F       BIC              R0, R0, #0x0F ; R0 = R0&~0x0F (
                                                            falling edge on D0-
                                                            D3)
  123 0000005E 6008            STR              R0,[R1]     ; [R1] = R0
  124 00000060         
  125 00000060         ; interrupt mask
  126 00000060 4961            LDR              R1,=GPIO_PORTD_IM ; R1 = GPIO_P
                                                            ORTD_IM (pointer)
  127 00000062 6808            LDR              R0,[R1]     ; R0 = [R1] (value)
                                                            
  128 00000064 F040 000F       ORR              R0, R0, #0x0F ; R0 = R0&~0x0F (
                                                            interrupt on D0-D3 
                                                            sent to the control
                                                            ler)
  129 00000068 6008            STR              R0,[R1]     ; [R1] = R0
  130 0000006A         
  131 0000006A         ; enable interrupt 3 in NVIC
  132 0000006A 4960            LDR              R1, =NVIC_EN1_R ; R1 = &NVIC_EN
                                                            1_R (pointer)
  133 0000006C F04F 0008       LDR              R0, =NVIC_EN0_INT3 ; R0 = NVIC_
                                                            EN0_INT60 (zeros wr
                                                            itten to enable reg
                                                            ister have no effec
                                                            t)
  134 00000070 6008            STR              R0, [R1]    ; [R1] = R0
  135 00000072         
  136 00000072         ; clear D4-D7
  137 00000072 495F            LDR              R1,=GPIO_PORTD_4567 ; R1 = GPIO
                                                            _PORTD_4567 (pointe
                                                            r)
  138 00000074 F04F 0000       MOV              R0,#0x00    ; R0 = 0x00
  139 00000078 6008            STR              R0,[R1]     ; [R1] = R0 (clear 
                                                            D4-D7)
  140 0000007A         
  141 0000007A BD03            POP              {R0,R1,PC}  ; restore previuos 
                                                            values
  142 0000007C         
  143 0000007C         ;---------PORTD_Handler---------
  144 0000007C         ; Rutina de interrupcion para detectar tecla presionada
  145 0000007C         ; Input : none
  146 0000007C         ; Output: none (character stored in KeyInput)
  147 0000007C         ; Modifies: none, all used Register are pushed and poped
                       
  148 0000007C         PORTD_Handler
  149 0000007C B507            PUSH             {R0,R1,R2,LR} ; save current va



ARM Macro Assembler    Page 6 


                                                            lues of R0,R1,LR
  150 0000007E 495D            LDR              R1,=GPIO_PORTD_RIS ; R1 = &GPIO
                                                            _PORTD_RIS (pointer
                                                            )
  151 00000080 6808            LDR              R0, [R1]    ; R0 = [R1] (GPIO_P
                                                            ORTD_RIS) 
  152 00000082         ;check raw interrupt to find the bit interrupt
  153 00000082 2801            CMP              R0, #0x01   ; R0 == 0x01 ? (D0 
                                                            interrupt)
  154 00000084 D116            BNE              handler_check_D1 ; if not, go t
                                                            o handler_check_D1
  155 00000086         ; acknowledge D0 interrupt
  156 00000086 F000 F872       BL               detect_line ; R0 = (line detect
                                                            ed)
  157 0000008A 495B            LDR              R1,=KeyInput ; R1 = &KeyInput (
                                                            pointer)
  158 0000008C F04F 0236       MOV              R2, #'6'    ; R2 = '6'
  159 00000090 2804            CMP              R0,#4       ; R0 == 4 ?(KEY D0,
                                                            D4?)
  160 00000092 BF08 700A       STRBEQ           R2,[R1]     ; if so, [R1] = R2
  161 00000096 F04F 0233       MOV              R2, #'3'    ; R2 = '3'
  162 0000009A 2805            CMP              R0,#5       ; R0 == 5 ?(KEY D0,
                                                            D5?)
  163 0000009C BF08 700A       STRBEQ           R2,[R1]     ; if so, [R1] = R2
  164 000000A0 F04F 0223       MOV              R2, #'#'    ; R2 = '#'
  165 000000A4 2806            CMP              R0,#6       ; R0 == 6 ?(KEY D0,
                                                            D6?)
  166 000000A6 BF08 700A       STRBEQ           R2,[R1]     ; if so, [R1] = R2
  167 000000AA F04F 0239       MOV              R2, #'9'    ; R2 = '9'
  168 000000AE 2807            CMP              R0,#7       ; R0 == 7 ?(KEY D0,
                                                            D7?)
  169 000000B0 BF08 700A       STRBEQ           R2,[R1]     ; if so, [R1] = R2
  170 000000B4         handler_check_D1
  171 000000B4 2802            CMP              R0, #0x02   ; R0 == 0x02 ? (D1 
                                                            interrupt)
  172 000000B6 D116            BNE              handler_check_D2 ; if not, go t
                                                            o handler_check_D2
  173 000000B8         ; acknowledge D1 interrupt
  174 000000B8 F000 F859       BL               detect_line ; R0 = (line detect
                                                            ed)
  175 000000BC 494E            LDR              R1,=KeyInput ; R1 = &KeyInput (
                                                            pointer)
  176 000000BE F04F 0235       MOV              R2, #'5'    ; R2 = '5'
  177 000000C2 2804            CMP              R0,#4       ; R0 == 4 ?(KEY D1,
                                                            D4?)
  178 000000C4 BF08 700A       STRBEQ           R2,[R1]     ; if so, [R1] = R2
  179 000000C8 F04F 0232       MOV              R2, #'2'    ; R2 = '2'
  180 000000CC 2805            CMP              R0,#5       ; R0 == 5 ?(KEY D1,
                                                            D5?)
  181 000000CE BF08 700A       STRBEQ           R2,[R1]     ; if so, [R1] = R2
  182 000000D2 F04F 0230       MOV              R2, #'0'    ; R2 = '0'
  183 000000D6 2806            CMP              R0,#6       ; R0 == 6 ?(KEY D1,
                                                            D6?)
  184 000000D8 BF08 700A       STRBEQ           R2,[R1]     ; if so, [R1] = R2
  185 000000DC F04F 0238       MOV              R2, #'8'    ; R2 = '8'
  186 000000E0 2807            CMP              R0,#7       ; R0 == 7 ?(KEY D1,
                                                            D7?)
  187 000000E2 BF08 700A       STRBEQ           R2,[R1]     ; if so, [R1] = R2 
                                                            



ARM Macro Assembler    Page 7 


  188 000000E6         handler_check_D2
  189 000000E6 2804            CMP              R0, #0x04   ; R0 == 0x04 ? (D2 
                                                            interrupt)
  190 000000E8 D116            BNE              handler_check_D3 ; if not, go t
                                                            o handler_check_D3
  191 000000EA         ; acknowledge D2 interrupt
  192 000000EA F000 F840       BL               detect_line ; R0 = (line detect
                                                            ed)
  193 000000EE 4942            LDR              R1,=KeyInput ; R1 = &KeyInput (
                                                            pointer)
  194 000000F0 F04F 0242       MOV              R2, #'B'    ; R2 = 'B'
  195 000000F4 2804            CMP              R0,#4       ; R0 == 4 ?(KEY D2,
                                                            D4?)
  196 000000F6 BF08 700A       STRBEQ           R2,[R1]     ; if so, [R1] = R2
  197 000000FA F04F 0241       MOV              R2, #'A'    ; R2 = 'A'
  198 000000FE 2805            CMP              R0,#5       ; R0 == 5 ?(KEY D2,
                                                            D5?)
  199 00000100 BF08 700A       STRBEQ           R2,[R1]     ; if so, [R1] = R2
  200 00000104 F04F 0244       MOV              R2, #'D'    ; R2 = 'D'
  201 00000108 2806            CMP              R0,#6       ; R0 == 6 ?(KEY D2,
                                                            D6?)
  202 0000010A BF08 700A       STRBEQ           R2,[R1]     ; if so, [R1] = R2
  203 0000010E F04F 0243       MOV              R2, #'C'    ; R2 = 'C'
  204 00000112 2807            CMP              R0,#7       ; R0 == 7 ?(KEY D2,
                                                            D7?)
  205 00000114 BF08 700A       STRBEQ           R2,[R1]     ; if so, [R1] = R2
  206 00000118         handler_check_D3
  207 00000118 2808            CMP              R0, #0x08   ; R0 == 0x08 ? (D3 
                                                            interrupt)
  208 0000011A D116            BNE              handler_portd_done ; if not, go
                                                             to handler_portd_d
                                                            one
  209 0000011C         ; acknowledge D3 interrupt
  210 0000011C F000 F827       BL               detect_line ; R0 = (line detect
                                                            ed)
  211 00000120 4935            LDR              R1,=KeyInput ; R1 = &KeyInput (
                                                            pointer)
  212 00000122 F04F 0234       MOV              R2, #'4'    ; R2 = '4'
  213 00000126 2804            CMP              R0,#4       ; R0 == 4 ?(KEY D3,
                                                            D4?)
  214 00000128 BF08 700A       STRBEQ           R2,[R1]     ; if so, [R1] = R2
  215 0000012C F04F 0231       MOV              R2, #'1'    ; R2 = '1'
  216 00000130 2805            CMP              R0,#5       ; R0 == 5 ?(KEY D3,
                                                            D5?)
  217 00000132 BF08 700A       STRBEQ           R2,[R1]     ; if so, [R1] = R2
  218 00000136 F04F 022A       MOV              R2, #'*'    ; R2 = '*'
  219 0000013A 2806            CMP              R0,#6       ; R0 == 6 ?(KEY D3,
                                                            D6?)
  220 0000013C BF08 700A       STRBEQ           R2,[R1]     ; if so, [R1] = R2
  221 00000140 F04F 0237       MOV              R2, #'7'    ; R2 = '7'
  222 00000144 2807            CMP              R0,#7       ; R0 == 7 ?(KEY D3,
                                                            D7?)
  223 00000146 BF08 700A       STRBEQ           R2,[R1]     ; if so, [R1] = R2 
                                                            
  224 0000014A         handler_portd_done
  225 0000014A         ;No se limpian las interrupociones
  226 0000014A         ;pograma VMC_MDB_MAIN debe limpiarlas
  227 0000014A         
  228 0000014A BD07            POP              {R0,R1,R2,PC} ; restore previuo



ARM Macro Assembler    Page 8 


                                                            s values
  229 0000014C         
  230 0000014C         ;---------PortD_clearInterrupt---------
  231 0000014C         ; Clear all raw interrupt vector of PORTD by writting FF
                        in ICR
  232 0000014C         ; Input : none
  233 0000014C         ; Output: none
  234 0000014C         ; Modifies: all used Register are pushed and poped
  235 0000014C         PortD_clearInterrupt
  236 0000014C B503            PUSH             {R0,R1,LR}  ; save current valu
                                                            es of R0,R1,LR
  237 0000014E 492B            LDR              R1,=GPIO_PORTD_ICR ; R1 = GPIO_
                                                            PORTD_ICR (pointer)
                                                            
  238 00000150 6808            LDR              R0,[R1]     ; R0 = [R1] (value)
                                                            
  239 00000152 F04F 00FF       MOV              R0,#0xFF    ; R0 = 0xFF
  240 00000156 6008            STR              R0,[R1]     ; [R1] = R0
  241 00000158 BD03            POP              {R0,R1,PC}  ; restore previuos 
                                                            values
  242 0000015A         
  243 0000015A         ;---------PortD_detectInterrupt---------
  244 0000015A         ; Detect if an interrupt on PortD has ocurred
  245 0000015A         ; Input : none
  246 0000015A         ; Output: R0 = 1 on interrupt detected, 0 if not
  247 0000015A         ; Modifies: R0 out, all used Register are pushed and pop
                       ed
  248 0000015A         PortD_detectInterrupt
  249 0000015A B502            PUSH             {R1,LR}     ; save current valu
                                                            es of R0,R1,LR
  250 0000015C 4925            LDR              R1,=GPIO_PORTD_RIS ; R1 = GPIO_
                                                            PORTD_RIS (pointer)
                                                            
  251 0000015E 6808            LDR              R0,[R1]     ; R0 = [R1] (value)
                                                            
  252 00000160 F010 00FF       ANDS             R0, R0,#0xFF ; R0 = R0|0xFF
  253 00000164 BF08 BD02       POPEQ            {R1,PC}     ; If cero, no inter
                                                            rup, restore previu
                                                            os values and retur
                                                            n
  254 00000168 F04F 0001       MOV              R0,#1       ; interrupt ocurred
                                                            
  255 0000016C BD02            POP              {R1,PC}     ; restore previuos 
                                                            values
  256 0000016E         
  257 0000016E         ;---------detect_line---------
  258 0000016E         ; Encuentra la line de la tecla presionada
  259 0000016E         ; Input : none
  260 0000016E         ; Output: R0, number of line detected (D4-D7)
  261 0000016E         ; Modifies: R0 out, all used Register are pushed and pop
                       ed
  262 0000016E         detect_line
  263 0000016E B50E            PUSH             {R1,R2,R3,LR} ; save current va
                                                            lues of R0,R1,LR
  264 00000170 4B23            LDR              R3,=GPIO_PORTD_0123 ; R2 = &GPI
                                                            O_PORTD_0123
  265 00000172 6818            LDR              R0,[R3]     ; R0 = [R2] (actual
                                                             value of D0-D3)
  266 00000174 F04F 01FF       MOV              R1,#0xFF    ; R1 = 0xFF



ARM Macro Assembler    Page 9 


  267 00000178         detect_line_D4
  268 00000178 4A22            LDR              R2,=GPIO_PORTD_DATA+0x40 ; R2 =
                                                             &(GPIO_PORTD_DATA+
                                                            0x040)(D4 mask)
  269 0000017A 6011            STR              R1,[R2]     ; [R2] = R1 (set D4
                                                            )
  270 0000017C 681A            LDR              R2,[R3]     ; R2 = [R3] (GPIO_P
                                                            ORTD_0123)
  271 0000017E 4290            CMP              R0, R2      ; R0 == R2 ? (no ch
                                                            ange on PORTD_0123 
                                                            ?)
  272 00000180 D002            BEQ              detect_line_D5 ; if so, go to d
                                                            etect_line_D5
  273 00000182         ; acknowledge D4 line
  274 00000182 F04F 0004       MOV              R0,#4
  275 00000186 E017            B                detect_line_done
  276 00000188         detect_line_D5
  277 00000188 4A1F            LDR              R2,=GPIO_PORTD_DATA+0x80 ; R2 =
                                                             &(GPIO_PORTD_DATA+
                                                            0x080)(D5 mask)
  278 0000018A 6011            STR              R1,[R2]     ; [R2] = R1 (set D5
                                                            )
  279 0000018C 681A            LDR              R2,[R3]     ; R2 = [R3] (GPIO_P
                                                            ORTD_0123)
  280 0000018E 4290            CMP              R0, R2      ; R0 == R2 ? (no ch
                                                            ange on PORTD_0123 
                                                            ?)
  281 00000190 D002            BEQ              detect_line_D6 ; if so, go to d
                                                            etect_line_D6
  282 00000192         ; acknowledge D5 line
  283 00000192 F04F 0005       MOV              R0,#5
  284 00000196 E00F            B                detect_line_done
  285 00000198         detect_line_D6
  286 00000198 4A1C            LDR              R2,=GPIO_PORTD_DATA+0x100 ; R2 
                                                            = &(GPIO_PORTD_DATA
                                                            +0x100)(D6 mask)
  287 0000019A 6011            STR              R1,[R2]     ; [R2] = R1 (set D6
                                                            )
  288 0000019C 681A            LDR              R2,[R3]     ; R2 = [R3] (GPIO_P
                                                            ORTD_0123)
  289 0000019E 4290            CMP              R0, R2      ; R0 == R2 ? (no ch
                                                            ange on PORTD_0123 
                                                            ?)
  290 000001A0 D002            BEQ              detect_line_D7 ; if so, go to d
                                                            etect_line_D7
  291 000001A2         ; acknowledge D6 line
  292 000001A2 F04F 0006       MOV              R0,#6
  293 000001A6 E007            B                detect_line_done
  294 000001A8         detect_line_D7
  295 000001A8 4A19            LDR              R2,=GPIO_PORTD_DATA+0x200 ; R2 
                                                            = &(GPIO_PORTD_DATA
                                                            +0x200)(D7 mask)
  296 000001AA 6011            STR              R1,[R2]     ; [R2] = R1 (set D7
                                                            )
  297 000001AC 681A            LDR              R2,[R3]     ; R2 = [R3] (GPIO_P
                                                            ORTD_0123)
  298 000001AE 4290            CMP              R0, R2      ; R0 == R2 ? (no ch
                                                            ange on PORTD_0123 
                                                            ?)



ARM Macro Assembler    Page 10 


  299 000001B0 D002            BEQ              detect_line_done ; if so, go to
                                                             detect_line_done
  300 000001B2         ; acknowledge D5 line
  301 000001B2 F04F 0007       MOV              R0,#7
  302 000001B6 E7FF            B                detect_line_done
  303 000001B8         detect_line_done
  304 000001B8         ; clear D4-D7
  305 000001B8 490D            LDR              R1,=GPIO_PORTD_4567 ; R1 = GPIO
                                                            _PORTD_4567 (pointe
                                                            r)
  306 000001BA F04F 0200       MOV              R2,#0x00    ; R2 = 0x00
  307 000001BE 600A            STR              R2,[R1]     ; [R1] = R2 (clear 
                                                            D4-D7) 
  308 000001C0 BD0E            POP              {R1,R2,R3,PC} ; restore previuo
                                                            s values
  309 000001C2         
  310 000001C2 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  311 000001C4                 END                          ; end of file
              400FE608 
              400FEA08 
              4005B400 
              4005B420 
              4005B510 
              4005B51C 
              4005B528 
              4005B404 
              4005B40C 
              4005B410 
              E000E100 
              4005B3C0 
              4005B414 
              00000000 
              4005B41C 
              4005B03C 
              4005B040 
              4005B080 
              4005B100 
              4005B200 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\portd.d -o.\objects\portd.o -IC:\Users\mode_\Document
s\Fmat\MicroControladores\KeilProjects\Cash_flow\RTE\_Target_1 -IC:\Keil_v5\ARM
\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 -IC:\Keil_v5\ARM\CMSIS\Include
 --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 522" --predefi
ne="TM4C1294NCPDT SETA 1" --list=.\listings\portd.lst PortD.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 50 in file PortD.s
   Uses
      None
Comment: DATA unused
KeyInput 00000000

Symbol: KeyInput
   Definitions
      At line 51 in file PortD.s
   Uses
      At line 55 in file PortD.s
      At line 157 in file PortD.s
      At line 175 in file PortD.s
      At line 193 in file PortD.s
      At line 211 in file PortD.s

2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 53 in file PortD.s
   Uses
      None
Comment: .text unused
GPIOJinitloop 0000000E

Symbol: GPIOJinitloop
   Definitions
      At line 77 in file PortD.s
   Uses
      At line 80 in file PortD.s
Comment: GPIOJinitloop used once
InitPortD 00000000

Symbol: InitPortD
   Definitions
      At line 67 in file PortD.s
   Uses
      At line 57 in file PortD.s
Comment: InitPortD used once
PORTD_Handler 0000007C

Symbol: PORTD_Handler
   Definitions
      At line 148 in file PortD.s
   Uses
      At line 58 in file PortD.s
Comment: PORTD_Handler used once
PortD_clearInterrupt 0000014C

Symbol: PortD_clearInterrupt
   Definitions
      At line 235 in file PortD.s
   Uses
      At line 59 in file PortD.s
Comment: PortD_clearInterrupt used once
PortD_detectInterrupt 0000015A

Symbol: PortD_detectInterrupt
   Definitions
      At line 248 in file PortD.s
   Uses
      At line 60 in file PortD.s
Comment: PortD_detectInterrupt used once
detect_line 0000016E

Symbol: detect_line
   Definitions
      At line 262 in file PortD.s
   Uses
      At line 156 in file PortD.s
      At line 174 in file PortD.s
      At line 192 in file PortD.s
      At line 210 in file PortD.s




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

detect_line_D4 00000178

Symbol: detect_line_D4
   Definitions
      At line 267 in file PortD.s
   Uses
      None
Comment: detect_line_D4 unused
detect_line_D5 00000188

Symbol: detect_line_D5
   Definitions
      At line 276 in file PortD.s
   Uses
      At line 272 in file PortD.s
Comment: detect_line_D5 used once
detect_line_D6 00000198

Symbol: detect_line_D6
   Definitions
      At line 285 in file PortD.s
   Uses
      At line 281 in file PortD.s
Comment: detect_line_D6 used once
detect_line_D7 000001A8

Symbol: detect_line_D7
   Definitions
      At line 294 in file PortD.s
   Uses
      At line 290 in file PortD.s
Comment: detect_line_D7 used once
detect_line_done 000001B8

Symbol: detect_line_done
   Definitions
      At line 303 in file PortD.s
   Uses
      At line 275 in file PortD.s
      At line 284 in file PortD.s
      At line 293 in file PortD.s
      At line 299 in file PortD.s
      At line 302 in file PortD.s

handler_check_D1 000000B4

Symbol: handler_check_D1
   Definitions
      At line 170 in file PortD.s
   Uses
      At line 154 in file PortD.s
Comment: handler_check_D1 used once
handler_check_D2 000000E6

Symbol: handler_check_D2
   Definitions
      At line 188 in file PortD.s
   Uses
      At line 172 in file PortD.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Comment: handler_check_D2 used once
handler_check_D3 00000118

Symbol: handler_check_D3
   Definitions
      At line 206 in file PortD.s
   Uses
      At line 190 in file PortD.s
Comment: handler_check_D3 used once
handler_portd_done 0000014A

Symbol: handler_portd_done
   Definitions
      At line 224 in file PortD.s
   Uses
      At line 208 in file PortD.s
Comment: handler_portd_done used once
16 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIO_PORTD_0123 4005B03C

Symbol: GPIO_PORTD_0123
   Definitions
      At line 21 in file PortD.s
   Uses
      At line 264 in file PortD.s
Comment: GPIO_PORTD_0123 used once
GPIO_PORTD_4567 4005B3C0

Symbol: GPIO_PORTD_4567
   Definitions
      At line 22 in file PortD.s
   Uses
      At line 137 in file PortD.s
      At line 305 in file PortD.s

GPIO_PORTD_AFSEL 4005B420

Symbol: GPIO_PORTD_AFSEL
   Definitions
      At line 32 in file PortD.s
   Uses
      At line 90 in file PortD.s
Comment: GPIO_PORTD_AFSEL used once
GPIO_PORTD_AMSEL 4005B528

Symbol: GPIO_PORTD_AMSEL
   Definitions
      At line 36 in file PortD.s
   Uses
      At line 108 in file PortD.s
Comment: GPIO_PORTD_AMSEL used once
GPIO_PORTD_DATA 4005B000

Symbol: GPIO_PORTD_DATA
   Definitions
      At line 19 in file PortD.s
   Uses
      At line 268 in file PortD.s
      At line 277 in file PortD.s
      At line 286 in file PortD.s
      At line 295 in file PortD.s

GPIO_PORTD_DEN 4005B51C

Symbol: GPIO_PORTD_DEN
   Definitions
      At line 35 in file PortD.s
   Uses
      At line 102 in file PortD.s
Comment: GPIO_PORTD_DEN used once
GPIO_PORTD_DIR 4005B400

Symbol: GPIO_PORTD_DIR
   Definitions
      At line 24 in file PortD.s
   Uses
      At line 83 in file PortD.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Comment: GPIO_PORTD_DIR used once
GPIO_PORTD_IBE 4005B408

Symbol: GPIO_PORTD_IBE
   Definitions
      At line 26 in file PortD.s
   Uses
      None
Comment: GPIO_PORTD_IBE unused
GPIO_PORTD_ICR 4005B41C

Symbol: GPIO_PORTD_ICR
   Definitions
      At line 31 in file PortD.s
   Uses
      At line 237 in file PortD.s
Comment: GPIO_PORTD_ICR used once
GPIO_PORTD_IEV 4005B40C

Symbol: GPIO_PORTD_IEV
   Definitions
      At line 27 in file PortD.s
   Uses
      At line 120 in file PortD.s
Comment: GPIO_PORTD_IEV used once
GPIO_PORTD_IM 4005B410

Symbol: GPIO_PORTD_IM
   Definitions
      At line 28 in file PortD.s
   Uses
      At line 126 in file PortD.s
Comment: GPIO_PORTD_IM used once
GPIO_PORTD_IS 4005B404

Symbol: GPIO_PORTD_IS
   Definitions
      At line 25 in file PortD.s
   Uses
      At line 114 in file PortD.s
Comment: GPIO_PORTD_IS used once
GPIO_PORTD_MIS 4005B418

Symbol: GPIO_PORTD_MIS
   Definitions
      At line 30 in file PortD.s
   Uses
      None
Comment: GPIO_PORTD_MIS unused
GPIO_PORTD_PCTL 4005B52C

Symbol: GPIO_PORTD_PCTL
   Definitions
      At line 37 in file PortD.s
   Uses
      None
Comment: GPIO_PORTD_PCTL unused
GPIO_PORTD_PDR 4005B514




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

Symbol: GPIO_PORTD_PDR
   Definitions
      At line 34 in file PortD.s
   Uses
      None
Comment: GPIO_PORTD_PDR unused
GPIO_PORTD_PUR 4005B510

Symbol: GPIO_PORTD_PUR
   Definitions
      At line 33 in file PortD.s
   Uses
      At line 96 in file PortD.s
Comment: GPIO_PORTD_PUR used once
GPIO_PORTD_RIS 4005B414

Symbol: GPIO_PORTD_RIS
   Definitions
      At line 29 in file PortD.s
   Uses
      At line 150 in file PortD.s
      At line 250 in file PortD.s

GPIO_PORTD_SI 4005B538

Symbol: GPIO_PORTD_SI
   Definitions
      At line 38 in file PortD.s
   Uses
      None
Comment: GPIO_PORTD_SI unused
NVIC_EN0_INT3 00000008

Symbol: NVIC_EN0_INT3
   Definitions
      At line 47 in file PortD.s
   Uses
      At line 133 in file PortD.s
Comment: NVIC_EN0_INT3 used once
NVIC_EN1_R E000E100

Symbol: NVIC_EN1_R
   Definitions
      At line 46 in file PortD.s
   Uses
      At line 132 in file PortD.s
Comment: NVIC_EN1_R used once
SYSCTL_PRGPIO_R 400FEA08

Symbol: SYSCTL_PRGPIO_R
   Definitions
      At line 41 in file PortD.s
   Uses
      At line 76 in file PortD.s
Comment: SYSCTL_PRGPIO_R used once
SYSCTL_PRGPIO_R3 00000008

Symbol: SYSCTL_PRGPIO_R3
   Definitions



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

      At line 44 in file PortD.s
   Uses
      At line 79 in file PortD.s
Comment: SYSCTL_PRGPIO_R3 used once
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 40 in file PortD.s
   Uses
      At line 70 in file PortD.s
Comment: SYSCTL_RCGCGPIO_R used once
SYSCTL_RCGCGPIO_R3 00000008

Symbol: SYSCTL_RCGCGPIO_R3
   Definitions
      At line 43 in file PortD.s
   Uses
      At line 72 in file PortD.s
Comment: SYSCTL_RCGCGPIO_R3 used once
24 symbols
378 symbols in table
