


ARM Macro Assembler    Page 1 


    1 00000000         ; VMC_MDB_Main.s
    2 00000000         ; Runs on TM4C1294
    3 00000000         ; Implementacion basica de un controlador de maquina exp
                       endedroa VCM
    4 00000000         ; David Pinzon & Alberto Lopez
    5 00000000         ; May 27, 2017
    6 00000000         
    7 00000000         ;THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHET
                       HER EXPRESS, IMPLIED
    8 00000000         ;OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WA
                       RRANTIES OF
    9 00000000         ;MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE AP
                       PLY TO THIS SOFTWARE.
   10 00000000         ;VALVANO SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR 
                       SPECIAL, INCIDENTAL,
   11 00000000         ;OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
   12 00000000         
   13 00000000 00000008 
                       COIN_CHANGER_ADDR
                               EQU              0x0008
   14 00000000         
   15 00000000         ; functions from PLL.s
   16 00000000                 IMPORT           PLL_Init
   17 00000000         
   18 00000000         ;functions from Systick.s
   19 00000000                 IMPORT           delay
   20 00000000         
   21 00000000         ; function from PortD.s
   22 00000000                 IMPORT           InitPortD
   23 00000000                 IMPORT           PortD_clearInterrupt
   24 00000000                 IMPORT           PortD_detectInterrupt
   25 00000000                 IMPORT           KeyInput    ;(memory adress)
   26 00000000         
   27 00000000         ; functions from UARTInts.s
   28 00000000                 IMPORT           UART_Init
   29 00000000         
   30 00000000         ; functions from mdb.s
   31 00000000                 IMPORT           MDB_SendAddress
   32 00000000                 IMPORT           MDB_SendCommand
   33 00000000                 IMPORT           MDB_SendACK
   34 00000000                 IMPORT           MDB_SendRET
   35 00000000                 IMPORT           MDB_SendNAK
   36 00000000                 IMPORT           MDB_GetAnswer
   37 00000000                 IMPORT           MDB_SendBusReset
   38 00000000                 IMPORT           MDB_InitCoinChanger
   39 00000000                 IMPORT           MDB_SendPool
   40 00000000                 IMPORT           MDB_DispenseValue
   41 00000000         
   42 00000000                 IMPORT           Command
   43 00000000                 IMPORT           DataIn
   44 00000000                 IMPORT           Setup_buf
   45 00000000                 IMPORT           Tube_status_buf
   46 00000000                 IMPORT           Pool_buf
   47 00000000                 IMPORT           Identification_buf
   48 00000000                 IMPORT           Payout_status_buf
   49 00000000                 IMPORT           Send_diag_status_buf
   50 00000000         
   51 00000000                 AREA             DATA, ALIGN=2
   52 00000000 00 00 00 



ARM Macro Assembler    Page 2 


              00       credit  SPACE            4           ; holds the credit
   53 00000004 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    items_value
                               SPACE            14          ; holds the items v
                                                            alue in Hex ascendi
                                                            ng order, byte 1 fo
                                                            r item 0 upto byte 
                                                            14 for item D
   54 00000012         
   55 00000012                 EXPORT           items_value ; global only for o
                                                            bservation using de
                                                            bugger
   56 00000012                 EXPORT           credit      ; global only for o
                                                            bservation using de
                                                            bugger
   57 00000012         
   58 00000012                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   59 00000000                 THUMB
   60 00000000                 EXPORT           Start
   61 00000000         
   62 00000000                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
   63 00000000         
   64 00000000         Start
   65 00000000 F7FF FFFE       BL               PLL_Init    ; set system clock 
                                                            to 120 MHz
   66 00000004 F7FF FFFE       BL               InitPortD   ; initialize PortD 
                                                            (for MatrixPad)
   67 00000008 F7FF FFFE       BL               UART_Init   ; initialize UART (
                                                            portA used)
   68 0000000C F000 F8A8       BL               Init_items_value ; inicializa e
                                                            l buffer con los va
                                                            lores de los items
   69 00000010 F7FF FFFE       BL               MDB_InitCoinChanger ; Rutina de
                                                             inicializacion del
                                                             coin changer
   70 00000014 485E            LDR              R0,=credit  ; R0 = $credit
   71 00000016 F04F 0100       MOV              R1,#0       ; R1 = 0
   72 0000001A 6001            STR              R1,[R0]     ; [R0] = R1 (initia
                                                            lizing credit in 0)
                                                            
   73 0000001C         
   74 0000001C         ;waiting for coins loop until coin is accepted
   75 0000001C         WaitingForCoinsLoop
   76 0000001C F04F 0008       MOV              R0,#COIN_CHANGER_ADDR ; R0 = CO
                                                            IN_CHANGER_ADDR
   77 00000020 F7FF FFFE       BL               MDB_SendPool ; Sending Pool com
                                                            mand
   78 00000024         Waiting_gettingAnswer
   79 00000024 485B            LDR              R0,=DataIn  ; R0 = &DataIn (poi
                                                            nter)
   80 00000026 F7FF FFFE       BL               MDB_GetAnswer ; Geeting Answer 
                                                            in DataIn
   81 0000002A 2801            CMP              R0,#1       ; R0 == 1?



ARM Macro Assembler    Page 3 


   82 0000002C D01B            BEQ              continue_waitingForCoins ; if s
                                                            o, go to continue_w
                                                            aitingForCoins
   83 0000002E 2800            CMP              R0,#0       ; R0 == 0?
   84 00000030 BF08 F7FF 
              FFFE             BLEQ             MDB_SendRET ; if so, Send Ret
   85 00000036 2800            CMP              R0,#0       ; R0 == 0?
   86 00000038 D0F4            BEQ              Waiting_gettingAnswer ; if so, 
                                                            go to Waiting_getti
                                                            ngAnswer
   87 0000003A F7FF FFFE       BL               MDB_SendACK ; Sendind ACK
   88 0000003E 4955            LDR              R1,=DataIn  ; R1 = &DataIn (poi
                                                            nter)
   89 00000040 F04F 0000       MOV              R0,#0       ; R0 = 0 (clean reg
                                                            ister)
   90 00000044 7808            LDRB             R0,[R1]     ; R0 = [R1]
   91 00000046 F000 00C0       AND              R0,R0,#2_11000000 ; R0 = R0 && 
                                                            2_11000000
   92 0000004A 2840            CMP              R0,#2_01000000 ; R0 == 2_010000
                                                            00? (coin deposited
                                                            )?
   93 0000004C D10B            BNE              continue_waitingForCoins ; if n
                                                            ot, go to continue_
                                                            waitingForCoins
   94 0000004E F000 0030       AND              R0,R0,#2_00110000 ; R0 = R0 && 
                                                            2_00110000
   95 00000052 2820            CMP              R0,#2_00100000 ; R0 == 2_001000
                                                            00 ? (coin not used
                                                            )
   96 00000054 D007            BEQ              continue_waitingForCoins ; if s
                                                            o, go to continue_w
                                                            aitingForCoins
   97 00000056 2830            CMP              R0,#2_00110000 ; R0 == 2_001100
                                                            00 ? (coin reject)
   98 00000058 D005            BEQ              continue_waitingForCoins ; if s
                                                            o, go to continue_w
                                                            aitingForCoins
   99 0000005A 7808            LDRB             R0,[R1]     ; R1 = [R0]
  100 0000005C F000 000F       AND              R0,R0,#2_00001111 ; R1 = R1 && 
                                                            2_00001111
  101 00000060 F000 F889       BL               AddCredit   ; add credit from c
                                                            oin type deposited 
                                                            (R0)
  102 00000064 E008            B                WithCreditLoop ; go to WithCred
                                                            itLoop
  103 00000066         continue_waitingForCoins
  104 00000066 F7FF FFFE       BL               PortD_detectInterrupt ; R0 = (P
                                                            ORTD Interrupt Stat
                                                            us)
  105 0000006A 2801            CMP              R0,#1       ; R0 == 1 ? (PortD 
                                                            Interrupt Occurred)
                                                            ?
  106 0000006C D047            BEQ              print_item_value ; Imprime al L
                                                            CD valor del produc
                                                            to, limpia interrup
                                                            ciones
  107 0000006E F04F 0096       MOV              R0,#150     ; R0 = 150
  108 00000072 F7FF FFFE       BL               delay       ; delay for (R0)150
                                                            ms



ARM Macro Assembler    Page 4 


  109 00000076 E7D1            B                WaitingForCoinsLoop ; unconditi
                                                            onal branch
  110 00000078         
  111 00000078         ; stay in loop with credit getting coins until buy item 
                       or cancel
  112 00000078         WithCreditLoop
  113 00000078 4945            LDR              R1,=credit  ; R1 = &credit (poi
                                                            nter)
  114 0000007A 7808            LDRB             R0,[R1]     ; R0 = R1
  115 0000007C         ;R0 has the value, send to print
  116 0000007C         ;BL LCD_print_value
  117 0000007C F04F 0008       MOV              R0,#COIN_CHANGER_ADDR ; R0 = CO
                                                            IN_CHANGER_ADDR
  118 00000080 F7FF FFFE       BL               MDB_SendPool ; Sending Pool com
                                                            mand
  119 00000084         Waiting_gettingAnswer_2
  120 00000084 4843            LDR              R0,=DataIn  ; R0 = &DataIn (poi
                                                            nter)
  121 00000086 F7FF FFFE       BL               MDB_GetAnswer ; Geeting Answer 
                                                            in DataIn
  122 0000008A 2801            CMP              R0,#1       ; R0 == 1?
  123 0000008C D01A            BEQ              continue_WithCreditLoop ; if so
                                                            , go to continue_wa
                                                            itingForCoins
  124 0000008E 2800            CMP              R0,#0       ; R0 == 0?
  125 00000090 BF08 F7FF 
              FFFE             BLEQ             MDB_SendRET ; if so, Send Ret
  126 00000096 2800            CMP              R0,#0       ; R0 == 0?
  127 00000098 D0F4            BEQ              Waiting_gettingAnswer_2 ; if so
                                                            , go to Waiting_get
                                                            tingAnswer
  128 0000009A F7FF FFFE       BL               MDB_SendACK ; Sendind ACK
  129 0000009E 493D            LDR              R1,=DataIn  ; R1 = &DataIn (poi
                                                            nter)
  130 000000A0 F04F 0000       MOV              R0,#0       ; R0 = 0 (clean reg
                                                            ister)
  131 000000A4 7808            LDRB             R0,[R1]     ; R0 = [R1]
  132 000000A6 F000 00C0       AND              R0,R0,#2_11000000 ; R0 = R0 && 
                                                            2_11000000
  133 000000AA 2840            CMP              R0,#2_01000000 ; R0 == 2_010000
                                                            00? (coin deposited
                                                            )?
  134 000000AC D10A            BNE              continue_WithCreditLoop ; if no
                                                            t, go to continue_W
                                                            ithCreditLoop
  135 000000AE F000 0030       AND              R0,R0,#2_00110000 ; R0 = R0 && 
                                                            2_00110000
  136 000000B2 2820            CMP              R0,#2_00100000 ; R0 == 2_001000
                                                            00 ? (coin not used
                                                            )
  137 000000B4 D006            BEQ              continue_WithCreditLoop ; if so
                                                            , go to continue_Wi
                                                            thCreditLoop
  138 000000B6 2830            CMP              R0,#2_00110000 ; R0 == 2_001100
                                                            00 ? (coin reject)
  139 000000B8 D004            BEQ              continue_WithCreditLoop ; if so
                                                            , go to continue_Wi
                                                            thCreditLoop
  140 000000BA 7808            LDRB             R0,[R1]     ; R1 = [R0]



ARM Macro Assembler    Page 5 


  141 000000BC F000 000F       AND              R0,R0,#2_00001111 ; R1 = R1 && 
                                                            2_00001111
  142 000000C0 F000 F859       BL               AddCredit   ; add credit from c
                                                            oin type deposited 
                                                            (R0)
  143 000000C4         continue_WithCreditLoop
  144 000000C4 F7FF FFFE       BL               PortD_detectInterrupt ; R0 = (P
                                                            ORTD Interrupt Stat
                                                            us)
  145 000000C8 2801            CMP              R0,#1       ; R0 == 1 ? (PortD 
                                                            Interrupt Occurred)
                                                            ?
  146 000000CA D113            BNE              continue_WithCreditLoopYet ; if
                                                             not, go to continu
                                                            e_WithCreditLoopYet
                                                            
  147 000000CC         ; acknowledge key was pressed
  148 000000CC 4932            LDR              R1,=KeyInput ; R1 = &KeyInput (
                                                            pointer)
  149 000000CE 6808            LDR              R0,[R1]     ; R0 = [R1]
  150 000000D0 282A            CMP              R0,#'*'     ; R0 == '*' ?
  151 000000D2 BF08 F7FF 
              FFFE             BLEQ             PortD_clearInterrupt ; if so, c
                                                            lean interrupt of p
                                                            ortD
  152 000000D8 282A            CMP              R0,#'*'     ; R0 == '*' ?
  153 000000DA D00B            BEQ              continue_WithCreditLoopYet ; if
                                                             so, go to continue
                                                            _WithCreditLoopYet
  154 000000DC 2823            CMP              R0,#'#'     ; R0 == '#' ?
  155 000000DE D109            BNE              time_to_verify_credits ; if not
                                                            , go to time_to_ver
                                                            ify_credits
  156 000000E0 F7FF FFFE       BL               PortD_clearInterrupt ; clean in
                                                            terrupt of portD
  157 000000E4 492A            LDR              R1,=credit  ; R1 = &credit (poi
                                                            nter)
  158 000000E6 6808            LDR              R0, [R1]    ; R0 = [R1]
  159 000000E8 F7FF FFFE       BL               MDB_DispenseValue ; Dispense Va
                                                            lue in R0
  160 000000EC F04F 0000       MOV              R0,#0       ; R0 = 0 (actualiza
                                                             creditos)
  161 000000F0 6008            STR              R0,[R1]     ; [R1] = R0 (0 cred
                                                            itos)
  162 000000F2 E7B8            B                continue_waitingForCoins ; go t
                                                            o continue_waitingF
                                                            orCoins uncondition
                                                            al
  163 000000F4         ; acknowledge item solicited
  164 000000F4         time_to_verify_credits
  165 000000F4         
  166 000000F4         continue_WithCreditLoopYet
  167 000000F4 F04F 0096       MOV              R0,#150     ; R0 = 150
  168 000000F8 F7FF FFFE       BL               delay       ; delay for (R0)150
                                                            ms
  169 000000FC E7BC            B                WithCreditLoop ; unconditional 
                                                            branch
  170 000000FE         
  171 000000FE         



ARM Macro Assembler    Page 6 


  172 000000FE         ;---------print_item_value---------
  173 000000FE         ; Imprime el valor del producto seleccionado por KeyInpu
                       t
  174 000000FE         ; Limpia interrupcion del puertoD
  175 000000FE         ; Input : none
  176 000000FE         ; Output: none (print to lcd)
  177 000000FE         ; Modifies: none, all used Registers are pushed and pope
                       d
  178 000000FE         print_item_value
  179 000000FE B507            PUSH             {R0,R1,R2,LR} ; save current va
                                                            lues of R0,R1,LR
  180 00000100 F7FF FFFE       BL               PortD_clearInterrupt ; Clear Po
                                                            rtD Raw Status Inte
                                                            rrupt
  181 00000104 4A25            LDR              R2,=items_value ; R2 = $items_v
                                                            alue (pointer)
  182 00000106 4824            LDR              R0,=KeyInput ; R0 = $KeyInput (
                                                            pointer)
  183 00000108 6801            LDR              R1,[R0]     ; R1 = [R0]
  184 0000010A 2930            CMP              R1,#'0'     ; R1 == '0' ?
  185 0000010C BF08 7810       LDRBEQ           R0,[R2]     ; if so, R0 = [R2]
  186 00000110 2931            CMP              R1,#'1'     ; R1 == '1' ?
  187 00000112 BF08 7850       LDRBEQ           R0,[R2,#1]  ; if so, R0 = [R2]
  188 00000116 2932            CMP              R1,#'2'     ; R1 == '2' ?
  189 00000118 BF08 7890       LDRBEQ           R0,[R2,#2]  ; if so, R0 = [R2]
  190 0000011C 2933            CMP              R1,#'3'     ; R1 == '3' ?
  191 0000011E BF08 78D0       LDRBEQ           R0,[R2,#3]  ; if so, R0 = [R2]
  192 00000122 2934            CMP              R1,#'4'     ; R1 == '4' ?
  193 00000124 BF08 7910       LDRBEQ           R0,[R2,#4]  ; if so, R0 = [R2]
  194 00000128 2935            CMP              R1,#'5'     ; R1 == '5' ?
  195 0000012A BF08 7950       LDRBEQ           R0,[R2,#5]  ; if so, R0 = [R2]
  196 0000012E 2936            CMP              R1,#'6'     ; R1 == '6' ?
  197 00000130 BF08 7990       LDRBEQ           R0,[R2,#6]  ; if so, R0 = [R2]
  198 00000134 2937            CMP              R1,#'7'     ; R1 == '7' ?
  199 00000136 BF08 79D0       LDRBEQ           R0,[R2,#7]  ; if so, R0 = [R2]
  200 0000013A 2938            CMP              R1,#'8'     ; R1 == '8' ?
  201 0000013C BF08 7A10       LDRBEQ           R0,[R2,#8]  ; if so, R0 = [R2]
  202 00000140 2939            CMP              R1,#'9'     ; R1 == '9' ?
  203 00000142 BF08 7A50       LDRBEQ           R0,[R2,#9]  ; if so, R0 = [R2]
  204 00000146 2941            CMP              R1,#'A'     ; R1 == 'A' ?
  205 00000148 BF08 7A90       LDRBEQ           R0,[R2,#10] ; if so, R0 = [R2]
  206 0000014C 2942            CMP              R1,#'B'     ; R1 == 'B' ?
  207 0000014E BF08 7AD0       LDRBEQ           R0,[R2,#11] ; if so, R0 = [R2]
  208 00000152 2943            CMP              R1,#'C'     ; R1 == 'C' ?
  209 00000154 BF08 7B10       LDRBEQ           R0,[R2,#12] ; if so, R0 = [R2]
  210 00000158 2944            CMP              R1,#'D'     ; R1 == 'D' ?
  211 0000015A BF08 7B50       LDRBEQ           R0,[R2,#13] ; if so, R0 = [R2]
  212 0000015E         ;R0 has the value, send to print
  213 0000015E         ;BL LCD_print_value
  214 0000015E BD07            POP              {R0,R1,R2,PC} ; restore previuo
                                                            s values
  215 00000160         
  216 00000160         ;---------Init_items_value---------
  217 00000160         ; Inicializa los valores de los items avender
  218 00000160         ; Valores de prueba: item_value=#item+1
  219 00000160         ; Input : none
  220 00000160         ; Output: none
  221 00000160         ; Modifies: none, all used Registers are pushed and pope
                       d



ARM Macro Assembler    Page 7 


  222 00000160         Init_items_value
  223 00000160 B503            PUSH             {R0,R1,LR}  ; save current valu
                                                            es of R0,R1,LR
  224 00000162 490E            LDR              R1,=items_value ; R1 = &items_v
                                                            alue (pointer)
  225 00000164 F04F 0001       MOV              R0,#1       ; R0 = 1
  226 00000168         items_value_loop
  227 00000168 F801 0B01       STRB             R0,[R1],#1  ; [R1] = R0, R1 = R
                                                            1+1 (increment poin
                                                            ter after sstore)
  228 0000016C F100 0001       ADD              R0,R0,#1    ; R0 = R0 + 1
  229 00000170 280F            CMP              R0,#15      ; R0 == 15 ?
  230 00000172 D1F9            BNE              items_value_loop ; if not, go t
                                                            o items_value_loop
  231 00000174 BD03            POP              {R0,R1,PC}  ; restore previuos 
                                                            values
  232 00000176         
  233 00000176         ;---------AddCredit---------
  234 00000176         ; Actualiza el valor de credito disponible
  235 00000176         ; Input : R0, coin type deposited
  236 00000176         ; Output: none
  237 00000176         ; Modifies: none, all used Registers are pushed and pope
                       d
  238 00000176         AddCredit
  239 00000176 B507            PUSH             {R0,R1,R2,LR} ; save current va
                                                            lues of R0,R1,LR
  240 00000178 4A05            LDR              R2,=credit  ; R2 = &credit (poi
                                                            nter)
  241 0000017A 6811            LDR              R1,[R2]     ; R1 = [R2] (actual
                                                             credit)
  242 0000017C 4A08            LDR              R2,=Setup_buf ; R2 = &Setup_buf
                                                             (pointer)
  243 0000017E F102 0207       ADD              R2,R2,#7    ; R2 = R3 + 7
  244 00000182 4402            ADD              R2,R2,R0    ; R2 = R2 + R0
  245 00000184 6810            LDR              R0, [R2]    ; R0 = [R2] (coin v
                                                            alue)
  246 00000186 4401            ADD              R1, R1, R0  ; R1 = R1 + R0
  247 00000188 4801            LDR              R0,=credit  ; R0 = &credit (poi
                                                            nter)
  248 0000018A 6001            STR              R1,[R0]     ; [R0] = R1
  249 0000018C BD03            POP              {R0,R1,PC}  ; restore previuos 
                                                            values
  250 0000018E         
  251 0000018E 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  252 00000190                 END                          ; end of file
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\vmc_mdb_main.d -o.\objects\vmc_mdb_main.o -IC:\Users\
mode_\Documents\Fmat\MicroControladores\KeilProjects\Cash_flow\RTE\_Target_1 -I
C:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 -IC:\Keil_v5\ARM
\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 
522" --predefine="TM4C1294NCPDT SETA 1" --list=.\listings\vmc_mdb_main.lst VMC_
MDB_Main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 51 in file VMC_MDB_Main.s
   Uses
      None
Comment: DATA unused
credit 00000000

Symbol: credit
   Definitions
      At line 52 in file VMC_MDB_Main.s
   Uses
      At line 56 in file VMC_MDB_Main.s
      At line 70 in file VMC_MDB_Main.s
      At line 113 in file VMC_MDB_Main.s
      At line 157 in file VMC_MDB_Main.s
      At line 240 in file VMC_MDB_Main.s
      At line 247 in file VMC_MDB_Main.s

items_value 00000004

Symbol: items_value
   Definitions
      At line 53 in file VMC_MDB_Main.s
   Uses
      At line 55 in file VMC_MDB_Main.s
      At line 181 in file VMC_MDB_Main.s
      At line 224 in file VMC_MDB_Main.s

3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 58 in file VMC_MDB_Main.s
   Uses
      None
Comment: .text unused
AddCredit 00000176

Symbol: AddCredit
   Definitions
      At line 238 in file VMC_MDB_Main.s
   Uses
      At line 101 in file VMC_MDB_Main.s
      At line 142 in file VMC_MDB_Main.s

Init_items_value 00000160

Symbol: Init_items_value
   Definitions
      At line 222 in file VMC_MDB_Main.s
   Uses
      At line 68 in file VMC_MDB_Main.s
Comment: Init_items_value used once
Start 00000000

Symbol: Start
   Definitions
      At line 64 in file VMC_MDB_Main.s
   Uses
      At line 60 in file VMC_MDB_Main.s
Comment: Start used once
WaitingForCoinsLoop 0000001C

Symbol: WaitingForCoinsLoop
   Definitions
      At line 75 in file VMC_MDB_Main.s
   Uses
      At line 109 in file VMC_MDB_Main.s
Comment: WaitingForCoinsLoop used once
Waiting_gettingAnswer 00000024

Symbol: Waiting_gettingAnswer
   Definitions
      At line 78 in file VMC_MDB_Main.s
   Uses
      At line 86 in file VMC_MDB_Main.s
Comment: Waiting_gettingAnswer used once
Waiting_gettingAnswer_2 00000084

Symbol: Waiting_gettingAnswer_2
   Definitions
      At line 119 in file VMC_MDB_Main.s
   Uses
      At line 127 in file VMC_MDB_Main.s
Comment: Waiting_gettingAnswer_2 used once
WithCreditLoop 00000078




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: WithCreditLoop
   Definitions
      At line 112 in file VMC_MDB_Main.s
   Uses
      At line 102 in file VMC_MDB_Main.s
      At line 169 in file VMC_MDB_Main.s

continue_WithCreditLoop 000000C4

Symbol: continue_WithCreditLoop
   Definitions
      At line 143 in file VMC_MDB_Main.s
   Uses
      At line 123 in file VMC_MDB_Main.s
      At line 134 in file VMC_MDB_Main.s
      At line 137 in file VMC_MDB_Main.s
      At line 139 in file VMC_MDB_Main.s

continue_WithCreditLoopYet 000000F4

Symbol: continue_WithCreditLoopYet
   Definitions
      At line 166 in file VMC_MDB_Main.s
   Uses
      At line 146 in file VMC_MDB_Main.s
      At line 153 in file VMC_MDB_Main.s

continue_waitingForCoins 00000066

Symbol: continue_waitingForCoins
   Definitions
      At line 103 in file VMC_MDB_Main.s
   Uses
      At line 82 in file VMC_MDB_Main.s
      At line 93 in file VMC_MDB_Main.s
      At line 96 in file VMC_MDB_Main.s
      At line 98 in file VMC_MDB_Main.s
      At line 162 in file VMC_MDB_Main.s

items_value_loop 00000168

Symbol: items_value_loop
   Definitions
      At line 226 in file VMC_MDB_Main.s
   Uses
      At line 230 in file VMC_MDB_Main.s
Comment: items_value_loop used once
print_item_value 000000FE

Symbol: print_item_value
   Definitions
      At line 178 in file VMC_MDB_Main.s
   Uses
      At line 106 in file VMC_MDB_Main.s
Comment: print_item_value used once
time_to_verify_credits 000000F4

Symbol: time_to_verify_credits
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 164 in file VMC_MDB_Main.s
   Uses
      At line 155 in file VMC_MDB_Main.s
Comment: time_to_verify_credits used once
14 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

COIN_CHANGER_ADDR 00000008

Symbol: COIN_CHANGER_ADDR
   Definitions
      At line 13 in file VMC_MDB_Main.s
   Uses
      At line 76 in file VMC_MDB_Main.s
      At line 117 in file VMC_MDB_Main.s

1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

Command 00000000

Symbol: Command
   Definitions
      At line 42 in file VMC_MDB_Main.s
   Uses
      None
Comment: Command unused
DataIn 00000000

Symbol: DataIn
   Definitions
      At line 43 in file VMC_MDB_Main.s
   Uses
      At line 79 in file VMC_MDB_Main.s
      At line 88 in file VMC_MDB_Main.s
      At line 120 in file VMC_MDB_Main.s
      At line 129 in file VMC_MDB_Main.s

Identification_buf 00000000

Symbol: Identification_buf
   Definitions
      At line 47 in file VMC_MDB_Main.s
   Uses
      None
Comment: Identification_buf unused
InitPortD 00000000

Symbol: InitPortD
   Definitions
      At line 22 in file VMC_MDB_Main.s
   Uses
      At line 66 in file VMC_MDB_Main.s
Comment: InitPortD used once
KeyInput 00000000

Symbol: KeyInput
   Definitions
      At line 25 in file VMC_MDB_Main.s
   Uses
      At line 148 in file VMC_MDB_Main.s
      At line 182 in file VMC_MDB_Main.s

MDB_DispenseValue 00000000

Symbol: MDB_DispenseValue
   Definitions
      At line 40 in file VMC_MDB_Main.s
   Uses
      At line 159 in file VMC_MDB_Main.s
Comment: MDB_DispenseValue used once
MDB_GetAnswer 00000000

Symbol: MDB_GetAnswer
   Definitions
      At line 36 in file VMC_MDB_Main.s
   Uses
      At line 80 in file VMC_MDB_Main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

      At line 121 in file VMC_MDB_Main.s

MDB_InitCoinChanger 00000000

Symbol: MDB_InitCoinChanger
   Definitions
      At line 38 in file VMC_MDB_Main.s
   Uses
      At line 69 in file VMC_MDB_Main.s
Comment: MDB_InitCoinChanger used once
MDB_SendACK 00000000

Symbol: MDB_SendACK
   Definitions
      At line 33 in file VMC_MDB_Main.s
   Uses
      At line 87 in file VMC_MDB_Main.s
      At line 128 in file VMC_MDB_Main.s

MDB_SendAddress 00000000

Symbol: MDB_SendAddress
   Definitions
      At line 31 in file VMC_MDB_Main.s
   Uses
      None
Comment: MDB_SendAddress unused
MDB_SendBusReset 00000000

Symbol: MDB_SendBusReset
   Definitions
      At line 37 in file VMC_MDB_Main.s
   Uses
      None
Comment: MDB_SendBusReset unused
MDB_SendCommand 00000000

Symbol: MDB_SendCommand
   Definitions
      At line 32 in file VMC_MDB_Main.s
   Uses
      None
Comment: MDB_SendCommand unused
MDB_SendNAK 00000000

Symbol: MDB_SendNAK
   Definitions
      At line 35 in file VMC_MDB_Main.s
   Uses
      None
Comment: MDB_SendNAK unused
MDB_SendPool 00000000

Symbol: MDB_SendPool
   Definitions
      At line 39 in file VMC_MDB_Main.s
   Uses
      At line 77 in file VMC_MDB_Main.s
      At line 118 in file VMC_MDB_Main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
External symbols


MDB_SendRET 00000000

Symbol: MDB_SendRET
   Definitions
      At line 34 in file VMC_MDB_Main.s
   Uses
      At line 84 in file VMC_MDB_Main.s
      At line 125 in file VMC_MDB_Main.s

PLL_Init 00000000

Symbol: PLL_Init
   Definitions
      At line 16 in file VMC_MDB_Main.s
   Uses
      At line 65 in file VMC_MDB_Main.s
Comment: PLL_Init used once
Payout_status_buf 00000000

Symbol: Payout_status_buf
   Definitions
      At line 48 in file VMC_MDB_Main.s
   Uses
      None
Comment: Payout_status_buf unused
Pool_buf 00000000

Symbol: Pool_buf
   Definitions
      At line 46 in file VMC_MDB_Main.s
   Uses
      None
Comment: Pool_buf unused
PortD_clearInterrupt 00000000

Symbol: PortD_clearInterrupt
   Definitions
      At line 23 in file VMC_MDB_Main.s
   Uses
      At line 151 in file VMC_MDB_Main.s
      At line 156 in file VMC_MDB_Main.s
      At line 180 in file VMC_MDB_Main.s

PortD_detectInterrupt 00000000

Symbol: PortD_detectInterrupt
   Definitions
      At line 24 in file VMC_MDB_Main.s
   Uses
      At line 104 in file VMC_MDB_Main.s
      At line 144 in file VMC_MDB_Main.s

Send_diag_status_buf 00000000

Symbol: Send_diag_status_buf
   Definitions
      At line 49 in file VMC_MDB_Main.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
External symbols

      None
Comment: Send_diag_status_buf unused
Setup_buf 00000000

Symbol: Setup_buf
   Definitions
      At line 44 in file VMC_MDB_Main.s
   Uses
      At line 242 in file VMC_MDB_Main.s
Comment: Setup_buf used once
Tube_status_buf 00000000

Symbol: Tube_status_buf
   Definitions
      At line 45 in file VMC_MDB_Main.s
   Uses
      None
Comment: Tube_status_buf unused
UART_Init 00000000

Symbol: UART_Init
   Definitions
      At line 28 in file VMC_MDB_Main.s
   Uses
      At line 67 in file VMC_MDB_Main.s
Comment: UART_Init used once
delay 00000000

Symbol: delay
   Definitions
      At line 19 in file VMC_MDB_Main.s
   Uses
      At line 108 in file VMC_MDB_Main.s
      At line 168 in file VMC_MDB_Main.s

25 symbols
379 symbols in table
